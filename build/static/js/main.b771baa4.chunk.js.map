{"version":3,"sources":["utils/math.ts","interpreter/jshapes.ts","utils/color.ts","interpreter/interpreter.ts","ui/components/Header.tsx","ui/components/Editor.tsx","ui/components/Renderer.tsx","ui/App.tsx","parser/MandalaLexer.ts","parser/MandalaParser.ts","ast/shapes.ts","ast/program.ts","ast/operations.ts","ast/variable.ts","parser/ParseTreeToAST.ts","parser/Main.ts","validator/exceptions.ts","validator/validator.ts","index.tsx"],"names":["polarToCartesian","r","theta","x","Math","cos","y","sin","rotateAboutOrigin","point","JCircle","center","radius","color","mode","type","this","angle","reps","offset","repeatedShapes","PI","rotatingPoint","i","push","JLine","endpoints","start","end","newStart","newEnd","rotatedStart","rotatedEnd","JPetal","size","centerCopy","validColors","red","orange","yellow","green","blue","black","white","isValidColor","undefined","isValidHexColor","RegExp","test","toHexColor","Interpreter","dict","output","program","statements","accept","toDraw","draw","statement","varName","variable","interpShape","shape","map","copy","rotation","shapes","rotate","repetition","repetitions","rss","repeat","overlay","articles","a","name","circle","line","petal","cardioid","limacon","Header","styles","header","margin","padding","backgroundColor","monospace","fontFamily","style","Editor","props","onCodeChange","onClickRun","useState","code","setCode","root","display","flexDirection","button","float","height","fontSize","lineHeight","border","borderRadius","textArea","width","resize","className","onClick","event","preventDefault","placeholder","value","onChange","target","spellCheck","GridLines","axisLength","lines","minor","stroke","strokeWidth","major","axis","x1","y1","x2","y2","ErrorMessage","error","fill","startingPoint","msg","lineLength","words","split","forEach","word","length","lastLine","getWrappedMessage","message","idx","Cardioid","fillOpacity","strokeOpacity","points","steps","alpha","join","getInterpolatedPoints","Circle","cx","cy","Limacon","Line","Petal","Renderer","showGrid","setShowGrid","gridToggle","marginLeft","canvas","borderWidth","borderStyle","borderColor","checked","viewBox","reverse","App","setShapes","setError","app","body","marginTop","justifyContent","MandalaLexer","input","_interp","LexerATNSimulator","_ATN","VOCABULARY","ruleNames","_serializedATN","channelNames","modeNames","__ATN","ATNDeserializer","deserialize","Utils","Lexer","ROTATE","REPEAT","OVERLAY","DRAW","CIRCLE","LINE","PETAL","CARDIOID","LIMACON","SET","COMMA","END_FUNCTION","SEMICOLON","RED","ORANGE","YELLOW","GREEN","BLUE","BLACK","WHITE","HEXCOLOR","SOLID","OUTLINE","ZEROONE","REPETITION_2","REPETITION_MORE","VARIABLE","SPACE","NEWLINE","_LITERAL_NAMES","_SYMBOLIC_NAMES","VocabularyImpl","MandalaParser","ParserATNSimulator","predicate","FailedPredicateException","_la","_localctx","ProgramContext","_ctx","state","enterRule","RULE_program","enterOuterAlt","_errHandler","sync","_input","LA","re","RecognitionException","exception","reportError","recover","exitRule","StatementContext","RULE_statement","match","object","DrawContext","RULE_draw","ObjectContext","RULE_object","shapeConstructor","operation","NoViableAltException","ShapeConstructorContext","RULE_shapeConstructor","OperationContext","RULE_operation","RotateContext","RULE_rotate","num","RepeatContext","RULE_repeat","repeatnum","OverlayContext","RULE_overlay","CircleContext","RULE_circle","shapeMode","LineContext","RULE_line","PetalContext","RULE_petal","CardioidContext","RULE_cardioid","LimaconContext","RULE_limacon","NumContext","RULE_num","recoverInline","Token","EOF","matchedEOF","reportMatch","consume","RepeatnumContext","RULE_repeatnum","ColorContext","RULE_color","ShapeModeContext","RULE_shapeMode","Parser","parent","invokingState","getRuleContext","getRuleContexts","listener","enterProgram","exitProgram","visitor","visitProgram","visitChildren","ParserRuleContext","getToken","enterStatement","exitStatement","visitStatement","enterDraw","exitDraw","visitDraw","tryGetToken","tryGetRuleContext","enterObject","exitObject","visitObject","enterShapeConstructor","exitShapeConstructor","visitShapeConstructor","enterOperation","exitOperation","visitOperation","enterRotate","exitRotate","visitRotate","getTokens","enterRepeat","exitRepeat","visitRepeat","enterOverlay","exitOverlay","visitOverlay","enterCircle","exitCircle","visitCircle","enterLine","exitLine","visitLine","enterPetal","exitPetal","visitPetal","enterCardioid","exitCardioid","visitCardioid","enterLimacon","exitLimacon","visitLimacon","enterNum","exitNum","visitNum","enterRepeatnum","exitRepeatnum","visitRepeatnum","enterColor","exitColor","visitColor","enterShapeMode","exitShapeMode","visitShapeMode","Program","Statement","Draw","Rotation","visitRotation","Repetition","rep","visitRepetition","Overlay","Variable","visitVariable","ParseTreeToAST","ctx","toString","art","Error","text","obj","getNUM","objects","repnum","getREPNUM","getColor","getShapeMode","parseInt","tree","node","Main","inputStream","CharStreams","fromString","lexer","getAllTokens","token","console","info","reset","tokenStream","CommonTokenStream","parser","parsedProgram","InvalidColor","Object","setPrototypeOf","prototype","UndefinedVariable","Validator","Set","has","add","ReactDOM","render","StrictMode","parseCode","document","getElementById"],"mappings":"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","file":"static/js/main.b771baa4.chunk.js","sourcesContent":["import { Point } from \"../ui/types\";\n\n/**\n * Converts a polar coordinate to a cartesian coordinate\n * @param r the distance from the origin\n * @param theta the angle about the origin in radians\n * @returns the equivalent cartesian coordinate\n */\nexport function polarToCartesian(r: number, theta: number): Point {\n  return {\n    x: r * Math.cos(theta),\n    y: r * Math.sin(theta),\n  };\n}\n\n// Rotates a polar coordinate about the origin\n// by angle theta (in radians)\nexport function rotateAboutOrigin(point: Point, theta: number): Point {\n  return {\n    x: point.x * Math.cos(theta) - point.y * Math.sin(theta),\n    y: point.x * Math.sin(theta) + point.y * Math.cos(theta),\n  };\n}\n\n// Converts an angle in degrees to radians\nexport function degToRad(degrees: number): number {\n  return (degrees * Math.PI) / 180;\n}\n","import { Circle, Line, Petal, PetalType, Point } from \"../ui/types\";\nimport { rotateAboutOrigin } from \"../utils/math\";\nimport { Mode } from \"../ast/shapes\";\n\nexport type JShape = JCircle | JLine | JPetal;\n\nexport class JCircle implements Circle {\n  type: \"circle\" = \"circle\";\n  center: Point;\n  radius: number;\n  color: string;\n  mode: Mode;\n\n  constructor(center: Point, radius: number, color: string, mode: Mode) {\n    this.center = center;\n    this.radius = radius;\n    this.color = color;\n    this.mode = mode;\n  }\n\n  copy(): JCircle {\n    const centerCopy: Point = { x: this.center.x, y: this.center.y };\n    return new JCircle(centerCopy, this.radius, this.color, this.mode);\n  }\n\n  rotate(angle: number): void {\n    this.center = rotateAboutOrigin(this.center, angle);\n  }\n\n  repeat(reps: number, offset: number): JCircle[] {\n    this.center.x += offset;\n    const repeatedShapes: JCircle[] = [this];\n\n    const angle: number = (2 * Math.PI) / reps;\n    let rotatingPoint: Point = this.center;\n\n    for (let i = 1; i < reps; i++) {\n      rotatingPoint = rotateAboutOrigin(rotatingPoint, angle);\n      repeatedShapes.push(\n        new JCircle(rotatingPoint, this.radius, this.color, this.mode),\n      );\n    }\n\n    return repeatedShapes;\n  }\n}\n\nexport class JLine implements Line {\n  type: \"line\" = \"line\";\n  endpoints: [Point, Point];\n  color: string;\n\n  constructor(endpoints: [Point, Point], color: string) {\n    this.endpoints = endpoints;\n    this.color = color;\n  }\n\n  copy(): JLine {\n    const [start, end] = this.endpoints;\n    const endpointsCopy: [Point, Point] = [\n      { x: start.x, y: start.y },\n      { x: end.x, y: end.y },\n    ];\n    return new JLine(endpointsCopy, this.color);\n  }\n\n  rotate(angle: number): void {\n    const [start, end]: [Point, Point] = this.endpoints;\n    const newStart: Point = rotateAboutOrigin(start, angle);\n    const newEnd: Point = rotateAboutOrigin(end, angle);\n    this.endpoints = [newStart, newEnd];\n  }\n\n  repeat(reps: number, offset: number): JLine[] {\n    this.endpoints[0].x += offset;\n    this.endpoints[1].x += offset;\n\n    const repeatedShapes: JLine[] = [this];\n\n    const angle: number = (2 * Math.PI) / reps;\n    let [rotatedStart, rotatedEnd]: [Point, Point] = this.endpoints;\n\n    for (let i = 1; i < reps; i++) {\n      rotatedStart = rotateAboutOrigin(rotatedStart, angle);\n      rotatedEnd = rotateAboutOrigin(rotatedEnd, angle);\n\n      repeatedShapes.push(new JLine([rotatedStart, rotatedEnd], this.color));\n    }\n\n    return repeatedShapes;\n  }\n}\n\nexport class JPetal implements Petal {\n  type: PetalType;\n  center: Point;\n  angle: number; // in radians\n  size: number;\n  color: string;\n  mode: Mode;\n\n  constructor(\n    type: PetalType,\n    center: Point,\n    angle: number,\n    size: number,\n    color: string,\n    mode: Mode,\n  ) {\n    this.type = type;\n    this.center = center;\n    this.angle = angle;\n    this.size = size;\n    this.color = color;\n    this.mode = mode;\n  }\n\n  copy(): JPetal {\n    const centerCopy: Point = { x: this.center.x, y: this.center.y };\n    return new JPetal(\n      this.type,\n      centerCopy,\n      this.angle,\n      this.size,\n      this.color,\n      this.mode,\n    );\n  }\n\n  rotate(angle: number): void {\n    this.center = rotateAboutOrigin(this.center, angle);\n    this.angle = this.angle + angle;\n  }\n\n  repeat(reps: number, offset: number): JPetal[] {\n    this.center.x += offset;\n    const repeatedShapes: JPetal[] = [this];\n\n    const angle: number = (2 * Math.PI) / reps;\n    let rotatingPoint: Point = this.center;\n\n    for (let i = 1; i < reps; i++) {\n      rotatingPoint = rotateAboutOrigin(rotatingPoint, angle);\n      repeatedShapes.push(\n        new JPetal(\n          this.type,\n          rotatingPoint,\n          this.angle + angle * i,\n          this.size,\n          this.color,\n          this.mode,\n        ),\n      );\n    }\n\n    return repeatedShapes;\n  }\n}\n","export const validColors: { [key: string]: string } = {\n  red: \"#ff0000\",\n  orange: \"#ffa500\",\n  yellow: \"#ffff00\",\n  green: \"#008000\",\n  blue: \"#0000ff\",\n  black: \"#000000\",\n  white: \"#ffffff\",\n};\n\nexport function isValidColor(color: string): boolean {\n  return validColors[color] !== undefined || isValidHexColor(color);\n}\n\nexport function isValidHexColor(color: string): boolean {\n  const regx = new RegExp(\"#[a-fA-F0-9]{6}\"); // regx for valid hex color string\n  return regx.test(color);\n}\n\n// the following code is taken from StackOverflow:\n// https://stackoverflow.com/questions/3426404/create-a-hexadecimal-colour-based-on-a-string-with-javascript\nexport function toHexColor(color: string): string {\n  // check if already hex\n  if (!isValidHexColor(color)) {\n    return validColors[color];\n  } else {\n    return color;\n  }\n}\n","import { JShape, JCircle, JLine, JPetal } from \"./jshapes\";\nimport { Circle, Line, Petal, Cardioid, Limacon } from \"../ast/shapes\";\nimport { Rotation, Repetition, Overlay } from \"../ast/operations\";\nimport { Article, Draw, Program, Statement } from \"../ast/program\";\nimport { Variable } from \"../ast/variable\";\nimport { Visitor } from \"../ast/visitor\";\nimport { degToRad } from \"../utils/math\";\nimport { toHexColor } from \"../utils/color\";\n\nexport class Interpreter implements Visitor<JShape[]> {\n  // maps string keys to lists of jtype Shape values\n  private dict: { [varNames: string]: JShape[] };\n\n  // final interpreted output\n  private output: JShape[];\n\n  constructor() {\n    this.dict = {};\n    this.output = [];\n  }\n\n  getOutput(): JShape[] {\n    return this.output;\n  }\n\n  visitProgram(program: Program): JShape[] {\n    const statements: Statement[] = program.statements;\n    for (const s of statements) {\n      s.accept(this);\n    }\n\n    const toDraw: Draw = program.draw;\n    this.output = toDraw.accept(this);\n    return this.output;\n  }\n\n  visitStatement(statement: Statement): JShape[] {\n    const varName: string = statement.variable;\n    const shape: Article = statement.shape;\n    const interpShape: JShape[] = shape.accept(this);\n    this.dict[varName] = interpShape;\n    return interpShape.map((shape) => shape.copy()); // copied because effectively returning from the dict\n  }\n\n  // currently never used\n  visitDraw(draw: Draw): JShape[] {\n    const toDraw: Article = draw.draw;\n    this.output = toDraw.accept(this);\n    return this.output;\n  }\n\n  visitRotation(rotation: Rotation): JShape[] {\n    const shapes: JShape[] = rotation.shape.accept(this);\n    const angle: number = degToRad(rotation.angle);\n    for (const s of shapes) {\n      s.rotate(angle);\n    }\n    return shapes;\n  }\n\n  visitRepetition(repetition: Repetition): JShape[] {\n    const shapes: JShape[] = repetition.shape.accept(this);\n    const reps: number = repetition.repetitions;\n    const offset: number = repetition.offset;\n\n    const repeatedShapes: JShape[] = [];\n    for (const s of shapes) {\n      const rss: JShape[] = s.repeat(reps, offset);\n      repeatedShapes.push(...rss);\n    }\n    return repeatedShapes;\n  }\n\n  visitOverlay(overlay: Overlay): JShape[] {\n    const articles: Article[] = overlay.shapes;\n    const shapes: JShape[] = [];\n    for (const a of articles) {\n      shapes.push(...a.accept(this));\n    }\n    return shapes;\n  }\n\n  visitVariable(variable: Variable): JShape[] {\n    const varName: string = variable.name;\n    return this.dict[varName].map((shape) => shape.copy());\n  }\n\n  visitCircle(circle: Circle): JShape[] {\n    return [\n      new JCircle(\n        {\n          x: 0,\n          y: 0,\n        },\n        circle.radius,\n        toHexColor(circle.color),\n        circle.mode,\n      ),\n    ];\n  }\n\n  visitLine(line: Line): JShape[] {\n    return [\n      new JLine(\n        [\n          { x: 0, y: 0 },\n          { x: line.size, y: 0 },\n        ],\n        toHexColor(line.color),\n      ),\n    ];\n  }\n\n  visitPetal(petal: Petal): JShape[] {\n    return [\n      new JPetal(\n        \"petal\",\n        { x: 0, y: 0 },\n        0,\n        petal.size,\n        toHexColor(petal.color),\n        petal.mode,\n      ),\n    ];\n  }\n\n  visitCardioid(cardioid: Cardioid): JShape[] {\n    return [\n      new JPetal(\n        \"cardioid\",\n        { x: 0, y: 0 },\n        0,\n        cardioid.size,\n        toHexColor(cardioid.color),\n        cardioid.mode,\n      ),\n    ];\n  }\n\n  visitLimacon(limacon: Limacon): JShape[] {\n    return [\n      new JPetal(\n        \"limacon\",\n        { x: 0, y: 0 },\n        0,\n        limacon.size,\n        toHexColor(limacon.color),\n        limacon.mode,\n      ),\n    ];\n  }\n}\n","import React from \"react\";\n\nfunction Header(): JSX.Element {\n  const styles: { [name: string]: React.CSSProperties } = {\n    header: {\n      margin: 0,\n      padding: \"1vh\",\n      backgroundColor: \"#3178c6\",\n      color: \"white\",\n    },\n    monospace: {\n      fontFamily: \"Roboto Mono, monospace\",\n    },\n  };\n\n  return (\n    <h1 style={styles.header}>\n      Mandala (<span style={styles.monospace}>.mdl</span>) REPL\n    </h1>\n  );\n}\n\nexport default Header;\n","import React, { useState } from \"react\";\n\ninterface EditorProps {\n  onCodeChange: (code: string) => void;\n  onClickRun: (code: string) => void;\n}\n\nfunction Editor(props: EditorProps): JSX.Element {\n  const { onCodeChange, onClickRun } = props;\n  const [code, setCode] = useState<string>(\"\");\n\n  const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const code = event.target.value;\n    setCode(code);\n    onCodeChange(code);\n  };\n\n  const handleSubmit = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    onClickRun(code);\n  };\n\n  const styles: { [name: string]: React.CSSProperties } = {\n    root: {\n      display: \"flex\",\n      flexDirection: \"column\",\n    },\n    button: {\n      float: \"right\",\n      height: 20,\n      fontSize: \"12pt\",\n      lineHeight: 0,\n      padding: \"3px 10px\",\n      border: \"none\",\n      borderRadius: \"5px 5px 0 0\",\n      backgroundColor: \"#76b947\",\n      color: \"white\",\n    },\n    textArea: {\n      margin: 0,\n      width: \"calc(min(40vw, 80vh) - 6px)\",\n      height: \"calc(min(40vw, 80vh) - 6px)\",\n      resize: \"none\",\n      fontSize: \"12pt\",\n      border: \"1px solid black\",\n    },\n  };\n\n  return (\n    <form className=\"Editor\" style={styles.root}>\n      <div>\n        <button style={styles.button} onClick={handleSubmit}>\n          Run\n        </button>\n      </div>\n      <textarea\n        style={styles.textArea}\n        placeholder=\"Insert code here\"\n        value={code}\n        onChange={handleChange}\n        spellCheck={false}\n      />\n    </form>\n  );\n}\n\nexport default Editor;\n","import React, { useState } from \"react\";\nimport { polarToCartesian } from \"../../utils/math\";\nimport {\n  Point,\n  Circle as ICircle,\n  Line as ILine,\n  Petal as IPetal,\n  Shape as TShape,\n} from \"../types\";\n\ninterface GridLinesProps {\n  axisLength: number;\n}\n\nfunction GridLines(props: GridLinesProps) {\n  const { axisLength } = props;\n  const lines: JSX.Element[] = [];\n\n  const styles: { [name: string]: React.CSSProperties } = {\n    minor: {\n      stroke: \"lightGrey\",\n      strokeWidth: 0.03,\n    },\n    major: {\n      stroke: \"lightGrey\",\n      strokeWidth: 0.06,\n    },\n    axis: {\n      stroke: \"grey\",\n      strokeWidth: 0.09,\n    },\n  };\n\n  // create the horizontal lines\n  for (let i = -axisLength + 1; i < axisLength; i++) {\n    lines.push(\n      <line\n        key={`y${i}`}\n        x1={-axisLength}\n        y1={i}\n        x2={axisLength}\n        y2={i}\n        style={i % 5 === 0 ? styles.major : styles.minor}\n      />,\n    );\n  }\n\n  // create the vertical lines\n  for (let i = -axisLength + 1; i < axisLength; i++) {\n    lines.push(\n      <line\n        key={`x${i}`}\n        x1={i}\n        y1={-axisLength}\n        x2={i}\n        y2={axisLength}\n        style={i % 5 === 0 ? styles.major : styles.minor}\n      />,\n    );\n  }\n\n  // create the x-axis line\n  lines.push(\n    <line\n      key=\"xAxis\"\n      x1={0}\n      y1={-axisLength}\n      x2={0}\n      y2={axisLength}\n      style={styles.axis}\n    />,\n  );\n\n  // create the y-axis line\n  lines.push(\n    <line\n      key=\"yAxis\"\n      x1={-axisLength}\n      y1={0}\n      x2={axisLength}\n      y2={0}\n      style={styles.axis}\n    />,\n  );\n\n  return <>{lines}</>;\n}\n\ninterface ErrorMessageProps {\n  error: Error | null;\n}\n\nfunction ErrorMessage(props: ErrorMessageProps) {\n  const { error } = props;\n\n  const style: React.CSSProperties = {\n    fill: \"red\",\n    fontSize: 1,\n    fontFamily: \"Courier New\",\n  };\n\n  if (error === null) {\n    return null;\n  }\n\n  const getWrappedMessage = (msg: string, lineLength: number) => {\n    const words = msg.split(\" \");\n    const lines: string[] = [];\n\n    words.forEach((word) => {\n      if (lines.length === 0) {\n        lines.push(word);\n        return;\n      }\n\n      const lastLine = lines[lines.length - 1];\n\n      if (lastLine.length + word.length + 1 > lineLength) {\n        lines.push(word);\n      } else {\n        lines[lines.length - 1] = `${lastLine} ${word}`;\n      }\n    });\n\n    return lines;\n  };\n\n  const startingPoint = { x: -18, y: -18 };\n  const lineSpacing = 1.5;\n  const lines = getWrappedMessage(`Error: ${error.message}`, 59);\n\n  return (\n    <>\n      {lines.map((line, idx) => (\n        <text\n          key={idx}\n          x={startingPoint.x}\n          y={startingPoint.y + lineSpacing * idx}\n          style={style}\n        >\n          {line}\n        </text>\n      ))}\n    </>\n  );\n}\n\ninterface CardioidProps {\n  cardioid: IPetal;\n}\n\nfunction Cardioid(props: CardioidProps) {\n  const { center, angle, size, color, mode } = props.cardioid;\n\n  const getInterpolatedPoints = (steps: number) => {\n    const points: Point[] = [];\n\n    for (let theta = 0; theta <= 2 * Math.PI; theta += (2 * Math.PI) / steps) {\n      const alpha = size / 2;\n      const r = alpha + alpha * Math.cos(theta - angle);\n\n      let { x, y } = polarToCartesian(r, theta);\n      x += center.x;\n      y += center.y;\n\n      points.push({ x, y: -y });\n    }\n\n    return points.map(({ x, y }) => `${x} ${y}`).join(\",\");\n  };\n\n  const style: React.CSSProperties = {\n    fill: color,\n    fillOpacity: mode === \"solid\" ? 1 : 0,\n    stroke: color,\n    strokeOpacity: mode === \"outline\" ? 1 : 0,\n    strokeWidth: mode === \"outline\" ? 0.2 : 0,\n  };\n\n  return <polyline points={getInterpolatedPoints(360)} style={style} />;\n}\n\ninterface CircleProps {\n  circle: ICircle;\n}\n\nfunction Circle(props: CircleProps) {\n  const { center, radius, color, mode } = props.circle;\n\n  const style: React.CSSProperties = {\n    fill: color,\n    fillOpacity: mode === \"solid\" ? 1 : 0,\n    stroke: color,\n    strokeOpacity: mode === \"outline\" ? 1 : 0,\n    strokeWidth: mode === \"outline\" ? 0.2 : 0,\n  };\n\n  return <circle cx={center.x} cy={-center.y} r={radius} style={style} />;\n}\n\ninterface LimaconProps {\n  limacon: IPetal;\n}\n\nfunction Limacon(props: LimaconProps) {\n  const { center, angle, size, color, mode } = props.limacon;\n\n  const getInterpolatedPoints = (steps: number) => {\n    const points: Point[] = [];\n\n    for (let theta = 0; theta <= 2 * Math.PI; theta += (2 * Math.PI) / steps) {\n      const a = size / 3;\n      const b = size / 1.5;\n      const r = a + b * Math.cos(theta - angle);\n\n      let { x, y } = polarToCartesian(r, theta);\n      x += center.x;\n      y += center.y;\n\n      points.push({ x, y: -y });\n    }\n\n    return points.map(({ x, y }) => `${x} ${y}`).join(\",\");\n  };\n\n  const style: React.CSSProperties = {\n    fill: color,\n    fillOpacity: mode === \"solid\" ? 1 : 0,\n    stroke: color,\n    strokeOpacity: mode === \"outline\" ? 1 : 0,\n    strokeWidth: mode === \"outline\" ? 0.2 : 0,\n  };\n\n  return <polyline points={getInterpolatedPoints(360)} style={style} />;\n}\n\ninterface LineProps {\n  line: ILine;\n}\n\nfunction Line(props: LineProps) {\n  const { endpoints, color } = props.line;\n\n  const style: React.CSSProperties = {\n    stroke: color,\n    strokeWidth: 0.2,\n  };\n\n  return (\n    <line\n      x1={endpoints[0].x}\n      y1={-endpoints[0].y}\n      x2={endpoints[1].x}\n      y2={-endpoints[1].y}\n      style={style}\n    />\n  );\n}\n\ninterface PetalProps {\n  petal: IPetal;\n}\n\nfunction Petal(props: PetalProps) {\n  const { center, angle, size, color, mode } = props.petal;\n\n  const getInterpolatedPoints = (steps: number) => {\n    const points: Point[] = [];\n\n    for (\n      let theta = -Math.PI / 4 + angle;\n      theta <= Math.PI / 4 + angle;\n      theta += Math.PI / 2 / steps\n    ) {\n      const r = size * Math.cos(2 * (theta - angle));\n\n      let { x, y } = polarToCartesian(r, theta);\n      x += center.x;\n      y += center.y;\n\n      points.push({ x, y: -y });\n    }\n\n    return points.map(({ x, y }) => `${x} ${y}`).join(\",\");\n  };\n\n  const style: React.CSSProperties = {\n    fill: color,\n    fillOpacity: mode === \"solid\" ? 1 : 0,\n    stroke: color,\n    strokeOpacity: mode === \"outline\" ? 1 : 0,\n    strokeWidth: mode === \"outline\" ? 0.2 : 0,\n  };\n\n  return <polyline points={getInterpolatedPoints(360)} style={style} />;\n}\n\ninterface RendererProps {\n  shapes: TShape[];\n  error: Error | null;\n}\n\nfunction Renderer(props: RendererProps): JSX.Element {\n  const { shapes, error } = props;\n  const [showGrid, setShowGrid] = useState(true);\n  const axisLength = 20;\n\n  const styles: { [name: string]: React.CSSProperties } = {\n    root: {\n      display: \"flex\",\n      flexDirection: \"column\",\n    },\n    gridToggle: {\n      marginLeft: \"auto\",\n      fontSize: \"12pt\",\n    },\n    canvas: {\n      width: \"min(40vw, 80vh)\",\n      height: \"min(40vw, 80vh)\",\n      borderWidth: 1,\n      borderStyle: \"solid\",\n      borderColor: \"black\",\n      backgroundColor: \"white\",\n    },\n  };\n\n  return (\n    <div className=\"Renderer\" style={styles.root}>\n      <label style={styles.gridToggle}>\n        <input\n          type=\"checkbox\"\n          checked={showGrid}\n          onChange={() => setShowGrid(!showGrid)}\n        />\n        Show grid\n      </label>\n      <svg\n        style={styles.canvas}\n        viewBox={`-${axisLength} -${axisLength} ${axisLength * 2} ${\n          axisLength * 2\n        }`}\n      >\n        {showGrid && !error ? <GridLines axisLength={axisLength} /> : null}\n        <ErrorMessage error={error} />\n        {[...shapes].reverse().map((shape) => {\n          switch (shape.type) {\n            case \"cardioid\":\n              return <Cardioid cardioid={shape} />;\n            case \"circle\":\n              return <Circle circle={shape} />;\n            case \"limacon\":\n              return <Limacon limacon={shape} />;\n            case \"line\":\n              return <Line line={shape} />;\n            case \"petal\":\n              return <Petal petal={shape} />;\n            default:\n              return null;\n          }\n        })}\n      </svg>\n    </div>\n  );\n}\n\nexport default Renderer;\n","import React, { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport Editor from \"./components/Editor\";\nimport Renderer from \"./components/Renderer\";\nimport { Shape } from \"./types\";\n\ninterface AppProps {\n  onCodeChange: (code: string) => void;\n  onClickRun: (code: string) => Shape[];\n}\n\nfunction App(props: AppProps): JSX.Element {\n  const { onCodeChange, onClickRun } = props;\n  const [shapes, setShapes] = useState<Shape[]>([]);\n  const [error, setError] = useState<Error | null>(null);\n\n  const handleClickRun = (code: string) => {\n    try {\n      const shapes = onClickRun(code);\n      setShapes(shapes);\n      setError(null);\n    } catch (error) {\n      setShapes([]);\n      setError(error as Error);\n    }\n  };\n\n  const styles: { [name: string]: React.CSSProperties } = {\n    app: {\n      fontFamily: \"Roboto, sans-serif\",\n      backgroundColor: \"#fafafa\",\n    },\n    body: {\n      marginTop: \"2vh\",\n      display: \"flex\",\n      justifyContent: \"space-evenly\",\n    },\n  };\n\n  return (\n    <div className=\"App\" style={styles.app}>\n      <Header />\n      <div style={styles.body}>\n        <Editor onCodeChange={onCodeChange} onClickRun={handleClickRun} />\n        <Renderer shapes={shapes} error={error} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// Generated from src/parser/MandalaLexer.g4 by ANTLR 4.9.0-SNAPSHOT\n\nimport { ATN } from \"antlr4ts/atn/ATN\";\nimport { ATNDeserializer } from \"antlr4ts/atn/ATNDeserializer\";\nimport { CharStream } from \"antlr4ts/CharStream\";\nimport { Lexer } from \"antlr4ts/Lexer\";\nimport { LexerATNSimulator } from \"antlr4ts/atn/LexerATNSimulator\";\nimport { NotNull } from \"antlr4ts/Decorators\";\nimport { Override } from \"antlr4ts/Decorators\";\nimport { RuleContext } from \"antlr4ts/RuleContext\";\nimport { Vocabulary } from \"antlr4ts/Vocabulary\";\nimport { VocabularyImpl } from \"antlr4ts/VocabularyImpl\";\n\nimport * as Utils from \"antlr4ts/misc/Utils\";\n\nexport class MandalaLexer extends Lexer {\n  public static readonly ROTATE = 1;\n  public static readonly REPEAT = 2;\n  public static readonly OVERLAY = 3;\n  public static readonly DRAW = 4;\n  public static readonly CIRCLE = 5;\n  public static readonly LINE = 6;\n  public static readonly PETAL = 7;\n  public static readonly CARDIOID = 8;\n  public static readonly LIMACON = 9;\n  public static readonly SET = 10;\n  public static readonly COMMA = 11;\n  public static readonly END_FUNCTION = 12;\n  public static readonly SEMICOLON = 13;\n  public static readonly RED = 14;\n  public static readonly ORANGE = 15;\n  public static readonly YELLOW = 16;\n  public static readonly GREEN = 17;\n  public static readonly BLUE = 18;\n  public static readonly BLACK = 19;\n  public static readonly WHITE = 20;\n  public static readonly HEXCOLOR = 21;\n  public static readonly SOLID = 22;\n  public static readonly OUTLINE = 23;\n  public static readonly ZEROONE = 24;\n  public static readonly REPETITION_2 = 25;\n  public static readonly REPETITION_MORE = 26;\n  public static readonly VARIABLE = 27;\n  public static readonly SPACE = 28;\n  public static readonly NEWLINE = 29;\n\n  // tslint:disable:no-trailing-whitespace\n  public static readonly channelNames: string[] = [\n    \"DEFAULT_TOKEN_CHANNEL\",\n    \"HIDDEN\",\n  ];\n\n  // tslint:disable:no-trailing-whitespace\n  public static readonly modeNames: string[] = [\"DEFAULT_MODE\"];\n\n  public static readonly ruleNames: string[] = [\n    \"ROTATE\",\n    \"REPEAT\",\n    \"OVERLAY\",\n    \"DRAW\",\n    \"CIRCLE\",\n    \"LINE\",\n    \"PETAL\",\n    \"CARDIOID\",\n    \"LIMACON\",\n    \"SET\",\n    \"COMMA\",\n    \"END_FUNCTION\",\n    \"SEMICOLON\",\n    \"RED\",\n    \"ORANGE\",\n    \"YELLOW\",\n    \"GREEN\",\n    \"BLUE\",\n    \"BLACK\",\n    \"WHITE\",\n    \"HEXCOLOR\",\n    \"SOLID\",\n    \"OUTLINE\",\n    \"ZEROONE\",\n    \"REPETITION_2\",\n    \"REPETITION_MORE\",\n    \"VARIABLE\",\n    \"SPACE\",\n    \"NEWLINE\",\n  ];\n\n  private static readonly _LITERAL_NAMES: Array<string | undefined> = [\n    undefined,\n    \"'rotate('\",\n    \"'repeat('\",\n    \"'overlay('\",\n    \"'draw('\",\n    \"'createCircle('\",\n    \"'createLine('\",\n    \"'createPetal('\",\n    \"'createCardioid('\",\n    \"'createLimacon('\",\n    \"'='\",\n    \"','\",\n    \"')'\",\n    \"';'\",\n    \"'red'\",\n    \"'orange'\",\n    \"'yellow'\",\n    \"'green'\",\n    \"'blue'\",\n    \"'black'\",\n    \"'white'\",\n    undefined,\n    \"'solid'\",\n    \"'outline'\",\n  ];\n  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [\n    undefined,\n    \"ROTATE\",\n    \"REPEAT\",\n    \"OVERLAY\",\n    \"DRAW\",\n    \"CIRCLE\",\n    \"LINE\",\n    \"PETAL\",\n    \"CARDIOID\",\n    \"LIMACON\",\n    \"SET\",\n    \"COMMA\",\n    \"END_FUNCTION\",\n    \"SEMICOLON\",\n    \"RED\",\n    \"ORANGE\",\n    \"YELLOW\",\n    \"GREEN\",\n    \"BLUE\",\n    \"BLACK\",\n    \"WHITE\",\n    \"HEXCOLOR\",\n    \"SOLID\",\n    \"OUTLINE\",\n    \"ZEROONE\",\n    \"REPETITION_2\",\n    \"REPETITION_MORE\",\n    \"VARIABLE\",\n    \"SPACE\",\n    \"NEWLINE\",\n  ];\n  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(\n    MandalaLexer._LITERAL_NAMES,\n    MandalaLexer._SYMBOLIC_NAMES,\n    [],\n  );\n\n  // @Override\n  // @NotNull\n  public get vocabulary(): Vocabulary {\n    return MandalaLexer.VOCABULARY;\n  }\n  // tslint:enable:no-trailing-whitespace\n\n  constructor(input: CharStream) {\n    super(input);\n    this._interp = new LexerATNSimulator(MandalaLexer._ATN, this);\n  }\n\n  // @Override\n  public get grammarFileName(): string {\n    return \"MandalaLexer.g4\";\n  }\n\n  // @Override\n  public get ruleNames(): string[] {\n    return MandalaLexer.ruleNames;\n  }\n\n  // @Override\n  public get serializedATN(): string {\n    return MandalaLexer._serializedATN;\n  }\n\n  // @Override\n  public get channelNames(): string[] {\n    return MandalaLexer.channelNames;\n  }\n\n  // @Override\n  public get modeNames(): string[] {\n    return MandalaLexer.modeNames;\n  }\n\n  public static readonly _serializedATN: string =\n    \"\\x03\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\\x02\\x1F\\u0108\\b\\x01\" +\n    \"\\x04\\x02\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\" +\n    \"\\x04\\x07\\t\\x07\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\v\\t\\v\\x04\\f\\t\\f\\x04\\r\" +\n    \"\\t\\r\\x04\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x04\\x10\\t\\x10\\x04\\x11\\t\\x11\\x04\\x12\\t\" +\n    \"\\x12\\x04\\x13\\t\\x13\\x04\\x14\\t\\x14\\x04\\x15\\t\\x15\\x04\\x16\\t\\x16\\x04\\x17\\t\" +\n    \"\\x17\\x04\\x18\\t\\x18\\x04\\x19\\t\\x19\\x04\\x1A\\t\\x1A\\x04\\x1B\\t\\x1B\\x04\\x1C\\t\" +\n    \"\\x1C\\x04\\x1D\\t\\x1D\\x04\\x1E\\t\\x1E\\x03\\x02\\x03\\x02\\x03\\x02\\x03\\x02\\x03\\x02\" +\n    \"\\x03\\x02\\x03\\x02\\x03\\x02\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\" +\n    \"\\x03\\x03\\x03\\x03\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\" +\n    \"\\x03\\x04\\x03\\x04\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x06\" +\n    \"\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\" +\n    \"\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x07\\x03\\x07\\x03\\x07\\x03\\x07\\x03\\x07\" +\n    \"\\x03\\x07\\x03\\x07\\x03\\x07\\x03\\x07\\x03\\x07\\x03\\x07\\x03\\x07\\x03\\b\\x03\\b\\x03\" +\n    \"\\b\\x03\\b\\x03\\b\\x03\\b\\x03\\b\\x03\\b\\x03\\b\\x03\\b\\x03\\b\\x03\\b\\x03\\b\\x03\\t\\x03\" +\n    \"\\t\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x03\" +\n    \"\\t\\x03\\t\\x03\\t\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\" +\n    \"\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\v\\x03\\v\\x03\\f\\x03\\f\\x03\\r\\x03\\r\\x03\" +\n    \"\\x0E\\x03\\x0E\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x10\\x03\\x10\\x03\\x10\\x03\" +\n    \"\\x10\\x03\\x10\\x03\\x10\\x03\\x10\\x03\\x11\\x03\\x11\\x03\\x11\\x03\\x11\\x03\\x11\\x03\" +\n    \"\\x11\\x03\\x11\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x13\\x03\" +\n    \"\\x13\\x03\\x13\\x03\\x13\\x03\\x13\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\" +\n    \"\\x14\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x16\\x03\\x16\\x03\" +\n    \"\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x17\\x03\\x17\\x03\\x17\\x03\" +\n    \"\\x17\\x03\\x17\\x03\\x17\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\" +\n    \"\\x18\\x03\\x18\\x03\\x19\\x03\\x19\\x03\\x1A\\x03\\x1A\\x03\\x1B\\x03\\x1B\\x06\\x1B\\xF0\" +\n    \"\\n\\x1B\\r\\x1B\\x0E\\x1B\\xF1\\x03\\x1C\\x03\\x1C\\x07\\x1C\\xF6\\n\\x1C\\f\\x1C\\x0E\\x1C\" +\n    \"\\xF9\\v\\x1C\\x03\\x1D\\x06\\x1D\\xFC\\n\\x1D\\r\\x1D\\x0E\\x1D\\xFD\\x03\\x1D\\x03\\x1D\" +\n    \"\\x03\\x1E\\x06\\x1E\\u0103\\n\\x1E\\r\\x1E\\x0E\\x1E\\u0104\\x03\\x1E\\x03\\x1E\\x02\\x02\" +\n    \"\\x02\\x1F\\x03\\x02\\x03\\x05\\x02\\x04\\x07\\x02\\x05\\t\\x02\\x06\\v\\x02\\x07\\r\\x02\" +\n    \"\\b\\x0F\\x02\\t\\x11\\x02\\n\\x13\\x02\\v\\x15\\x02\\f\\x17\\x02\\r\\x19\\x02\\x0E\\x1B\\x02\" +\n    \"\\x0F\\x1D\\x02\\x10\\x1F\\x02\\x11!\\x02\\x12#\\x02\\x13%\\x02\\x14'\\x02\\x15)\\x02\" +\n    \"\\x16+\\x02\\x17-\\x02\\x18/\\x02\\x191\\x02\\x1A3\\x02\\x1B5\\x02\\x1C7\\x02\\x1D9\\x02\" +\n    \"\\x1E;\\x02\\x1F\\x03\\x02\\v\\x05\\x022;CHch\\x03\\x0223\\x03\\x024;\\x03\\x023;\\x03\" +\n    '\\x022;\\x04\\x02C\\\\c|\\x05\\x022;C\\\\c|\\x04\\x02\\v\\v\"\"\\x04\\x02\\f\\f\\x0F\\x0F' +\n    \"\\x02\\u010B\\x02\\x03\\x03\\x02\\x02\\x02\\x02\\x05\\x03\\x02\\x02\\x02\\x02\\x07\\x03\" +\n    \"\\x02\\x02\\x02\\x02\\t\\x03\\x02\\x02\\x02\\x02\\v\\x03\\x02\\x02\\x02\\x02\\r\\x03\\x02\" +\n    \"\\x02\\x02\\x02\\x0F\\x03\\x02\\x02\\x02\\x02\\x11\\x03\\x02\\x02\\x02\\x02\\x13\\x03\\x02\" +\n    \"\\x02\\x02\\x02\\x15\\x03\\x02\\x02\\x02\\x02\\x17\\x03\\x02\\x02\\x02\\x02\\x19\\x03\\x02\" +\n    \"\\x02\\x02\\x02\\x1B\\x03\\x02\\x02\\x02\\x02\\x1D\\x03\\x02\\x02\\x02\\x02\\x1F\\x03\\x02\" +\n    \"\\x02\\x02\\x02!\\x03\\x02\\x02\\x02\\x02#\\x03\\x02\\x02\\x02\\x02%\\x03\\x02\\x02\\x02\" +\n    \"\\x02'\\x03\\x02\\x02\\x02\\x02)\\x03\\x02\\x02\\x02\\x02+\\x03\\x02\\x02\\x02\\x02-\" +\n    \"\\x03\\x02\\x02\\x02\\x02/\\x03\\x02\\x02\\x02\\x021\\x03\\x02\\x02\\x02\\x023\\x03\\x02\" +\n    \"\\x02\\x02\\x025\\x03\\x02\\x02\\x02\\x027\\x03\\x02\\x02\\x02\\x029\\x03\\x02\\x02\\x02\" +\n    \"\\x02;\\x03\\x02\\x02\\x02\\x03=\\x03\\x02\\x02\\x02\\x05E\\x03\\x02\\x02\\x02\\x07M\\x03\" +\n    \"\\x02\\x02\\x02\\tV\\x03\\x02\\x02\\x02\\v\\\\\\x03\\x02\\x02\\x02\\rj\\x03\\x02\\x02\\x02\" +\n    \"\\x0Fv\\x03\\x02\\x02\\x02\\x11\\x83\\x03\\x02\\x02\\x02\\x13\\x93\\x03\\x02\\x02\\x02\" +\n    \"\\x15\\xA2\\x03\\x02\\x02\\x02\\x17\\xA4\\x03\\x02\\x02\\x02\\x19\\xA6\\x03\\x02\\x02\\x02\" +\n    \"\\x1B\\xA8\\x03\\x02\\x02\\x02\\x1D\\xAA\\x03\\x02\\x02\\x02\\x1F\\xAE\\x03\\x02\\x02\\x02\" +\n    \"!\\xB5\\x03\\x02\\x02\\x02#\\xBC\\x03\\x02\\x02\\x02%\\xC2\\x03\\x02\\x02\\x02'\\xC7\" +\n    \"\\x03\\x02\\x02\\x02)\\xCD\\x03\\x02\\x02\\x02+\\xD3\\x03\\x02\\x02\\x02-\\xDB\\x03\\x02\" +\n    \"\\x02\\x02/\\xE1\\x03\\x02\\x02\\x021\\xE9\\x03\\x02\\x02\\x023\\xEB\\x03\\x02\\x02\\x02\" +\n    \"5\\xED\\x03\\x02\\x02\\x027\\xF3\\x03\\x02\\x02\\x029\\xFB\\x03\\x02\\x02\\x02;\\u0102\" +\n    \"\\x03\\x02\\x02\\x02=>\\x07t\\x02\\x02>?\\x07q\\x02\\x02?@\\x07v\\x02\\x02@A\\x07c\\x02\" +\n    \"\\x02AB\\x07v\\x02\\x02BC\\x07g\\x02\\x02CD\\x07*\\x02\\x02D\\x04\\x03\\x02\\x02\\x02\" +\n    \"EF\\x07t\\x02\\x02FG\\x07g\\x02\\x02GH\\x07r\\x02\\x02HI\\x07g\\x02\\x02IJ\\x07c\\x02\" +\n    \"\\x02JK\\x07v\\x02\\x02KL\\x07*\\x02\\x02L\\x06\\x03\\x02\\x02\\x02MN\\x07q\\x02\\x02\" +\n    \"NO\\x07x\\x02\\x02OP\\x07g\\x02\\x02PQ\\x07t\\x02\\x02QR\\x07n\\x02\\x02RS\\x07c\\x02\" +\n    \"\\x02ST\\x07{\\x02\\x02TU\\x07*\\x02\\x02U\\b\\x03\\x02\\x02\\x02VW\\x07f\\x02\\x02W\" +\n    \"X\\x07t\\x02\\x02XY\\x07c\\x02\\x02YZ\\x07y\\x02\\x02Z[\\x07*\\x02\\x02[\\n\\x03\\x02\" +\n    \"\\x02\\x02\\\\]\\x07e\\x02\\x02]^\\x07t\\x02\\x02^_\\x07g\\x02\\x02_`\\x07c\\x02\\x02\" +\n    \"`a\\x07v\\x02\\x02ab\\x07g\\x02\\x02bc\\x07E\\x02\\x02cd\\x07k\\x02\\x02de\\x07t\\x02\" +\n    \"\\x02ef\\x07e\\x02\\x02fg\\x07n\\x02\\x02gh\\x07g\\x02\\x02hi\\x07*\\x02\\x02i\\f\\x03\" +\n    \"\\x02\\x02\\x02jk\\x07e\\x02\\x02kl\\x07t\\x02\\x02lm\\x07g\\x02\\x02mn\\x07c\\x02\\x02\" +\n    \"no\\x07v\\x02\\x02op\\x07g\\x02\\x02pq\\x07N\\x02\\x02qr\\x07k\\x02\\x02rs\\x07p\\x02\" +\n    \"\\x02st\\x07g\\x02\\x02tu\\x07*\\x02\\x02u\\x0E\\x03\\x02\\x02\\x02vw\\x07e\\x02\\x02\" +\n    \"wx\\x07t\\x02\\x02xy\\x07g\\x02\\x02yz\\x07c\\x02\\x02z{\\x07v\\x02\\x02{|\\x07g\\x02\" +\n    \"\\x02|}\\x07R\\x02\\x02}~\\x07g\\x02\\x02~\\x7F\\x07v\\x02\\x02\\x7F\\x80\\x07c\\x02\" +\n    \"\\x02\\x80\\x81\\x07n\\x02\\x02\\x81\\x82\\x07*\\x02\\x02\\x82\\x10\\x03\\x02\\x02\\x02\" +\n    \"\\x83\\x84\\x07e\\x02\\x02\\x84\\x85\\x07t\\x02\\x02\\x85\\x86\\x07g\\x02\\x02\\x86\\x87\" +\n    \"\\x07c\\x02\\x02\\x87\\x88\\x07v\\x02\\x02\\x88\\x89\\x07g\\x02\\x02\\x89\\x8A\\x07E\\x02\" +\n    \"\\x02\\x8A\\x8B\\x07c\\x02\\x02\\x8B\\x8C\\x07t\\x02\\x02\\x8C\\x8D\\x07f\\x02\\x02\\x8D\" +\n    \"\\x8E\\x07k\\x02\\x02\\x8E\\x8F\\x07q\\x02\\x02\\x8F\\x90\\x07k\\x02\\x02\\x90\\x91\\x07\" +\n    \"f\\x02\\x02\\x91\\x92\\x07*\\x02\\x02\\x92\\x12\\x03\\x02\\x02\\x02\\x93\\x94\\x07e\\x02\" +\n    \"\\x02\\x94\\x95\\x07t\\x02\\x02\\x95\\x96\\x07g\\x02\\x02\\x96\\x97\\x07c\\x02\\x02\\x97\" +\n    \"\\x98\\x07v\\x02\\x02\\x98\\x99\\x07g\\x02\\x02\\x99\\x9A\\x07N\\x02\\x02\\x9A\\x9B\\x07\" +\n    \"k\\x02\\x02\\x9B\\x9C\\x07o\\x02\\x02\\x9C\\x9D\\x07c\\x02\\x02\\x9D\\x9E\\x07e\\x02\\x02\" +\n    \"\\x9E\\x9F\\x07q\\x02\\x02\\x9F\\xA0\\x07p\\x02\\x02\\xA0\\xA1\\x07*\\x02\\x02\\xA1\\x14\" +\n    \"\\x03\\x02\\x02\\x02\\xA2\\xA3\\x07?\\x02\\x02\\xA3\\x16\\x03\\x02\\x02\\x02\\xA4\\xA5\" +\n    \"\\x07.\\x02\\x02\\xA5\\x18\\x03\\x02\\x02\\x02\\xA6\\xA7\\x07+\\x02\\x02\\xA7\\x1A\\x03\" +\n    \"\\x02\\x02\\x02\\xA8\\xA9\\x07=\\x02\\x02\\xA9\\x1C\\x03\\x02\\x02\\x02\\xAA\\xAB\\x07\" +\n    \"t\\x02\\x02\\xAB\\xAC\\x07g\\x02\\x02\\xAC\\xAD\\x07f\\x02\\x02\\xAD\\x1E\\x03\\x02\\x02\" +\n    \"\\x02\\xAE\\xAF\\x07q\\x02\\x02\\xAF\\xB0\\x07t\\x02\\x02\\xB0\\xB1\\x07c\\x02\\x02\\xB1\" +\n    \"\\xB2\\x07p\\x02\\x02\\xB2\\xB3\\x07i\\x02\\x02\\xB3\\xB4\\x07g\\x02\\x02\\xB4 \\x03\\x02\" +\n    \"\\x02\\x02\\xB5\\xB6\\x07{\\x02\\x02\\xB6\\xB7\\x07g\\x02\\x02\\xB7\\xB8\\x07n\\x02\\x02\" +\n    '\\xB8\\xB9\\x07n\\x02\\x02\\xB9\\xBA\\x07q\\x02\\x02\\xBA\\xBB\\x07y\\x02\\x02\\xBB\"' +\n    \"\\x03\\x02\\x02\\x02\\xBC\\xBD\\x07i\\x02\\x02\\xBD\\xBE\\x07t\\x02\\x02\\xBE\\xBF\\x07\" +\n    \"g\\x02\\x02\\xBF\\xC0\\x07g\\x02\\x02\\xC0\\xC1\\x07p\\x02\\x02\\xC1$\\x03\\x02\\x02\\x02\" +\n    \"\\xC2\\xC3\\x07d\\x02\\x02\\xC3\\xC4\\x07n\\x02\\x02\\xC4\\xC5\\x07w\\x02\\x02\\xC5\\xC6\" +\n    \"\\x07g\\x02\\x02\\xC6&\\x03\\x02\\x02\\x02\\xC7\\xC8\\x07d\\x02\\x02\\xC8\\xC9\\x07n\\x02\" +\n    \"\\x02\\xC9\\xCA\\x07c\\x02\\x02\\xCA\\xCB\\x07e\\x02\\x02\\xCB\\xCC\\x07m\\x02\\x02\\xCC\" +\n    \"(\\x03\\x02\\x02\\x02\\xCD\\xCE\\x07y\\x02\\x02\\xCE\\xCF\\x07j\\x02\\x02\\xCF\\xD0\\x07\" +\n    \"k\\x02\\x02\\xD0\\xD1\\x07v\\x02\\x02\\xD1\\xD2\\x07g\\x02\\x02\\xD2*\\x03\\x02\\x02\\x02\" +\n    \"\\xD3\\xD4\\x07%\\x02\\x02\\xD4\\xD5\\t\\x02\\x02\\x02\\xD5\\xD6\\t\\x02\\x02\\x02\\xD6\" +\n    \"\\xD7\\t\\x02\\x02\\x02\\xD7\\xD8\\t\\x02\\x02\\x02\\xD8\\xD9\\t\\x02\\x02\\x02\\xD9\\xDA\" +\n    \"\\t\\x02\\x02\\x02\\xDA,\\x03\\x02\\x02\\x02\\xDB\\xDC\\x07u\\x02\\x02\\xDC\\xDD\\x07q\" +\n    \"\\x02\\x02\\xDD\\xDE\\x07n\\x02\\x02\\xDE\\xDF\\x07k\\x02\\x02\\xDF\\xE0\\x07f\\x02\\x02\" +\n    \"\\xE0.\\x03\\x02\\x02\\x02\\xE1\\xE2\\x07q\\x02\\x02\\xE2\\xE3\\x07w\\x02\\x02\\xE3\\xE4\" +\n    \"\\x07v\\x02\\x02\\xE4\\xE5\\x07n\\x02\\x02\\xE5\\xE6\\x07k\\x02\\x02\\xE6\\xE7\\x07p\\x02\" +\n    \"\\x02\\xE7\\xE8\\x07g\\x02\\x02\\xE80\\x03\\x02\\x02\\x02\\xE9\\xEA\\t\\x03\\x02\\x02\\xEA\" +\n    \"2\\x03\\x02\\x02\\x02\\xEB\\xEC\\t\\x04\\x02\\x02\\xEC4\\x03\\x02\\x02\\x02\\xED\\xEF\\t\" +\n    \"\\x05\\x02\\x02\\xEE\\xF0\\t\\x06\\x02\\x02\\xEF\\xEE\\x03\\x02\\x02\\x02\\xF0\\xF1\\x03\" +\n    \"\\x02\\x02\\x02\\xF1\\xEF\\x03\\x02\\x02\\x02\\xF1\\xF2\\x03\\x02\\x02\\x02\\xF26\\x03\" +\n    \"\\x02\\x02\\x02\\xF3\\xF7\\t\\x07\\x02\\x02\\xF4\\xF6\\t\\b\\x02\\x02\\xF5\\xF4\\x03\\x02\" +\n    \"\\x02\\x02\\xF6\\xF9\\x03\\x02\\x02\\x02\\xF7\\xF5\\x03\\x02\\x02\\x02\\xF7\\xF8\\x03\\x02\" +\n    \"\\x02\\x02\\xF88\\x03\\x02\\x02\\x02\\xF9\\xF7\\x03\\x02\\x02\\x02\\xFA\\xFC\\t\\t\\x02\" +\n    \"\\x02\\xFB\\xFA\\x03\\x02\\x02\\x02\\xFC\\xFD\\x03\\x02\\x02\\x02\\xFD\\xFB\\x03\\x02\\x02\" +\n    \"\\x02\\xFD\\xFE\\x03\\x02\\x02\\x02\\xFE\\xFF\\x03\\x02\\x02\\x02\\xFF\\u0100\\b\\x1D\\x02\" +\n    \"\\x02\\u0100:\\x03\\x02\\x02\\x02\\u0101\\u0103\\t\\n\\x02\\x02\\u0102\\u0101\\x03\\x02\" +\n    \"\\x02\\x02\\u0103\\u0104\\x03\\x02\\x02\\x02\\u0104\\u0102\\x03\\x02\\x02\\x02\\u0104\" +\n    \"\\u0105\\x03\\x02\\x02\\x02\\u0105\\u0106\\x03\\x02\\x02\\x02\\u0106\\u0107\\b\\x1E\\x02\" +\n    \"\\x02\\u0107<\\x03\\x02\\x02\\x02\\x07\\x02\\xF1\\xF7\\xFD\\u0104\\x03\\x02\\x03\\x02\";\n  public static __ATN: ATN;\n  public static get _ATN(): ATN {\n    if (!MandalaLexer.__ATN) {\n      MandalaLexer.__ATN = new ATNDeserializer().deserialize(\n        Utils.toCharArray(MandalaLexer._serializedATN),\n      );\n    }\n\n    return MandalaLexer.__ATN;\n  }\n}\n","// Generated from src/parser/MandalaParser.g4 by ANTLR 4.9.0-SNAPSHOT\n\nimport { ATN } from \"antlr4ts/atn/ATN\";\nimport { ATNDeserializer } from \"antlr4ts/atn/ATNDeserializer\";\nimport { FailedPredicateException } from \"antlr4ts/FailedPredicateException\";\nimport { NotNull } from \"antlr4ts/Decorators\";\nimport { NoViableAltException } from \"antlr4ts/NoViableAltException\";\nimport { Override } from \"antlr4ts/Decorators\";\nimport { Parser } from \"antlr4ts/Parser\";\nimport { ParserRuleContext } from \"antlr4ts/ParserRuleContext\";\nimport { ParserATNSimulator } from \"antlr4ts/atn/ParserATNSimulator\";\nimport { ParseTreeListener } from \"antlr4ts/tree/ParseTreeListener\";\nimport { ParseTreeVisitor } from \"antlr4ts/tree/ParseTreeVisitor\";\nimport { RecognitionException } from \"antlr4ts/RecognitionException\";\nimport { RuleContext } from \"antlr4ts/RuleContext\";\n//import { RuleVersion } from \"antlr4ts/RuleVersion\";\nimport { TerminalNode } from \"antlr4ts/tree/TerminalNode\";\nimport { Token } from \"antlr4ts/Token\";\nimport { TokenStream } from \"antlr4ts/TokenStream\";\nimport { Vocabulary } from \"antlr4ts/Vocabulary\";\nimport { VocabularyImpl } from \"antlr4ts/VocabularyImpl\";\n\nimport * as Utils from \"antlr4ts/misc/Utils\";\n\nimport { MandalaParserListener } from \"./MandalaParserListener\";\nimport { MandalaParserVisitor } from \"./MandalaParserVisitor\";\n\nexport class MandalaParser extends Parser {\n  public static readonly ROTATE = 1;\n  public static readonly REPEAT = 2;\n  public static readonly OVERLAY = 3;\n  public static readonly DRAW = 4;\n  public static readonly CIRCLE = 5;\n  public static readonly LINE = 6;\n  public static readonly PETAL = 7;\n  public static readonly CARDIOID = 8;\n  public static readonly LIMACON = 9;\n  public static readonly SET = 10;\n  public static readonly COMMA = 11;\n  public static readonly END_FUNCTION = 12;\n  public static readonly SEMICOLON = 13;\n  public static readonly RED = 14;\n  public static readonly ORANGE = 15;\n  public static readonly YELLOW = 16;\n  public static readonly GREEN = 17;\n  public static readonly BLUE = 18;\n  public static readonly BLACK = 19;\n  public static readonly WHITE = 20;\n  public static readonly HEXCOLOR = 21;\n  public static readonly SOLID = 22;\n  public static readonly OUTLINE = 23;\n  public static readonly ZEROONE = 24;\n  public static readonly REPETITION_2 = 25;\n  public static readonly REPETITION_MORE = 26;\n  public static readonly VARIABLE = 27;\n  public static readonly SPACE = 28;\n  public static readonly NEWLINE = 29;\n  public static readonly RULE_program = 0;\n  public static readonly RULE_statement = 1;\n  public static readonly RULE_draw = 2;\n  public static readonly RULE_object = 3;\n  public static readonly RULE_shapeConstructor = 4;\n  public static readonly RULE_operation = 5;\n  public static readonly RULE_rotate = 6;\n  public static readonly RULE_repeat = 7;\n  public static readonly RULE_overlay = 8;\n  public static readonly RULE_circle = 9;\n  public static readonly RULE_line = 10;\n  public static readonly RULE_petal = 11;\n  public static readonly RULE_cardioid = 12;\n  public static readonly RULE_limacon = 13;\n  public static readonly RULE_num = 14;\n  public static readonly RULE_repeatnum = 15;\n  public static readonly RULE_color = 16;\n  public static readonly RULE_shapeMode = 17;\n  // tslint:disable:no-trailing-whitespace\n  public static readonly ruleNames: string[] = [\n    \"program\",\n    \"statement\",\n    \"draw\",\n    \"object\",\n    \"shapeConstructor\",\n    \"operation\",\n    \"rotate\",\n    \"repeat\",\n    \"overlay\",\n    \"circle\",\n    \"line\",\n    \"petal\",\n    \"cardioid\",\n    \"limacon\",\n    \"num\",\n    \"repeatnum\",\n    \"color\",\n    \"shapeMode\",\n  ];\n\n  private static readonly _LITERAL_NAMES: Array<string | undefined> = [\n    undefined,\n    \"'rotate('\",\n    \"'repeat('\",\n    \"'overlay('\",\n    \"'draw('\",\n    \"'createCircle('\",\n    \"'createLine('\",\n    \"'createPetal('\",\n    \"'createCardioid('\",\n    \"'createLimacon('\",\n    \"'='\",\n    \"','\",\n    \"')'\",\n    \"';'\",\n    \"'red'\",\n    \"'orange'\",\n    \"'yellow'\",\n    \"'green'\",\n    \"'blue'\",\n    \"'black'\",\n    \"'white'\",\n    undefined,\n    \"'solid'\",\n    \"'outline'\",\n  ];\n  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [\n    undefined,\n    \"ROTATE\",\n    \"REPEAT\",\n    \"OVERLAY\",\n    \"DRAW\",\n    \"CIRCLE\",\n    \"LINE\",\n    \"PETAL\",\n    \"CARDIOID\",\n    \"LIMACON\",\n    \"SET\",\n    \"COMMA\",\n    \"END_FUNCTION\",\n    \"SEMICOLON\",\n    \"RED\",\n    \"ORANGE\",\n    \"YELLOW\",\n    \"GREEN\",\n    \"BLUE\",\n    \"BLACK\",\n    \"WHITE\",\n    \"HEXCOLOR\",\n    \"SOLID\",\n    \"OUTLINE\",\n    \"ZEROONE\",\n    \"REPETITION_2\",\n    \"REPETITION_MORE\",\n    \"VARIABLE\",\n    \"SPACE\",\n    \"NEWLINE\",\n  ];\n  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(\n    MandalaParser._LITERAL_NAMES,\n    MandalaParser._SYMBOLIC_NAMES,\n    [],\n  );\n\n  // @Override\n  // @NotNull\n  public get vocabulary(): Vocabulary {\n    return MandalaParser.VOCABULARY;\n  }\n  // tslint:enable:no-trailing-whitespace\n\n  // @Override\n  public get grammarFileName(): string {\n    return \"MandalaParser.g4\";\n  }\n\n  // @Override\n  public get ruleNames(): string[] {\n    return MandalaParser.ruleNames;\n  }\n\n  // @Override\n  public get serializedATN(): string {\n    return MandalaParser._serializedATN;\n  }\n\n  protected createFailedPredicateException(\n    predicate?: string,\n    message?: string,\n  ): FailedPredicateException {\n    return new FailedPredicateException(this, predicate, message);\n  }\n\n  constructor(input: TokenStream) {\n    super(input);\n    this._interp = new ParserATNSimulator(MandalaParser._ATN, this);\n  }\n  // @RuleVersion(0)\n  public program(): ProgramContext {\n    const _localctx: ProgramContext = new ProgramContext(this._ctx, this.state);\n    this.enterRule(_localctx, 0, MandalaParser.RULE_program);\n    let _la: number;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 39;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while (_la === MandalaParser.VARIABLE) {\n          {\n            {\n              this.state = 36;\n              this.statement();\n            }\n          }\n          this.state = 41;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n        this.state = 42;\n        this.draw();\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public statement(): StatementContext {\n    const _localctx: StatementContext = new StatementContext(\n      this._ctx,\n      this.state,\n    );\n    this.enterRule(_localctx, 2, MandalaParser.RULE_statement);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 44;\n        this.match(MandalaParser.VARIABLE);\n        this.state = 45;\n        this.match(MandalaParser.SET);\n        this.state = 46;\n        this.object();\n        this.state = 47;\n        this.match(MandalaParser.SEMICOLON);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public draw(): DrawContext {\n    const _localctx: DrawContext = new DrawContext(this._ctx, this.state);\n    this.enterRule(_localctx, 4, MandalaParser.RULE_draw);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 49;\n        this.match(MandalaParser.DRAW);\n        this.state = 50;\n        this.object();\n        this.state = 51;\n        this.match(MandalaParser.END_FUNCTION);\n        this.state = 52;\n        this.match(MandalaParser.SEMICOLON);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public object(): ObjectContext {\n    const _localctx: ObjectContext = new ObjectContext(this._ctx, this.state);\n    this.enterRule(_localctx, 6, MandalaParser.RULE_object);\n    try {\n      this.state = 57;\n      this._errHandler.sync(this);\n      switch (this._input.LA(1)) {\n        case MandalaParser.VARIABLE:\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 54;\n            this.match(MandalaParser.VARIABLE);\n          }\n          break;\n        case MandalaParser.CIRCLE:\n        case MandalaParser.LINE:\n        case MandalaParser.PETAL:\n        case MandalaParser.CARDIOID:\n        case MandalaParser.LIMACON:\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 55;\n            this.shapeConstructor();\n          }\n          break;\n        case MandalaParser.ROTATE:\n        case MandalaParser.REPEAT:\n        case MandalaParser.OVERLAY:\n          this.enterOuterAlt(_localctx, 3);\n          {\n            this.state = 56;\n            this.operation();\n          }\n          break;\n        default:\n          throw new NoViableAltException(this);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public shapeConstructor(): ShapeConstructorContext {\n    const _localctx: ShapeConstructorContext = new ShapeConstructorContext(\n      this._ctx,\n      this.state,\n    );\n    this.enterRule(_localctx, 8, MandalaParser.RULE_shapeConstructor);\n    try {\n      this.state = 64;\n      this._errHandler.sync(this);\n      switch (this._input.LA(1)) {\n        case MandalaParser.CIRCLE:\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 59;\n            this.circle();\n          }\n          break;\n        case MandalaParser.LINE:\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 60;\n            this.line();\n          }\n          break;\n        case MandalaParser.PETAL:\n          this.enterOuterAlt(_localctx, 3);\n          {\n            this.state = 61;\n            this.petal();\n          }\n          break;\n        case MandalaParser.CARDIOID:\n          this.enterOuterAlt(_localctx, 4);\n          {\n            this.state = 62;\n            this.cardioid();\n          }\n          break;\n        case MandalaParser.LIMACON:\n          this.enterOuterAlt(_localctx, 5);\n          {\n            this.state = 63;\n            this.limacon();\n          }\n          break;\n        default:\n          throw new NoViableAltException(this);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public operation(): OperationContext {\n    const _localctx: OperationContext = new OperationContext(\n      this._ctx,\n      this.state,\n    );\n    this.enterRule(_localctx, 10, MandalaParser.RULE_operation);\n    try {\n      this.state = 69;\n      this._errHandler.sync(this);\n      switch (this._input.LA(1)) {\n        case MandalaParser.ROTATE:\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 66;\n            this.rotate();\n          }\n          break;\n        case MandalaParser.REPEAT:\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 67;\n            this.repeat();\n          }\n          break;\n        case MandalaParser.OVERLAY:\n          this.enterOuterAlt(_localctx, 3);\n          {\n            this.state = 68;\n            this.overlay();\n          }\n          break;\n        default:\n          throw new NoViableAltException(this);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public rotate(): RotateContext {\n    const _localctx: RotateContext = new RotateContext(this._ctx, this.state);\n    this.enterRule(_localctx, 12, MandalaParser.RULE_rotate);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 71;\n        this.match(MandalaParser.ROTATE);\n        this.state = 72;\n        this.object();\n        this.state = 73;\n        this.match(MandalaParser.COMMA);\n        this.state = 74;\n        this.num();\n        this.state = 75;\n        this.match(MandalaParser.END_FUNCTION);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public repeat(): RepeatContext {\n    const _localctx: RepeatContext = new RepeatContext(this._ctx, this.state);\n    this.enterRule(_localctx, 14, MandalaParser.RULE_repeat);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 77;\n        this.match(MandalaParser.REPEAT);\n        this.state = 78;\n        this.object();\n        this.state = 79;\n        this.match(MandalaParser.COMMA);\n        this.state = 80;\n        this.repeatnum();\n        this.state = 81;\n        this.match(MandalaParser.COMMA);\n        this.state = 82;\n        this.num();\n        this.state = 83;\n        this.match(MandalaParser.END_FUNCTION);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public overlay(): OverlayContext {\n    const _localctx: OverlayContext = new OverlayContext(this._ctx, this.state);\n    this.enterRule(_localctx, 16, MandalaParser.RULE_overlay);\n    let _la: number;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 85;\n        this.match(MandalaParser.OVERLAY);\n        this.state = 86;\n        this.object();\n        this.state = 89;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        do {\n          {\n            {\n              this.state = 87;\n              this.match(MandalaParser.COMMA);\n              this.state = 88;\n              this.object();\n            }\n          }\n          this.state = 91;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        } while (_la === MandalaParser.COMMA);\n        this.state = 93;\n        this.match(MandalaParser.END_FUNCTION);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public circle(): CircleContext {\n    const _localctx: CircleContext = new CircleContext(this._ctx, this.state);\n    this.enterRule(_localctx, 18, MandalaParser.RULE_circle);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 95;\n        this.match(MandalaParser.CIRCLE);\n        this.state = 96;\n        this.num();\n        this.state = 97;\n        this.match(MandalaParser.COMMA);\n        this.state = 98;\n        this.color();\n        this.state = 99;\n        this.match(MandalaParser.COMMA);\n        this.state = 100;\n        this.shapeMode();\n        this.state = 101;\n        this.match(MandalaParser.END_FUNCTION);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public line(): LineContext {\n    const _localctx: LineContext = new LineContext(this._ctx, this.state);\n    this.enterRule(_localctx, 20, MandalaParser.RULE_line);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 103;\n        this.match(MandalaParser.LINE);\n        this.state = 104;\n        this.num();\n        this.state = 105;\n        this.match(MandalaParser.COMMA);\n        this.state = 106;\n        this.color();\n        this.state = 107;\n        this.match(MandalaParser.END_FUNCTION);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public petal(): PetalContext {\n    const _localctx: PetalContext = new PetalContext(this._ctx, this.state);\n    this.enterRule(_localctx, 22, MandalaParser.RULE_petal);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 109;\n        this.match(MandalaParser.PETAL);\n        this.state = 110;\n        this.num();\n        this.state = 111;\n        this.match(MandalaParser.COMMA);\n        this.state = 112;\n        this.color();\n        this.state = 113;\n        this.match(MandalaParser.COMMA);\n        this.state = 114;\n        this.shapeMode();\n        this.state = 115;\n        this.match(MandalaParser.END_FUNCTION);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public cardioid(): CardioidContext {\n    const _localctx: CardioidContext = new CardioidContext(\n      this._ctx,\n      this.state,\n    );\n    this.enterRule(_localctx, 24, MandalaParser.RULE_cardioid);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 117;\n        this.match(MandalaParser.CARDIOID);\n        this.state = 118;\n        this.num();\n        this.state = 119;\n        this.match(MandalaParser.COMMA);\n        this.state = 120;\n        this.color();\n        this.state = 121;\n        this.match(MandalaParser.COMMA);\n        this.state = 122;\n        this.shapeMode();\n        this.state = 123;\n        this.match(MandalaParser.END_FUNCTION);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public limacon(): LimaconContext {\n    const _localctx: LimaconContext = new LimaconContext(this._ctx, this.state);\n    this.enterRule(_localctx, 26, MandalaParser.RULE_limacon);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 125;\n        this.match(MandalaParser.LIMACON);\n        this.state = 126;\n        this.num();\n        this.state = 127;\n        this.match(MandalaParser.COMMA);\n        this.state = 128;\n        this.color();\n        this.state = 129;\n        this.match(MandalaParser.COMMA);\n        this.state = 130;\n        this.shapeMode();\n        this.state = 131;\n        this.match(MandalaParser.END_FUNCTION);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public num(): NumContext {\n    const _localctx: NumContext = new NumContext(this._ctx, this.state);\n    this.enterRule(_localctx, 28, MandalaParser.RULE_num);\n    let _la: number;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 133;\n        _la = this._input.LA(1);\n        if (\n          !(\n            (_la & ~0x1f) === 0 &&\n            ((1 << _la) &\n              ((1 << MandalaParser.ZEROONE) |\n                (1 << MandalaParser.REPETITION_2) |\n                (1 << MandalaParser.REPETITION_MORE))) !==\n              0\n          )\n        ) {\n          this._errHandler.recoverInline(this);\n        } else {\n          if (this._input.LA(1) === Token.EOF) {\n            this.matchedEOF = true;\n          }\n\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public repeatnum(): RepeatnumContext {\n    const _localctx: RepeatnumContext = new RepeatnumContext(\n      this._ctx,\n      this.state,\n    );\n    this.enterRule(_localctx, 30, MandalaParser.RULE_repeatnum);\n    let _la: number;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 135;\n        _la = this._input.LA(1);\n        if (\n          !(\n            _la === MandalaParser.REPETITION_2 ||\n            _la === MandalaParser.REPETITION_MORE\n          )\n        ) {\n          this._errHandler.recoverInline(this);\n        } else {\n          if (this._input.LA(1) === Token.EOF) {\n            this.matchedEOF = true;\n          }\n\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public color(): ColorContext {\n    const _localctx: ColorContext = new ColorContext(this._ctx, this.state);\n    this.enterRule(_localctx, 32, MandalaParser.RULE_color);\n    let _la: number;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 137;\n        _la = this._input.LA(1);\n        if (\n          !(\n            (_la & ~0x1f) === 0 &&\n            ((1 << _la) &\n              ((1 << MandalaParser.RED) |\n                (1 << MandalaParser.ORANGE) |\n                (1 << MandalaParser.YELLOW) |\n                (1 << MandalaParser.GREEN) |\n                (1 << MandalaParser.BLUE) |\n                (1 << MandalaParser.BLACK) |\n                (1 << MandalaParser.WHITE) |\n                (1 << MandalaParser.HEXCOLOR))) !==\n              0\n          )\n        ) {\n          this._errHandler.recoverInline(this);\n        } else {\n          if (this._input.LA(1) === Token.EOF) {\n            this.matchedEOF = true;\n          }\n\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public shapeMode(): ShapeModeContext {\n    const _localctx: ShapeModeContext = new ShapeModeContext(\n      this._ctx,\n      this.state,\n    );\n    this.enterRule(_localctx, 34, MandalaParser.RULE_shapeMode);\n    let _la: number;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 139;\n        _la = this._input.LA(1);\n        if (!(_la === MandalaParser.SOLID || _la === MandalaParser.OUTLINE)) {\n          this._errHandler.recoverInline(this);\n        } else {\n          if (this._input.LA(1) === Token.EOF) {\n            this.matchedEOF = true;\n          }\n\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n\n  public static readonly _serializedATN: string =\n    \"\\x03\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\\x03\\x1F\\x90\\x04\\x02\" +\n    \"\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\\x07\" +\n    \"\\t\\x07\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\v\\t\\v\\x04\\f\\t\\f\\x04\\r\\t\\r\\x04\" +\n    \"\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x04\\x10\\t\\x10\\x04\\x11\\t\\x11\\x04\\x12\\t\\x12\\x04\" +\n    \"\\x13\\t\\x13\\x03\\x02\\x07\\x02(\\n\\x02\\f\\x02\\x0E\\x02+\\v\\x02\\x03\\x02\\x03\\x02\" +\n    \"\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\" +\n    \"\\x03\\x04\\x03\\x05\\x03\\x05\\x03\\x05\\x05\\x05<\\n\\x05\\x03\\x06\\x03\\x06\\x03\\x06\" +\n    \"\\x03\\x06\\x03\\x06\\x05\\x06C\\n\\x06\\x03\\x07\\x03\\x07\\x03\\x07\\x05\\x07H\\n\\x07\" +\n    \"\\x03\\b\\x03\\b\\x03\\b\\x03\\b\\x03\\b\\x03\\b\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x03\" +\n    \"\\t\\x03\\t\\x03\\t\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x06\\n\\\\\\n\\n\\r\\n\\x0E\\n]\\x03\\n\\x03\" +\n    \"\\n\\x03\\v\\x03\\v\\x03\\v\\x03\\v\\x03\\v\\x03\\v\\x03\\v\\x03\\v\\x03\\f\\x03\\f\\x03\\f\\x03\" +\n    \"\\f\\x03\\f\\x03\\f\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\x0E\" +\n    \"\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0F\\x03\\x0F\" +\n    \"\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x10\\x03\\x10\\x03\\x11\" +\n    \"\\x03\\x11\\x03\\x12\\x03\\x12\\x03\\x13\\x03\\x13\\x03\\x13\\x02\\x02\\x02\\x14\\x02\\x02\" +\n    \"\\x04\\x02\\x06\\x02\\b\\x02\\n\\x02\\f\\x02\\x0E\\x02\\x10\\x02\\x12\\x02\\x14\\x02\\x16\" +\n    '\\x02\\x18\\x02\\x1A\\x02\\x1C\\x02\\x1E\\x02 \\x02\"\\x02$\\x02\\x02\\x06\\x03\\x02\\x1A' +\n    \"\\x1C\\x03\\x02\\x1B\\x1C\\x03\\x02\\x10\\x17\\x03\\x02\\x18\\x19\\x02\\x87\\x02)\\x03\" +\n    \"\\x02\\x02\\x02\\x04.\\x03\\x02\\x02\\x02\\x063\\x03\\x02\\x02\\x02\\b;\\x03\\x02\\x02\" +\n    \"\\x02\\nB\\x03\\x02\\x02\\x02\\fG\\x03\\x02\\x02\\x02\\x0EI\\x03\\x02\\x02\\x02\\x10O\\x03\" +\n    \"\\x02\\x02\\x02\\x12W\\x03\\x02\\x02\\x02\\x14a\\x03\\x02\\x02\\x02\\x16i\\x03\\x02\\x02\" +\n    \"\\x02\\x18o\\x03\\x02\\x02\\x02\\x1Aw\\x03\\x02\\x02\\x02\\x1C\\x7F\\x03\\x02\\x02\\x02\" +\n    '\\x1E\\x87\\x03\\x02\\x02\\x02 \\x89\\x03\\x02\\x02\\x02\"\\x8B\\x03\\x02\\x02\\x02$\\x8D' +\n    \"\\x03\\x02\\x02\\x02&(\\x05\\x04\\x03\\x02'&\\x03\\x02\\x02\\x02(+\\x03\\x02\\x02\\x02\" +\n    \")'\\x03\\x02\\x02\\x02)*\\x03\\x02\\x02\\x02*,\\x03\\x02\\x02\\x02+)\\x03\\x02\\x02\" +\n    \"\\x02,-\\x05\\x06\\x04\\x02-\\x03\\x03\\x02\\x02\\x02./\\x07\\x1D\\x02\\x02/0\\x07\\f\" +\n    \"\\x02\\x0201\\x05\\b\\x05\\x0212\\x07\\x0F\\x02\\x022\\x05\\x03\\x02\\x02\\x0234\\x07\" +\n    \"\\x06\\x02\\x0245\\x05\\b\\x05\\x0256\\x07\\x0E\\x02\\x0267\\x07\\x0F\\x02\\x027\\x07\" +\n    \"\\x03\\x02\\x02\\x028<\\x07\\x1D\\x02\\x029<\\x05\\n\\x06\\x02:<\\x05\\f\\x07\\x02;8\\x03\" +\n    \"\\x02\\x02\\x02;9\\x03\\x02\\x02\\x02;:\\x03\\x02\\x02\\x02<\\t\\x03\\x02\\x02\\x02=C\" +\n    \"\\x05\\x14\\v\\x02>C\\x05\\x16\\f\\x02?C\\x05\\x18\\r\\x02@C\\x05\\x1A\\x0E\\x02AC\\x05\" +\n    \"\\x1C\\x0F\\x02B=\\x03\\x02\\x02\\x02B>\\x03\\x02\\x02\\x02B?\\x03\\x02\\x02\\x02B@\\x03\" +\n    \"\\x02\\x02\\x02BA\\x03\\x02\\x02\\x02C\\v\\x03\\x02\\x02\\x02DH\\x05\\x0E\\b\\x02EH\\x05\" +\n    \"\\x10\\t\\x02FH\\x05\\x12\\n\\x02GD\\x03\\x02\\x02\\x02GE\\x03\\x02\\x02\\x02GF\\x03\\x02\" +\n    \"\\x02\\x02H\\r\\x03\\x02\\x02\\x02IJ\\x07\\x03\\x02\\x02JK\\x05\\b\\x05\\x02KL\\x07\\r\" +\n    \"\\x02\\x02LM\\x05\\x1E\\x10\\x02MN\\x07\\x0E\\x02\\x02N\\x0F\\x03\\x02\\x02\\x02OP\\x07\" +\n    \"\\x04\\x02\\x02PQ\\x05\\b\\x05\\x02QR\\x07\\r\\x02\\x02RS\\x05 \\x11\\x02ST\\x07\\r\\x02\" +\n    \"\\x02TU\\x05\\x1E\\x10\\x02UV\\x07\\x0E\\x02\\x02V\\x11\\x03\\x02\\x02\\x02WX\\x07\\x05\" +\n    \"\\x02\\x02X[\\x05\\b\\x05\\x02YZ\\x07\\r\\x02\\x02Z\\\\\\x05\\b\\x05\\x02[Y\\x03\\x02\\x02\" +\n    \"\\x02\\\\]\\x03\\x02\\x02\\x02][\\x03\\x02\\x02\\x02]^\\x03\\x02\\x02\\x02^_\\x03\\x02\" +\n    \"\\x02\\x02_`\\x07\\x0E\\x02\\x02`\\x13\\x03\\x02\\x02\\x02ab\\x07\\x07\\x02\\x02bc\\x05\" +\n    '\\x1E\\x10\\x02cd\\x07\\r\\x02\\x02de\\x05\"\\x12\\x02ef\\x07\\r\\x02\\x02fg\\x05$\\x13' +\n    \"\\x02gh\\x07\\x0E\\x02\\x02h\\x15\\x03\\x02\\x02\\x02ij\\x07\\b\\x02\\x02jk\\x05\\x1E\" +\n    '\\x10\\x02kl\\x07\\r\\x02\\x02lm\\x05\"\\x12\\x02mn\\x07\\x0E\\x02\\x02n\\x17\\x03\\x02' +\n    '\\x02\\x02op\\x07\\t\\x02\\x02pq\\x05\\x1E\\x10\\x02qr\\x07\\r\\x02\\x02rs\\x05\"\\x12' +\n    \"\\x02st\\x07\\r\\x02\\x02tu\\x05$\\x13\\x02uv\\x07\\x0E\\x02\\x02v\\x19\\x03\\x02\\x02\" +\n    '\\x02wx\\x07\\n\\x02\\x02xy\\x05\\x1E\\x10\\x02yz\\x07\\r\\x02\\x02z{\\x05\"\\x12\\x02' +\n    \"{|\\x07\\r\\x02\\x02|}\\x05$\\x13\\x02}~\\x07\\x0E\\x02\\x02~\\x1B\\x03\\x02\\x02\\x02\" +\n    \"\\x7F\\x80\\x07\\v\\x02\\x02\\x80\\x81\\x05\\x1E\\x10\\x02\\x81\\x82\\x07\\r\\x02\\x02\\x82\" +\n    '\\x83\\x05\"\\x12\\x02\\x83\\x84\\x07\\r\\x02\\x02\\x84\\x85\\x05$\\x13\\x02\\x85\\x86' +\n    \"\\x07\\x0E\\x02\\x02\\x86\\x1D\\x03\\x02\\x02\\x02\\x87\\x88\\t\\x02\\x02\\x02\\x88\\x1F\" +\n    \"\\x03\\x02\\x02\\x02\\x89\\x8A\\t\\x03\\x02\\x02\\x8A!\\x03\\x02\\x02\\x02\\x8B\\x8C\\t\" +\n    \"\\x04\\x02\\x02\\x8C#\\x03\\x02\\x02\\x02\\x8D\\x8E\\t\\x05\\x02\\x02\\x8E%\\x03\\x02\\x02\" +\n    \"\\x02\\x07);BG]\";\n  public static __ATN: ATN;\n  public static get _ATN(): ATN {\n    if (!MandalaParser.__ATN) {\n      MandalaParser.__ATN = new ATNDeserializer().deserialize(\n        Utils.toCharArray(MandalaParser._serializedATN),\n      );\n    }\n\n    return MandalaParser.__ATN;\n  }\n}\n\nexport class ProgramContext extends ParserRuleContext {\n  public draw(): DrawContext {\n    return this.getRuleContext(0, DrawContext);\n  }\n  public statement(): StatementContext[];\n  public statement(i: number): StatementContext;\n  public statement(i?: number): StatementContext | StatementContext[] {\n    if (i === undefined) {\n      return this.getRuleContexts(StatementContext);\n    } else {\n      return this.getRuleContext(i, StatementContext);\n    }\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_program;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterProgram) {\n      listener.enterProgram(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitProgram) {\n      listener.exitProgram(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitProgram) {\n      return visitor.visitProgram(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class StatementContext extends ParserRuleContext {\n  public VARIABLE(): TerminalNode {\n    return this.getToken(MandalaParser.VARIABLE, 0);\n  }\n  public SET(): TerminalNode {\n    return this.getToken(MandalaParser.SET, 0);\n  }\n  public object(): ObjectContext {\n    return this.getRuleContext(0, ObjectContext);\n  }\n  public SEMICOLON(): TerminalNode {\n    return this.getToken(MandalaParser.SEMICOLON, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_statement;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterStatement) {\n      listener.enterStatement(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitStatement) {\n      listener.exitStatement(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitStatement) {\n      return visitor.visitStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class DrawContext extends ParserRuleContext {\n  public DRAW(): TerminalNode {\n    return this.getToken(MandalaParser.DRAW, 0);\n  }\n  public object(): ObjectContext {\n    return this.getRuleContext(0, ObjectContext);\n  }\n  public END_FUNCTION(): TerminalNode {\n    return this.getToken(MandalaParser.END_FUNCTION, 0);\n  }\n  public SEMICOLON(): TerminalNode {\n    return this.getToken(MandalaParser.SEMICOLON, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_draw;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterDraw) {\n      listener.enterDraw(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitDraw) {\n      listener.exitDraw(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitDraw) {\n      return visitor.visitDraw(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class ObjectContext extends ParserRuleContext {\n  public VARIABLE(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.VARIABLE, 0);\n  }\n  public shapeConstructor(): ShapeConstructorContext | undefined {\n    return this.tryGetRuleContext(0, ShapeConstructorContext);\n  }\n  public operation(): OperationContext | undefined {\n    return this.tryGetRuleContext(0, OperationContext);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_object;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterObject) {\n      listener.enterObject(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitObject) {\n      listener.exitObject(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitObject) {\n      return visitor.visitObject(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class ShapeConstructorContext extends ParserRuleContext {\n  public circle(): CircleContext | undefined {\n    return this.tryGetRuleContext(0, CircleContext);\n  }\n  public line(): LineContext | undefined {\n    return this.tryGetRuleContext(0, LineContext);\n  }\n  public petal(): PetalContext | undefined {\n    return this.tryGetRuleContext(0, PetalContext);\n  }\n  public cardioid(): CardioidContext | undefined {\n    return this.tryGetRuleContext(0, CardioidContext);\n  }\n  public limacon(): LimaconContext | undefined {\n    return this.tryGetRuleContext(0, LimaconContext);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_shapeConstructor;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterShapeConstructor) {\n      listener.enterShapeConstructor(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitShapeConstructor) {\n      listener.exitShapeConstructor(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitShapeConstructor) {\n      return visitor.visitShapeConstructor(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class OperationContext extends ParserRuleContext {\n  public rotate(): RotateContext | undefined {\n    return this.tryGetRuleContext(0, RotateContext);\n  }\n  public repeat(): RepeatContext | undefined {\n    return this.tryGetRuleContext(0, RepeatContext);\n  }\n  public overlay(): OverlayContext | undefined {\n    return this.tryGetRuleContext(0, OverlayContext);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_operation;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterOperation) {\n      listener.enterOperation(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitOperation) {\n      listener.exitOperation(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitOperation) {\n      return visitor.visitOperation(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class RotateContext extends ParserRuleContext {\n  public ROTATE(): TerminalNode {\n    return this.getToken(MandalaParser.ROTATE, 0);\n  }\n  public object(): ObjectContext {\n    return this.getRuleContext(0, ObjectContext);\n  }\n  public COMMA(): TerminalNode {\n    return this.getToken(MandalaParser.COMMA, 0);\n  }\n  public num(): NumContext {\n    return this.getRuleContext(0, NumContext);\n  }\n  public END_FUNCTION(): TerminalNode {\n    return this.getToken(MandalaParser.END_FUNCTION, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_rotate;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterRotate) {\n      listener.enterRotate(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitRotate) {\n      listener.exitRotate(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitRotate) {\n      return visitor.visitRotate(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class RepeatContext extends ParserRuleContext {\n  public REPEAT(): TerminalNode {\n    return this.getToken(MandalaParser.REPEAT, 0);\n  }\n  public object(): ObjectContext {\n    return this.getRuleContext(0, ObjectContext);\n  }\n  public COMMA(): TerminalNode[];\n  public COMMA(i: number): TerminalNode;\n  public COMMA(i?: number): TerminalNode | TerminalNode[] {\n    if (i === undefined) {\n      return this.getTokens(MandalaParser.COMMA);\n    } else {\n      return this.getToken(MandalaParser.COMMA, i);\n    }\n  }\n  public repeatnum(): RepeatnumContext {\n    return this.getRuleContext(0, RepeatnumContext);\n  }\n  public num(): NumContext {\n    return this.getRuleContext(0, NumContext);\n  }\n  public END_FUNCTION(): TerminalNode {\n    return this.getToken(MandalaParser.END_FUNCTION, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_repeat;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterRepeat) {\n      listener.enterRepeat(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitRepeat) {\n      listener.exitRepeat(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitRepeat) {\n      return visitor.visitRepeat(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class OverlayContext extends ParserRuleContext {\n  public OVERLAY(): TerminalNode {\n    return this.getToken(MandalaParser.OVERLAY, 0);\n  }\n  public object(): ObjectContext[];\n  public object(i: number): ObjectContext;\n  public object(i?: number): ObjectContext | ObjectContext[] {\n    if (i === undefined) {\n      return this.getRuleContexts(ObjectContext);\n    } else {\n      return this.getRuleContext(i, ObjectContext);\n    }\n  }\n  public END_FUNCTION(): TerminalNode {\n    return this.getToken(MandalaParser.END_FUNCTION, 0);\n  }\n  public COMMA(): TerminalNode[];\n  public COMMA(i: number): TerminalNode;\n  public COMMA(i?: number): TerminalNode | TerminalNode[] {\n    if (i === undefined) {\n      return this.getTokens(MandalaParser.COMMA);\n    } else {\n      return this.getToken(MandalaParser.COMMA, i);\n    }\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_overlay;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterOverlay) {\n      listener.enterOverlay(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitOverlay) {\n      listener.exitOverlay(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitOverlay) {\n      return visitor.visitOverlay(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class CircleContext extends ParserRuleContext {\n  public CIRCLE(): TerminalNode {\n    return this.getToken(MandalaParser.CIRCLE, 0);\n  }\n  public num(): NumContext {\n    return this.getRuleContext(0, NumContext);\n  }\n  public COMMA(): TerminalNode[];\n  public COMMA(i: number): TerminalNode;\n  public COMMA(i?: number): TerminalNode | TerminalNode[] {\n    if (i === undefined) {\n      return this.getTokens(MandalaParser.COMMA);\n    } else {\n      return this.getToken(MandalaParser.COMMA, i);\n    }\n  }\n  public color(): ColorContext {\n    return this.getRuleContext(0, ColorContext);\n  }\n  public shapeMode(): ShapeModeContext {\n    return this.getRuleContext(0, ShapeModeContext);\n  }\n  public END_FUNCTION(): TerminalNode {\n    return this.getToken(MandalaParser.END_FUNCTION, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_circle;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterCircle) {\n      listener.enterCircle(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitCircle) {\n      listener.exitCircle(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitCircle) {\n      return visitor.visitCircle(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class LineContext extends ParserRuleContext {\n  public LINE(): TerminalNode {\n    return this.getToken(MandalaParser.LINE, 0);\n  }\n  public num(): NumContext {\n    return this.getRuleContext(0, NumContext);\n  }\n  public COMMA(): TerminalNode {\n    return this.getToken(MandalaParser.COMMA, 0);\n  }\n  public color(): ColorContext {\n    return this.getRuleContext(0, ColorContext);\n  }\n  public END_FUNCTION(): TerminalNode {\n    return this.getToken(MandalaParser.END_FUNCTION, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_line;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterLine) {\n      listener.enterLine(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitLine) {\n      listener.exitLine(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitLine) {\n      return visitor.visitLine(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class PetalContext extends ParserRuleContext {\n  public PETAL(): TerminalNode {\n    return this.getToken(MandalaParser.PETAL, 0);\n  }\n  public num(): NumContext {\n    return this.getRuleContext(0, NumContext);\n  }\n  public COMMA(): TerminalNode[];\n  public COMMA(i: number): TerminalNode;\n  public COMMA(i?: number): TerminalNode | TerminalNode[] {\n    if (i === undefined) {\n      return this.getTokens(MandalaParser.COMMA);\n    } else {\n      return this.getToken(MandalaParser.COMMA, i);\n    }\n  }\n  public color(): ColorContext {\n    return this.getRuleContext(0, ColorContext);\n  }\n  public shapeMode(): ShapeModeContext {\n    return this.getRuleContext(0, ShapeModeContext);\n  }\n  public END_FUNCTION(): TerminalNode {\n    return this.getToken(MandalaParser.END_FUNCTION, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_petal;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterPetal) {\n      listener.enterPetal(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitPetal) {\n      listener.exitPetal(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitPetal) {\n      return visitor.visitPetal(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class CardioidContext extends ParserRuleContext {\n  public CARDIOID(): TerminalNode {\n    return this.getToken(MandalaParser.CARDIOID, 0);\n  }\n  public num(): NumContext {\n    return this.getRuleContext(0, NumContext);\n  }\n  public COMMA(): TerminalNode[];\n  public COMMA(i: number): TerminalNode;\n  public COMMA(i?: number): TerminalNode | TerminalNode[] {\n    if (i === undefined) {\n      return this.getTokens(MandalaParser.COMMA);\n    } else {\n      return this.getToken(MandalaParser.COMMA, i);\n    }\n  }\n  public color(): ColorContext {\n    return this.getRuleContext(0, ColorContext);\n  }\n  public shapeMode(): ShapeModeContext {\n    return this.getRuleContext(0, ShapeModeContext);\n  }\n  public END_FUNCTION(): TerminalNode {\n    return this.getToken(MandalaParser.END_FUNCTION, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_cardioid;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterCardioid) {\n      listener.enterCardioid(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitCardioid) {\n      listener.exitCardioid(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitCardioid) {\n      return visitor.visitCardioid(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class LimaconContext extends ParserRuleContext {\n  public LIMACON(): TerminalNode {\n    return this.getToken(MandalaParser.LIMACON, 0);\n  }\n  public num(): NumContext {\n    return this.getRuleContext(0, NumContext);\n  }\n  public COMMA(): TerminalNode[];\n  public COMMA(i: number): TerminalNode;\n  public COMMA(i?: number): TerminalNode | TerminalNode[] {\n    if (i === undefined) {\n      return this.getTokens(MandalaParser.COMMA);\n    } else {\n      return this.getToken(MandalaParser.COMMA, i);\n    }\n  }\n  public color(): ColorContext {\n    return this.getRuleContext(0, ColorContext);\n  }\n  public shapeMode(): ShapeModeContext {\n    return this.getRuleContext(0, ShapeModeContext);\n  }\n  public END_FUNCTION(): TerminalNode {\n    return this.getToken(MandalaParser.END_FUNCTION, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_limacon;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterLimacon) {\n      listener.enterLimacon(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitLimacon) {\n      listener.exitLimacon(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitLimacon) {\n      return visitor.visitLimacon(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class NumContext extends ParserRuleContext {\n  public ZEROONE(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.ZEROONE, 0);\n  }\n  public REPETITION_2(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.REPETITION_2, 0);\n  }\n  public REPETITION_MORE(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.REPETITION_MORE, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_num;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterNum) {\n      listener.enterNum(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitNum) {\n      listener.exitNum(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitNum) {\n      return visitor.visitNum(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class RepeatnumContext extends ParserRuleContext {\n  public REPETITION_2(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.REPETITION_2, 0);\n  }\n  public REPETITION_MORE(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.REPETITION_MORE, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_repeatnum;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterRepeatnum) {\n      listener.enterRepeatnum(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitRepeatnum) {\n      listener.exitRepeatnum(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitRepeatnum) {\n      return visitor.visitRepeatnum(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class ColorContext extends ParserRuleContext {\n  public RED(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.RED, 0);\n  }\n  public ORANGE(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.ORANGE, 0);\n  }\n  public YELLOW(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.YELLOW, 0);\n  }\n  public GREEN(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.GREEN, 0);\n  }\n  public BLUE(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.BLUE, 0);\n  }\n  public BLACK(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.BLACK, 0);\n  }\n  public WHITE(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.WHITE, 0);\n  }\n  public HEXCOLOR(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.HEXCOLOR, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_color;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterColor) {\n      listener.enterColor(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitColor) {\n      listener.exitColor(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitColor) {\n      return visitor.visitColor(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class ShapeModeContext extends ParserRuleContext {\n  public SOLID(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.SOLID, 0);\n  }\n  public OUTLINE(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.OUTLINE, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_shapeMode;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterShapeMode) {\n      listener.enterShapeMode(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitShapeMode) {\n      listener.exitShapeMode(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitShapeMode) {\n      return visitor.visitShapeMode(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n","import { Element } from \"./element\";\nimport { Visitor } from \"./visitor\";\n\nexport type Mode = \"solid\" | \"outline\";\n\nexport type Shape = Circle | Line | Petal | Cardioid | Limacon;\n\nexport class Circle implements Element {\n  radius: number;\n  color: string;\n  mode: Mode;\n\n  constructor(radius: number, color: string, mode: Mode) {\n    this.radius = radius;\n    this.color = color;\n    this.mode = mode;\n  }\n\n  accept<Type>(visitor: Visitor<Type>): Type {\n    return visitor.visitCircle(this);\n  }\n}\n\nexport class Line implements Element {\n  size: number;\n  color: string;\n\n  constructor(size: number, color: string) {\n    this.size = size;\n    this.color = color;\n  }\n\n  accept<Type>(visitor: Visitor<Type>): Type {\n    return visitor.visitLine(this);\n  }\n}\n\nexport class Petal implements Element {\n  size: number;\n  color: string;\n  mode: Mode;\n\n  constructor(size: number, color: string, mode: Mode) {\n    this.size = size;\n    this.color = color;\n    this.mode = mode;\n  }\n\n  accept<Type>(visitor: Visitor<Type>): Type {\n    return visitor.visitPetal(this);\n  }\n}\n\nexport class Cardioid implements Element {\n  size: number;\n  color: string;\n  mode: Mode;\n\n  constructor(size: number, color: string, mode: Mode) {\n    this.size = size;\n    this.color = color;\n    this.mode = mode;\n  }\n\n  accept<Type>(visitor: Visitor<Type>): Type {\n    return visitor.visitCardioid(this);\n  }\n}\n\nexport class Limacon implements Element {\n  size: number;\n  color: string;\n  mode: Mode;\n\n  constructor(size: number, color: string, mode: Mode) {\n    this.size = size;\n    this.color = color;\n    this.mode = mode;\n  }\n\n  accept<Type>(visitor: Visitor<Type>): Type {\n    return visitor.visitLimacon(this);\n  }\n}\n","import { Element } from \"./element\";\nimport { Rotation, Repetition, Overlay } from \"./operations\";\nimport { Shape } from \"./shapes\";\nimport { Variable } from \"./variable\";\nimport { Visitor } from \"./visitor\";\n\nexport type Article = Rotation | Repetition | Overlay | Shape | Variable;\n\nexport class Program implements Element {\n  statements: Statement[];\n  draw: Draw;\n\n  constructor(statements: Statement[], draw: Draw) {\n    this.statements = statements;\n    this.draw = draw;\n  }\n\n  accept<Type>(visitor: Visitor<Type>): Type {\n    return visitor.visitProgram(this);\n  }\n}\n\nexport class Statement implements Element {\n  // should the below thing be string not Variable, since we know it will always just be a string variable in this context?\n  variable: string;\n  shape: Article;\n\n  constructor(variable: string, shape: Article) {\n    this.variable = variable;\n    this.shape = shape;\n  }\n\n  accept<Type>(visitor: Visitor<Type>): Type {\n    return visitor.visitStatement(this);\n  }\n}\n\nexport class Draw implements Element {\n  draw: Article;\n\n  constructor(draw: Article) {\n    this.draw = draw;\n  }\n\n  accept<Type>(visitor: Visitor<Type>): Type {\n    return visitor.visitDraw(this);\n  }\n}\n","import { Element } from \"./element\";\nimport { Article } from \"./program\";\nimport { Visitor } from \"./visitor\";\n\nexport class Rotation implements Element {\n  shape: Article;\n  angle: number;\n\n  constructor(shape: Article, angle: number) {\n    this.shape = shape;\n    this.angle = angle;\n  }\n\n  accept<Type>(visitor: Visitor<Type>): Type {\n    return visitor.visitRotation(this);\n  }\n}\n\nexport class Repetition implements Element {\n  shape: Article;\n  repetitions: number;\n  offset: number;\n\n  constructor(shape: Article, rep: number, offset: number) {\n    this.shape = shape;\n    this.repetitions = rep;\n    this.offset = offset;\n  }\n\n  accept<Type>(visitor: Visitor<Type>): Type {\n    return visitor.visitRepetition(this);\n  }\n}\n\nexport class Overlay implements Element {\n  shapes: Article[];\n\n  constructor(shapes: Article[]) {\n    this.shapes = shapes;\n  }\n\n  accept<Type>(visitor: Visitor<Type>): Type {\n    return visitor.visitOverlay(this);\n  }\n}\n","import { Element } from \"./element\";\nimport { Visitor } from \"./visitor\";\n\nexport class Variable implements Element {\n  name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  accept<Type>(visitor: Visitor<Type>): Type {\n    return visitor.visitVariable(this);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport {\n  Cardioid,\n  Circle,\n  Limacon,\n  Line,\n  Mode,\n  Petal,\n  Shape,\n} from \"../ast/shapes\";\nimport { Article, Draw, Program, Statement } from \"../ast/program\";\nimport { Overlay, Repetition, Rotation } from \"../ast/operations\";\nimport { Variable } from \"../ast/variable\";\nimport {\n  CardioidContext,\n  CircleContext,\n  ColorContext,\n  DrawContext,\n  LimaconContext,\n  LineContext,\n  NumContext,\n  ObjectContext,\n  OperationContext,\n  OverlayContext,\n  PetalContext,\n  ProgramContext,\n  RepeatContext,\n  RepeatnumContext,\n  RotateContext,\n  ShapeConstructorContext,\n  ShapeModeContext,\n  StatementContext,\n} from \"./MandalaParser\";\nimport { MandalaParserVisitor } from \"./MandalaParserVisitor\";\nimport { Element } from \"../ast/element\";\nimport { TerminalNode } from \"antlr4ts/tree/TerminalNode\";\nimport { ErrorNode, ParseTree, RuleNode } from \"antlr4ts/tree\";\n\nexport class ParseTreeToAST implements MandalaParserVisitor<Element> {\n  visitProgram(ctx: ProgramContext): Program {\n    const statements: Statement[] = [];\n    ctx.statement().forEach((statement: StatementContext) => {\n      statements.push(this.visitStatement(statement));\n    });\n    return new Program(statements, this.visitDraw(ctx.draw()));\n  }\n\n  visitStatement(ctx: StatementContext): Statement {\n    const varName: string = ctx.VARIABLE().toString();\n    const object: Article = this.visitObject(ctx.object());\n    return new Statement(varName, object);\n  }\n\n  visitDraw(ctx: DrawContext): Draw {\n    const art: Article = this.visitObject(ctx.object());\n    return new Draw(art);\n  }\n\n  visitObject(ctx: ObjectContext): Article {\n    if (ctx.VARIABLE() != undefined) {\n      return new Variable(ctx.VARIABLE()!.toString());\n    } else if (ctx.shapeConstructor() != undefined) {\n      return this.visitShapeConstructor(ctx.shapeConstructor()!);\n    } else if (ctx.operation() != undefined) {\n      return this.visitOperation(ctx.operation()!);\n    } else {\n      throw new Error(\"Incorrect object: \" + ctx.text);\n    }\n  }\n\n  // Operations\n\n  visitOperation(ctx: OperationContext): Article {\n    if (ctx.rotate() != undefined) {\n      return this.visitRotate(ctx.rotate()!);\n    } else if (ctx.repeat() != undefined) {\n      return this.visitRepeat(ctx.repeat()!);\n    } else if (ctx.overlay() != undefined) {\n      return this.visitOverlay(ctx.overlay()!);\n    } else {\n      throw new Error(\"Incorrect operation: \" + ctx.text);\n    }\n  }\n\n  visitRotate(ctx: RotateContext): Rotation {\n    const obj: Article = this.visitObject(ctx.object());\n    const num: number = this.getNUM(ctx.num());\n    return new Rotation(obj, num);\n  }\n\n  visitOverlay(ctx: OverlayContext): Overlay {\n    const objects: Article[] = [];\n    ctx.object().forEach((obj: ObjectContext) => {\n      objects.push(this.visitObject(obj));\n    });\n    return new Overlay(objects);\n  }\n\n  visitRepeat(ctx: RepeatContext): Repetition {\n    const obj: Article = this.visitObject(ctx.object());\n    const repnum: number = this.getREPNUM(ctx.repeatnum());\n    const num: number = this.getNUM(ctx.num());\n    return new Repetition(obj, repnum, num);\n  }\n\n  // Shapes\n\n  visitShapeConstructor(ctx: ShapeConstructorContext): Shape {\n    if (ctx.circle() != undefined) {\n      return this.visitCircle(ctx.circle()!);\n    } else if (ctx.line() != undefined) {\n      return this.visitLine(ctx.line()!);\n    } else if (ctx.petal() != undefined) {\n      return this.visitPetal(ctx.petal()!);\n    } else if (ctx.cardioid() != undefined) {\n      return this.visitCardioid(ctx.cardioid()!);\n    } else if (ctx.limacon() != undefined) {\n      return this.visitLimacon(ctx.limacon()!);\n    } else {\n      throw new Error(\"Incorrect shape constructor: \" + ctx.text);\n    }\n  }\n\n  visitCircle(ctx: CircleContext): Circle {\n    const num: number = this.getNUM(ctx.num());\n    const color: string = this.getColor(ctx.color());\n    const mode: Mode = this.getShapeMode(ctx.shapeMode());\n    return new Circle(num, color, mode);\n  }\n\n  visitLine(ctx: LineContext): Line {\n    const num: number = this.getNUM(ctx.num());\n    const color: string = this.getColor(ctx.color());\n    return new Line(num, color);\n  }\n\n  visitPetal(ctx: PetalContext): Petal {\n    const num: number = this.getNUM(ctx.num());\n    const color: string = this.getColor(ctx.color());\n    const mode: Mode = this.getShapeMode(ctx.shapeMode());\n    return new Petal(num, color, mode);\n  }\n\n  visitCardioid(ctx: CardioidContext): Cardioid {\n    const num: number = this.getNUM(ctx.num());\n    const color: string = this.getColor(ctx.color());\n    const mode: Mode = this.getShapeMode(ctx.shapeMode());\n    return new Cardioid(num, color, mode);\n  }\n\n  visitLimacon(ctx: LimaconContext): Limacon {\n    const num: number = this.getNUM(ctx.num());\n    const color: string = this.getColor(ctx.color());\n    const mode: Mode = this.getShapeMode(ctx.shapeMode());\n    return new Limacon(num, color, mode);\n  }\n\n  // Constant values: Helper Functions\n\n  getShapeMode(ctx: ShapeModeContext): Mode {\n    if (ctx.SOLID() != undefined) {\n      return \"solid\";\n    } else if (ctx.OUTLINE() != undefined) {\n      return \"outline\";\n    } else {\n      throw new Error(\"Incorrect mode: \" + ctx.text);\n    }\n  }\n\n  getColor(ctx: ColorContext): string {\n    if (ctx.RED() != undefined) {\n      return ctx.RED()!.toString();\n    } else if (ctx.ORANGE() != undefined) {\n      return ctx.ORANGE()!.toString();\n    } else if (ctx.YELLOW() != undefined) {\n      return ctx.YELLOW()!.toString();\n    } else if (ctx.GREEN() != undefined) {\n      return ctx.GREEN()!.toString();\n    } else if (ctx.BLUE() != undefined) {\n      return ctx.BLUE()!.toString();\n    } else if (ctx.BLACK() != undefined) {\n      return ctx.BLACK()!.toString();\n    } else if (ctx.WHITE() != undefined) {\n      return ctx.WHITE()!.toString();\n    } else if (ctx.HEXCOLOR() != undefined) {\n      return ctx.HEXCOLOR()!.toString();\n    } else {\n      throw new Error(\"Incorrect color: \" + ctx.text);\n    }\n  }\n\n  getNUM(ctx: NumContext): number {\n    if (ctx.ZEROONE() != undefined) {\n      return parseInt(ctx.ZEROONE()!.toString());\n    } else if (ctx.REPETITION_2() != undefined) {\n      return parseInt(ctx.REPETITION_2()!.toString());\n    } else if (ctx.REPETITION_MORE() != undefined) {\n      return parseInt(ctx.REPETITION_MORE()!.toString());\n    } else {\n      throw new Error(\"Incorrect number: \" + ctx.text);\n    }\n  }\n\n  getREPNUM(ctx: RepeatnumContext): number {\n    if (ctx.REPETITION_2() != undefined) {\n      return parseInt(ctx.REPETITION_2()!.toString());\n    } else if (ctx.REPETITION_MORE() != undefined) {\n      return parseInt(ctx.REPETITION_MORE()!.toString());\n    } else {\n      throw new Error(\"Incorrect repeat number: \" + ctx.text);\n    }\n  }\n\n  visit(tree: ParseTree): Element {\n    throw new Error(\"Not implemeneted \" + tree.toString());\n  }\n\n  visitChildren(node: RuleNode): Element {\n    throw new Error(\"Not implemeneted \" + node.toString());\n  }\n\n  visitErrorNode(node: ErrorNode): Element {\n    throw new Error(\"Not implemeneted \" + node.toString());\n  }\n\n  visitTerminal(node: TerminalNode): Element {\n    throw new Error(\"Not implemeneted \" + node.toString());\n  }\n}\n","import { CharStreams, CommonTokenStream } from \"antlr4ts\";\nimport { MandalaLexer } from \"./MandalaLexer\";\nimport { MandalaParser } from \"./MandalaParser\";\nimport { ParseTreeToAST } from \"./ParseTreeToAST\";\nimport { Program } from \"../ast/program\";\n\nexport class Main {\n  // REMOVE PRINT STATEMENTS - FOR TESTING ONLY\n  public static parseCode(code: string): Program {\n    // Create the Lexer\n    const inputStream = CharStreams.fromString(code);\n    const lexer = new MandalaLexer(inputStream);\n    lexer.getAllTokens().forEach((token) => {\n      // eslint-disable-next-line no-console\n      console.info(token);\n    });\n    lexer.reset();\n    const tokenStream = new CommonTokenStream(lexer);\n    tokenStream.fill();\n\n    // Create the Parser\n    const parser = new MandalaParser(tokenStream);\n    const visitor: ParseTreeToAST = new ParseTreeToAST();\n    // Visit the tree\n    const parsedProgram: Program = visitor.visitProgram(parser.program());\n    // Returned program:\n    // eslint-disable-next-line no-console\n    console.info(parsedProgram);\n\n    return parsedProgram;\n  }\n}\n","export class InvalidColor extends Error {\n  constructor(msg: string) {\n    super(msg);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, InvalidColor.prototype);\n  }\n}\n\nexport class UndefinedVariable extends Error {\n  constructor(msg: string) {\n    super(msg);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, UndefinedVariable.prototype);\n  }\n}\n","import { Rotation, Repetition, Overlay } from \"../ast/operations\";\nimport { Program, Statement, Draw, Article } from \"../ast/program\";\nimport { Circle, Line, Petal, Cardioid, Limacon } from \"../ast/shapes\";\nimport { Variable } from \"../ast/variable\";\nimport { Visitor } from \"../ast/visitor\";\nimport { isValidColor } from \"../utils/color\";\nimport { InvalidColor, UndefinedVariable } from \"./exceptions\";\n\nexport class Validator implements Visitor<void> {\n  // set of all variables declared so far\n  private dict: Set<string>;\n\n  constructor() {\n    this.dict = new Set();\n  }\n\n  visitProgram(program: Program): void {\n    const statements: Statement[] = program.statements;\n    for (const s of statements) {\n      s.accept(this);\n    }\n    program.draw.accept(this);\n  }\n\n  visitStatement(statement: Statement): void {\n    if (!this.dict.has(statement.variable)) {\n      this.dict.add(statement.variable);\n    }\n    statement.shape.accept(this);\n  }\n\n  visitDraw(draw: Draw): void {\n    draw.draw.accept(this);\n  }\n\n  visitRotation(rotation: Rotation): void {\n    rotation.shape.accept(this);\n  }\n\n  visitRepetition(repetition: Repetition): void {\n    repetition.shape.accept(this);\n  }\n\n  visitOverlay(overlay: Overlay): void {\n    const articles: Article[] = overlay.shapes;\n    for (const a of articles) {\n      a.accept(this);\n    }\n  }\n\n  visitVariable(variable: Variable): void {\n    if (!this.dict.has(variable.name)) {\n      throw new UndefinedVariable(\"Undefined variable: \" + variable.name);\n    }\n  }\n\n  visitCircle(circle: Circle): void {\n    if (!isValidColor(circle.color)) {\n      throw new InvalidColor(\"Invalid circle color: \" + circle.color);\n    }\n  }\n\n  visitLine(line: Line): void {\n    if (!isValidColor(line.color)) {\n      throw new InvalidColor(\"Invalid line color: \" + line.color);\n    }\n  }\n\n  visitPetal(petal: Petal): void {\n    if (!isValidColor(petal.color)) {\n      throw new InvalidColor(\"Invalid petal color: \" + petal.color);\n    }\n  }\n\n  visitCardioid(cardioid: Cardioid): void {\n    if (!isValidColor(cardioid.color)) {\n      throw new InvalidColor(\"Invalid cardioid color: \" + cardioid.color);\n    }\n  }\n\n  visitLimacon(limacon: Limacon): void {\n    if (!isValidColor(limacon.color)) {\n      throw new InvalidColor(\"Invalid limacon color: \" + limacon.color);\n    }\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Interpreter } from \"./interpreter/interpreter\";\nimport App from \"./ui/App\";\nimport { Shape } from \"./ui/types\";\nimport { Main } from \"./parser/Main\";\nimport { JShape } from \"./interpreter/jshapes\";\nimport { Validator } from \"./validator/validator\";\nimport \"./styles.css\";\n\nfunction onCodeChange(): void {\n  return;\n}\n\nfunction onClickRun(code: string): Shape[] {\n  const parsedProgram = Main.parseCode(code);\n\n  const validator: Validator = new Validator();\n  validator.visitProgram(parsedProgram);\n\n  const interpreter: Interpreter = new Interpreter();\n  const shapes: JShape[] = interpreter.visitProgram(parsedProgram);\n\n  return shapes;\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App onCodeChange={onCodeChange} onClickRun={onClickRun} />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}