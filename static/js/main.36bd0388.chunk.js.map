{"version":3,"sources":["utils/math_utils.ts","ui/JShapes.ts","interpreter/interpreter.ts","ui/components/Header.tsx","ui/components/Editor.tsx","ui/components/Renderer.tsx","ui/App.tsx","parser/antlr/MandalaLexer.ts","parser/antlr/MandalaParser.ts","parser/SyntaxChecker.ts","ast/Program.ts","ast/ControlBlocks.ts","ast/Expressions.ts","ast/Variables.ts","ast/Num.ts","ast/Shapes.ts","ast/Transformations.ts","parser/ParseTreeToAST.ts","parser/Main.ts","validator/errors.ts","validator/index.ts","index.tsx"],"names":["polarToCartesian","r","theta","x","Math","cos","y","sin","rotateAboutOrigin","point","greaterThanZero","value","msg","Error","JCircle","center","radius","color","mode","type","this","angle","reps","offset","repeatedShapes","PI","rotatingPoint","i","push","JLine","endpoints","start","end","newStart","newEnd","rotatedStart","rotatedEnd","JPetal","size","centerCopy","Interpreter","shapeDict","numVarDict","program","statements","accept","draw","assignment","varName","variable","interpShape","loop","counter","rangeStart","rangeEnd","ifBlock","condition","ifStatements","elseStatements","forEach","statement","undefined","arithExp","leftVal","arithOp","otherExp","rightVal","op","evaluateAE","compExp","evaluateComparison","leftArithExp","rightArithExp","compOp","rotation","shapes","shape","rotate","repetition","repetitions","round","rss","repeat","overlay","articles","a","name","map","copy","number","circle","line","length","petal","cardioid","limacon","Header","styles","header","margin","padding","backgroundColor","monospace","fontFamily","style","Editor","props","onCodeChange","onClickRun","useState","code","setCode","root","display","flexDirection","button","float","height","fontSize","lineHeight","border","borderRadius","textArea","width","resize","className","onClick","event","preventDefault","placeholder","onChange","target","spellCheck","GridLines","axisLength","lines","minor","stroke","strokeWidth","major","axis","x1","y1","x2","y2","ErrorMessage","error","fill","startingPoint","lineLength","words","split","word","lastLine","getWrappedMessage","message","idx","Cardioid","fillOpacity","strokeOpacity","points","steps","alpha","join","getInterpolatedPoints","Circle","cx","cy","Limacon","Line","Petal","Renderer","showGrid","setShowGrid","gridToggle","marginLeft","canvas","borderWidth","borderStyle","borderColor","checked","viewBox","reverse","App","setShapes","setError","app","body","marginTop","justifyContent","MandalaLexer","input","_interp","LexerATNSimulator","_ATN","VOCABULARY","ruleNames","_serializedATN","channelNames","modeNames","__ATN","ATNDeserializer","deserialize","Utils","Lexer","ROTATE","REPEAT","OVERLAY","DRAW","IF","ELSE","FOR","RANGE","CIRCLE","LINE","PETAL","CARDIOID","LIMACON","SET","COMMA","END_FUNCTION","START_BODY","END_BODY","SEMICOLON","ADD","SUB","MULT","DIV","MOD","LTE","LT","GTE","GT","EQ","NEQ","RED","ORANGE","YELLOW","GREEN","BLUE","BLACK","WHITE","HEXCOLOR","SOLID","OUTLINE","NUM","TEXT","SPACE","NEWLINE","_LITERAL_NAMES","_SYMBOLIC_NAMES","VocabularyImpl","MandalaParser","ParserATNSimulator","predicate","FailedPredicateException","_localctx","ProgramContext","_ctx","state","enterRule","RULE_program","enterOuterAlt","re","RecognitionException","exception","_errHandler","reportError","recover","exitRule","StatementContext","RULE_statement","sync","_input","LA","forloop","ifblock","NoViableAltException","_la","StatementsContext","RULE_statements","AssignmentContext","RULE_assignment","match","arithexp","DrawContext","RULE_draw","object","ObjectContext","RULE_object","ShapeContext","RULE_shape","shapeConstructor","transformation","ArithexpContext","RULE_arithexp","aop","CompexpContext","RULE_compexp","cop","ForloopContext","RULE_forloop","IfblockContext","RULE_ifblock","compexp","_thenblock","_elseblock","ShapeConstructorContext","RULE_shapeConstructor","TransformationContext","RULE_transformation","RotateContext","RULE_rotate","RepeatContext","RULE_repeat","OverlayContext","RULE_overlay","CircleContext","RULE_circle","shapeMode","LineContext","RULE_line","PetalContext","RULE_petal","CardioidContext","RULE_cardioid","LimaconContext","RULE_limacon","ColorContext","RULE_color","recoverInline","Token","EOF","matchedEOF","reportMatch","consume","ShapeModeContext","RULE_shapeMode","VariableContext","RULE_variable","CopContext","RULE_cop","AopContext","RULE_aop","Parser","parent","invokingState","getRuleContext","listener","enterProgram","exitProgram","visitor","visitProgram","visitChildren","ParserRuleContext","tryGetRuleContext","enterStatement","exitStatement","visitStatement","getRuleContexts","enterStatements","exitStatements","visitStatements","getToken","enterAssignment","exitAssignment","visitAssignment","enterDraw","exitDraw","visitDraw","enterObject","exitObject","visitObject","enterShape","exitShape","visitShape","tryGetToken","enterArithexp","exitArithexp","visitArithexp","enterCompexp","exitCompexp","visitCompexp","enterForloop","exitForloop","visitForloop","getTokens","enterIfblock","exitIfblock","visitIfblock","enterShapeConstructor","exitShapeConstructor","visitShapeConstructor","enterTransformation","exitTransformation","visitTransformation","enterRotate","exitRotate","visitRotate","enterRepeat","exitRepeat","visitRepeat","enterOverlay","exitOverlay","visitOverlay","enterCircle","exitCircle","visitCircle","enterLine","exitLine","visitLine","enterPetal","exitPetal","visitPetal","enterCardioid","exitCardioid","visitCardioid","enterLimacon","exitLimacon","visitLimacon","enterColor","exitColor","visitColor","enterShapeMode","exitShapeMode","visitShapeMode","enterVariable","exitVariable","visitVariable","enterCop","exitCop","visitCop","enterAop","exitAop","visitAop","SyntaxChecker","ctx","str","concat","getStatements","s","toString","text","getVariable","o","getColor","getShapeMode","parseInt","getAop","getCop","Program","ArticleAssignment","visitArticleAssignment","NumAssignment","visitNumAssignment","Draw","ForLoop","visitForLoop","IfBlock","visitIfBlock","ArithExp","visitArithExp","CompExp","leftAE","rightAE","visitCompExp","ArticleVariable","visitArticleVariable","NumberVariable","visitNumberVariable","Num","visitNum","Rotation","visitRotation","Repetition","rep","visitRepetition","Overlay","ParseTreeToAST","errorString","repNum","comp","thenStatements","arith1","arith2","tree","node","Main","inputStream","CharStreams","fromString","lexer","reset","tokenStream","CommonTokenStream","parser","CustomError","_message","DuplicateVariableError","variableName","TypeError","expectedType","UndefinedVariableError","Validator","varTypeMappings","lockedVars","Set","has","add","delete","block","expression","ReactDOM","render","StrictMode","parsedProgram","parseCode","document","getElementById"],"mappings":"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AAe,GAjE3B3E,EAkEY6E,WAAa,GAlEzB7E,EAmEYqF,eAAiB,GAnE7BrF,EAoEYuF,cAAgB,GApE5BvF,EAqEYyF,SAAW,GArEvBzF,EAsEY2F,SAAW,GAtEvB3F,EAwEYxD,UAAsB,CAC3C,UACA,YACA,aACA,aACA,OACA,SACA,QACA,WACA,UACA,UACA,UACA,mBACA,iBACA,SACA,SACA,UACA,SACA,OACA,QACA,WACA,UACA,QACA,YACA,WACA,MACA,OAlGSwD,EAqGaH,eAA4C,MAClE5L,EACA,YACA,YACA,aACA,UACA,QACA,SACA,QACA,cACA,kBACA,gBACA,iBACA,oBACA,mBACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,OACA,MACA,OACA,OACA,QACA,WACA,WACA,UACA,SACA,UACA,eACAA,EACA,UACA,aA9IS+L,EAgJaF,gBAA6C,MACnE7L,EACA,SACA,SACA,UACA,OACA,KACA,OACA,MACA,QACA,SACA,OACA,QACA,WACA,UACA,MACA,QACA,eACA,aACA,WACA,YACA,MACA,MACA,OACA,MACA,MACA,MACA,KACA,MACA,KACA,KACA,MACA,MACA,SACA,SACA,QACA,OACA,QACA,QACA,WACA,QACA,UACA,MACA,OACA,QACA,WA7LS+L,EA+LYzD,WAAyB,IAAIwD,iBAClDC,EAAcH,eACdG,EAAcF,gBACd,IAlMSE,EAixCYvD,eACrB,qvLAlxCSuD,EAs2CGpD,W,EAYT,IAAMyD,EAAb,kDAOE,WAAYwF,EAAuCC,GAAwB,uCACnED,EAAQC,GARlB,8CACE,WACE,OAAOtU,KAAKuU,eAAe,EAAGpE,KAFlC,kBAIE,WACE,OAAOnQ,KAAKuU,eAAe,EAAG9D,KALlC,qBAWE,WACE,OAAOjC,EAAcS,eAZzB,uBAeE,SAAiBuF,GACXA,EAASC,cACXD,EAASC,aAAazU,QAjB5B,sBAqBE,SAAgBwU,GACVA,EAASE,aACXF,EAASE,YAAY1U,QAvB3B,oBA2BE,SAAsB2U,GACpB,OAAIA,EAAQC,aACHD,EAAQC,aAAa5U,MA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","file":"static/js/main.36bd0388.chunk.js","sourcesContent":["import { ArithOp, CompOp } from \"../ast/Expressions\";\nimport { Point } from \"../ui/types\";\n\n/**\n * Converts a polar coordinate to a cartesian coordinate\n * @param r the distance from the origin\n * @param theta the angle about the origin in radians\n * @returns the equivalent cartesian coordinate\n */\nexport function polarToCartesian(r: number, theta: number): Point {\n  return {\n    x: r * Math.cos(theta),\n    y: r * Math.sin(theta),\n  };\n}\n\n// Rotates a polar coordinate about the origin\n// by angle theta (in radians)\nexport function rotateAboutOrigin(point: Point, theta: number): Point {\n  return {\n    x: point.x * Math.cos(theta) - point.y * Math.sin(theta),\n    y: point.x * Math.sin(theta) + point.y * Math.cos(theta),\n  };\n}\n\n// Converts an angle in degrees to radians\nexport function degToRad(degrees: number): number {\n  return (degrees * Math.PI) / 180;\n}\n\n// Evaluates an arithmetic expression\nexport function evaluateAE(\n  leftVal: number,\n  rightVal: number,\n  op: ArithOp,\n): number {\n  switch (op) {\n    case \"+\": {\n      return leftVal + rightVal;\n    }\n    case \"-\": {\n      return leftVal - rightVal;\n    }\n    case \"*\": {\n      return leftVal * rightVal;\n    }\n    case \"/\": {\n      if (rightVal == 0) {\n        throw new Error(\n          \"Cannot divide by 0 (attempted to divide \" + leftVal + \" by 0).\",\n        );\n      }\n      return leftVal / rightVal;\n    }\n    case \"%\": {\n      return leftVal % rightVal;\n    }\n  }\n}\n\n// Evaluates an arithmetic expression\nexport function evaluateComparison(\n  leftVal: number,\n  rightVal: number,\n  op: CompOp,\n): boolean {\n  switch (op) {\n    case \"<\": {\n      return leftVal < rightVal;\n    }\n    case \">\": {\n      return leftVal > rightVal;\n    }\n    case \"<=\": {\n      return leftVal <= rightVal;\n    }\n    case \">=\": {\n      return leftVal >= rightVal;\n    }\n    case \"==\": {\n      return leftVal === rightVal;\n    }\n    case \"!=\": {\n      return leftVal !== rightVal;\n    }\n  }\n}\n\n// Checks that the number is positive\nexport function greaterThanZero(value: number, msg: string): void {\n  if (!(value > 0)) {\n    throw new Error(\n      \"Number (\" +\n        msg +\n        \") must be greater than 0. Instead, evaluated to \" +\n        value +\n        \".\",\n    );\n  }\n}\n","import { Circle, Line, Petal, PetalType, Point } from \"./types\";\nimport { rotateAboutOrigin } from \"../utils/math_utils\";\nimport { Mode } from \"../ast/Shapes\";\n\nexport type JShape = JCircle | JLine | JPetal;\n\nexport class JCircle implements Circle {\n  type: \"circle\" = \"circle\";\n  center: Point;\n  radius: number;\n  color: string;\n  mode: Mode;\n\n  constructor(center: Point, radius: number, color: string, mode: Mode) {\n    this.center = center;\n    this.radius = radius;\n    this.color = color;\n    this.mode = mode;\n  }\n\n  copy(): JCircle {\n    const centerCopy: Point = { x: this.center.x, y: this.center.y };\n    return new JCircle(centerCopy, this.radius, this.color, this.mode);\n  }\n\n  rotate(angle: number): void {\n    this.center = rotateAboutOrigin(this.center, angle);\n  }\n\n  repeat(reps: number, offset: number): JCircle[] {\n    this.center.x += offset;\n    const repeatedShapes: JCircle[] = [this];\n\n    const angle: number = (2 * Math.PI) / reps;\n    let rotatingPoint: Point = this.center;\n\n    for (let i = 1; i < reps; i++) {\n      rotatingPoint = rotateAboutOrigin(rotatingPoint, angle);\n      repeatedShapes.push(\n        new JCircle(rotatingPoint, this.radius, this.color, this.mode),\n      );\n    }\n\n    return repeatedShapes;\n  }\n}\n\nexport class JLine implements Line {\n  type: \"line\" = \"line\";\n  endpoints: [Point, Point];\n  color: string;\n\n  constructor(endpoints: [Point, Point], color: string) {\n    this.endpoints = endpoints;\n    this.color = color;\n  }\n\n  copy(): JLine {\n    const [start, end] = this.endpoints;\n    const endpointsCopy: [Point, Point] = [\n      { x: start.x, y: start.y },\n      { x: end.x, y: end.y },\n    ];\n    return new JLine(endpointsCopy, this.color);\n  }\n\n  rotate(angle: number): void {\n    const [start, end]: [Point, Point] = this.endpoints;\n    const newStart: Point = rotateAboutOrigin(start, angle);\n    const newEnd: Point = rotateAboutOrigin(end, angle);\n    this.endpoints = [newStart, newEnd];\n  }\n\n  repeat(reps: number, offset: number): JLine[] {\n    this.endpoints[0].x += offset;\n    this.endpoints[1].x += offset;\n\n    const repeatedShapes: JLine[] = [this];\n\n    const angle: number = (2 * Math.PI) / reps;\n    let [rotatedStart, rotatedEnd]: [Point, Point] = this.endpoints;\n\n    for (let i = 1; i < reps; i++) {\n      rotatedStart = rotateAboutOrigin(rotatedStart, angle);\n      rotatedEnd = rotateAboutOrigin(rotatedEnd, angle);\n\n      repeatedShapes.push(new JLine([rotatedStart, rotatedEnd], this.color));\n    }\n\n    return repeatedShapes;\n  }\n}\n\nexport class JPetal implements Petal {\n  type: PetalType;\n  center: Point;\n  angle: number; // in radians\n  size: number;\n  color: string;\n  mode: Mode;\n\n  constructor(\n    type: PetalType,\n    center: Point,\n    angle: number,\n    size: number,\n    color: string,\n    mode: Mode,\n  ) {\n    this.type = type;\n    this.center = center;\n    this.angle = angle;\n    this.size = size;\n    this.color = color;\n    this.mode = mode;\n  }\n\n  copy(): JPetal {\n    const centerCopy: Point = { x: this.center.x, y: this.center.y };\n    return new JPetal(\n      this.type,\n      centerCopy,\n      this.angle,\n      this.size,\n      this.color,\n      this.mode,\n    );\n  }\n\n  rotate(angle: number): void {\n    this.center = rotateAboutOrigin(this.center, angle);\n    this.angle = this.angle + angle;\n  }\n\n  repeat(reps: number, offset: number): JPetal[] {\n    this.center.x += offset;\n    const repeatedShapes: JPetal[] = [this];\n\n    const angle: number = (2 * Math.PI) / reps;\n    let rotatingPoint: Point = this.center;\n\n    for (let i = 1; i < reps; i++) {\n      rotatingPoint = rotateAboutOrigin(rotatingPoint, angle);\n      repeatedShapes.push(\n        new JPetal(\n          this.type,\n          rotatingPoint,\n          this.angle + angle * i,\n          this.size,\n          this.color,\n          this.mode,\n        ),\n      );\n    }\n\n    return repeatedShapes;\n  }\n}\n","import { JShape, JCircle, JLine, JPetal } from \"../ui/JShapes\";\nimport { Circle, Line, Petal, Cardioid, Limacon } from \"../ast/Shapes\";\nimport { Rotation, Repetition, Overlay } from \"../ast/Transformations\";\nimport {\n  Article,\n  ArticleAssignment,\n  NumAssignment,\n  Draw,\n  Program,\n  Statement,\n} from \"../ast/Program\";\nimport { ArticleVariable, NumberVariable } from \"../ast/Variables\";\nimport { Visitor } from \"../ast/Visitor\";\nimport {\n  degToRad,\n  evaluateAE,\n  evaluateComparison,\n  greaterThanZero,\n} from \"../utils/math_utils\";\nimport { ArithExp, CompExp } from \"../ast/Expressions\";\nimport { ForLoop, IfBlock } from \"../ast/ControlBlocks\";\nimport { Num } from \"../ast/Num\";\n\nexport class Interpreter implements Visitor<JShape[], number, boolean> {\n  // maps string keys to lists of jtype Shape values\n  private shapeDict: { [varNames: string]: JShape[] };\n  // maps string keys to numbers\n  private numVarDict: { [varNames: string]: number };\n\n  constructor() {\n    this.shapeDict = {};\n    this.numVarDict = {};\n  }\n\n  visitProgram(program: Program): JShape[] {\n    const statements: Statement[] = program.statements;\n    for (const s of statements) {\n      s.accept(this);\n    }\n\n    const toDraw: Draw = program.draw;\n    return toDraw.accept(this);\n  }\n\n  visitArticleAssignment(assignment: ArticleAssignment): void {\n    const varName: string = assignment.variable;\n    const shape: Article = assignment.value;\n    const interpShape: JShape[] = shape.accept(this);\n    this.shapeDict[varName] = interpShape;\n  }\n\n  visitNumAssignment(assignment: NumAssignment): void {\n    const varName: string = assignment.variable;\n    const value: number = assignment.value.accept(this);\n    this.numVarDict[varName] = value;\n  }\n\n  visitDraw(draw: Draw): JShape[] {\n    const toDraw: Article = draw.draw;\n    return toDraw.accept(this);\n  }\n\n  visitForLoop(loop: ForLoop): void {\n    const counter: string = loop.counter;\n    const start: number = loop.rangeStart.accept(this);\n    const end: number = loop.rangeEnd.accept(this);\n\n    for (let i = start; i < end; i++) {\n      this.numVarDict[counter] = i;\n      for (const s of loop.statements) {\n        s.accept(this);\n      }\n    }\n\n    // counter variable is only available inside for loop\n    delete this.numVarDict[counter];\n  }\n\n  visitIfBlock(ifBlock: IfBlock): void {\n    const condition: boolean = ifBlock.condition.accept(this);\n    const ifStatements: Statement[] = ifBlock.ifStatements;\n    const elseStatements: Statement[] | undefined = ifBlock.elseStatements;\n\n    if (condition) {\n      ifStatements.forEach((statement) => {\n        statement.accept(this);\n      });\n    } else if (elseStatements !== undefined) {\n      elseStatements.forEach((statement) => {\n        statement.accept(this);\n      });\n    }\n  }\n\n  visitArithExp(arithExp: ArithExp): number {\n    const leftVal: number = arithExp.value.accept(this);\n    if (arithExp.arithOp !== undefined && arithExp.otherExp !== undefined) {\n      const rightVal: number = arithExp.otherExp.accept(this);\n      return evaluateAE(leftVal, rightVal, arithExp.arithOp);\n    } else {\n      return leftVal;\n    }\n  }\n\n  visitCompExp(compExp: CompExp): boolean {\n    const leftVal: number = compExp.leftArithExp.accept(this);\n    const rightVal: number = compExp.rightArithExp.accept(this);\n    return evaluateComparison(leftVal, rightVal, compExp.compOp);\n  }\n\n  visitRotation(rotation: Rotation): JShape[] {\n    const shapes: JShape[] = rotation.shape.accept(this);\n    const angle: number = degToRad(rotation.angle.accept(this));\n    for (const s of shapes) {\n      s.rotate(angle);\n    }\n    return shapes;\n  }\n\n  visitRepetition(repetition: Repetition): JShape[] {\n    const shapes: JShape[] = repetition.shape.accept(this);\n    let reps: number = repetition.repetitions.accept(this);\n    const offset: number = repetition.offset.accept(this);\n\n    // use a whole number of repetitions\n    reps = Math.round(reps);\n    greaterThanZero(reps, \"of repetitions in call to repeat\");\n\n    const repeatedShapes: JShape[] = [];\n    for (const s of shapes) {\n      const rss: JShape[] = s.repeat(reps, offset);\n      repeatedShapes.push(...rss);\n    }\n    return repeatedShapes;\n  }\n\n  visitOverlay(overlay: Overlay): JShape[] {\n    const articles: Article[] = overlay.shapes;\n    const shapes: JShape[] = [];\n    for (const a of articles) {\n      shapes.push(...a.accept(this));\n    }\n    return shapes;\n  }\n\n  visitArticleVariable(variable: ArticleVariable): JShape[] {\n    const varName: string = variable.name;\n    return this.shapeDict[varName].map((shape) => shape.copy());\n  }\n\n  visitNumberVariable(variable: NumberVariable): number {\n    const varName: string = variable.name;\n    return this.numVarDict[varName];\n  }\n\n  visitNum(number: Num): number {\n    return number.value;\n  }\n\n  visitCircle(circle: Circle): JShape[] {\n    const radius: number = circle.radius.accept(this);\n    greaterThanZero(radius, \"radius of circle\");\n\n    return [\n      new JCircle(\n        {\n          x: 0,\n          y: 0,\n        },\n        circle.radius.accept(this),\n        circle.color,\n        circle.mode,\n      ),\n    ];\n  }\n\n  visitLine(line: Line): JShape[] {\n    const length: number = line.size.accept(this);\n    greaterThanZero(length, \"length of line\");\n\n    return [\n      new JLine(\n        [\n          { x: 0, y: 0 },\n          { x: length, y: 0 },\n        ],\n        line.color,\n      ),\n    ];\n  }\n\n  visitPetal(petal: Petal): JShape[] {\n    const size: number = petal.size.accept(this);\n    greaterThanZero(size, \"size of petal\");\n\n    return [\n      new JPetal(\"petal\", { x: 0, y: 0 }, 0, size, petal.color, petal.mode),\n    ];\n  }\n\n  visitCardioid(cardioid: Cardioid): JShape[] {\n    const size: number = cardioid.size.accept(this);\n    greaterThanZero(size, \"size of cardioid\");\n\n    return [\n      new JPetal(\n        \"cardioid\",\n        { x: 0, y: 0 },\n        0,\n        size,\n        cardioid.color,\n        cardioid.mode,\n      ),\n    ];\n  }\n\n  visitLimacon(limacon: Limacon): JShape[] {\n    const size: number = limacon.size.accept(this);\n    greaterThanZero(size, \"size of limacon\");\n\n    return [\n      new JPetal(\n        \"limacon\",\n        { x: 0, y: 0 },\n        0,\n        size,\n        limacon.color,\n        limacon.mode,\n      ),\n    ];\n  }\n}\n","import React from \"react\";\n\nfunction Header(): JSX.Element {\n  const styles: { [name: string]: React.CSSProperties } = {\n    header: {\n      margin: 0,\n      padding: \"1vh\",\n      backgroundColor: \"#3178c6\",\n      color: \"white\",\n    },\n    monospace: {\n      fontFamily: \"Roboto Mono, monospace\",\n    },\n  };\n\n  return (\n    <h1 style={styles.header}>\n      Mandala (<span style={styles.monospace}>.mdl</span>) REPL\n    </h1>\n  );\n}\n\nexport default Header;\n","import React, { useState } from \"react\";\n\ninterface EditorProps {\n  onCodeChange: (code: string) => void;\n  onClickRun: (code: string) => void;\n}\n\nfunction Editor(props: EditorProps): JSX.Element {\n  const { onCodeChange, onClickRun } = props;\n  const [code, setCode] = useState<string>(\"\");\n\n  const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const code = event.target.value;\n    setCode(code);\n    onCodeChange(code);\n  };\n\n  const handleSubmit = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    onClickRun(code);\n  };\n\n  const styles: { [name: string]: React.CSSProperties } = {\n    root: {\n      display: \"flex\",\n      flexDirection: \"column\",\n    },\n    button: {\n      float: \"right\",\n      height: 20,\n      fontSize: \"12pt\",\n      lineHeight: 0,\n      padding: \"3px 10px\",\n      border: \"none\",\n      borderRadius: \"5px 5px 0 0\",\n      backgroundColor: \"#76b947\",\n      color: \"white\",\n    },\n    textArea: {\n      margin: 0,\n      width: \"calc(min(40vw, 80vh) - 6px)\",\n      height: \"calc(min(40vw, 80vh) - 6px)\",\n      resize: \"none\",\n      fontSize: \"12pt\",\n      border: \"1px solid black\",\n    },\n  };\n\n  return (\n    <form className=\"Editor\" style={styles.root}>\n      <div>\n        <button style={styles.button} onClick={handleSubmit}>\n          Run\n        </button>\n      </div>\n      <textarea\n        style={styles.textArea}\n        placeholder=\"Insert code here\"\n        value={code}\n        onChange={handleChange}\n        spellCheck={false}\n      />\n    </form>\n  );\n}\n\nexport default Editor;\n","import React, { useState } from \"react\";\nimport { polarToCartesian } from \"../../utils/math_utils\";\nimport {\n  Point,\n  Circle as ICircle,\n  Line as ILine,\n  Petal as IPetal,\n  Shape as TShape,\n} from \"../types\";\n\ninterface GridLinesProps {\n  axisLength: number;\n}\n\nfunction GridLines(props: GridLinesProps) {\n  const { axisLength } = props;\n  const lines: JSX.Element[] = [];\n\n  const styles: { [name: string]: React.CSSProperties } = {\n    minor: {\n      stroke: \"lightGrey\",\n      strokeWidth: 0.03,\n    },\n    major: {\n      stroke: \"lightGrey\",\n      strokeWidth: 0.06,\n    },\n    axis: {\n      stroke: \"grey\",\n      strokeWidth: 0.09,\n    },\n  };\n\n  // create the horizontal lines\n  for (let i = -axisLength + 1; i < axisLength; i++) {\n    lines.push(\n      <line\n        key={`y${i}`}\n        x1={-axisLength}\n        y1={i}\n        x2={axisLength}\n        y2={i}\n        style={i % 5 === 0 ? styles.major : styles.minor}\n      />,\n    );\n  }\n\n  // create the vertical lines\n  for (let i = -axisLength + 1; i < axisLength; i++) {\n    lines.push(\n      <line\n        key={`x${i}`}\n        x1={i}\n        y1={-axisLength}\n        x2={i}\n        y2={axisLength}\n        style={i % 5 === 0 ? styles.major : styles.minor}\n      />,\n    );\n  }\n\n  // create the x-axis line\n  lines.push(\n    <line\n      key=\"xAxis\"\n      x1={0}\n      y1={-axisLength}\n      x2={0}\n      y2={axisLength}\n      style={styles.axis}\n    />,\n  );\n\n  // create the y-axis line\n  lines.push(\n    <line\n      key=\"yAxis\"\n      x1={-axisLength}\n      y1={0}\n      x2={axisLength}\n      y2={0}\n      style={styles.axis}\n    />,\n  );\n\n  return <>{lines}</>;\n}\n\ninterface ErrorMessageProps {\n  error: Error | null;\n}\n\nfunction ErrorMessage(props: ErrorMessageProps) {\n  const { error } = props;\n\n  const style: React.CSSProperties = {\n    fill: \"red\",\n    fontSize: 1,\n    fontFamily: \"Courier New\",\n  };\n\n  if (error === null) {\n    return null;\n  }\n\n  const getWrappedMessage = (msg: string, lineLength: number) => {\n    const words = msg.split(\" \");\n    const lines: string[] = [];\n\n    words.forEach((word) => {\n      if (lines.length === 0) {\n        lines.push(word);\n        return;\n      }\n\n      const lastLine = lines[lines.length - 1];\n\n      if (lastLine.length + word.length + 1 > lineLength) {\n        lines.push(word);\n      } else {\n        lines[lines.length - 1] = `${lastLine} ${word}`;\n      }\n    });\n\n    return lines;\n  };\n\n  const startingPoint = { x: -18, y: -18 };\n  const lineSpacing = 1.5;\n  const lines = getWrappedMessage(`Error: ${error.message}`, 59);\n\n  return (\n    <>\n      {lines.map((line, idx) => (\n        <text\n          key={idx}\n          x={startingPoint.x}\n          y={startingPoint.y + lineSpacing * idx}\n          style={style}\n        >\n          {line}\n        </text>\n      ))}\n    </>\n  );\n}\n\ninterface CardioidProps {\n  cardioid: IPetal;\n}\n\nfunction Cardioid(props: CardioidProps) {\n  const { center, angle, size, color, mode } = props.cardioid;\n\n  const getInterpolatedPoints = (steps: number) => {\n    const points: Point[] = [];\n\n    for (let theta = 0; theta <= 2 * Math.PI; theta += (2 * Math.PI) / steps) {\n      const alpha = size / 2;\n      const r = alpha + alpha * Math.cos(theta - angle);\n\n      let { x, y } = polarToCartesian(r, theta);\n      x += center.x;\n      y += center.y;\n\n      points.push({ x, y: -y });\n    }\n\n    return points.map(({ x, y }) => `${x} ${y}`).join(\",\");\n  };\n\n  const style: React.CSSProperties = {\n    fill: color,\n    fillOpacity: mode === \"solid\" ? 1 : 0,\n    stroke: color,\n    strokeOpacity: mode === \"outline\" ? 1 : 0,\n    strokeWidth: mode === \"outline\" ? 0.2 : 0,\n  };\n\n  return <polyline points={getInterpolatedPoints(360)} style={style} />;\n}\n\ninterface CircleProps {\n  circle: ICircle;\n}\n\nfunction Circle(props: CircleProps) {\n  const { center, radius, color, mode } = props.circle;\n\n  const style: React.CSSProperties = {\n    fill: color,\n    fillOpacity: mode === \"solid\" ? 1 : 0,\n    stroke: color,\n    strokeOpacity: mode === \"outline\" ? 1 : 0,\n    strokeWidth: mode === \"outline\" ? 0.2 : 0,\n  };\n\n  return <circle cx={center.x} cy={-center.y} r={radius} style={style} />;\n}\n\ninterface LimaconProps {\n  limacon: IPetal;\n}\n\nfunction Limacon(props: LimaconProps) {\n  const { center, angle, size, color, mode } = props.limacon;\n\n  const getInterpolatedPoints = (steps: number) => {\n    const points: Point[] = [];\n\n    for (let theta = 0; theta <= 2 * Math.PI; theta += (2 * Math.PI) / steps) {\n      const a = size / 3;\n      const b = size / 1.5;\n      const r = a + b * Math.cos(theta - angle);\n\n      let { x, y } = polarToCartesian(r, theta);\n      x += center.x;\n      y += center.y;\n\n      points.push({ x, y: -y });\n    }\n\n    return points.map(({ x, y }) => `${x} ${y}`).join(\",\");\n  };\n\n  const style: React.CSSProperties = {\n    fill: color,\n    fillOpacity: mode === \"solid\" ? 1 : 0,\n    stroke: color,\n    strokeOpacity: mode === \"outline\" ? 1 : 0,\n    strokeWidth: mode === \"outline\" ? 0.2 : 0,\n  };\n\n  return <polyline points={getInterpolatedPoints(360)} style={style} />;\n}\n\ninterface LineProps {\n  line: ILine;\n}\n\nfunction Line(props: LineProps) {\n  const { endpoints, color } = props.line;\n\n  const style: React.CSSProperties = {\n    stroke: color,\n    strokeWidth: 0.2,\n  };\n\n  return (\n    <line\n      x1={endpoints[0].x}\n      y1={-endpoints[0].y}\n      x2={endpoints[1].x}\n      y2={-endpoints[1].y}\n      style={style}\n    />\n  );\n}\n\ninterface PetalProps {\n  petal: IPetal;\n}\n\nfunction Petal(props: PetalProps) {\n  const { center, angle, size, color, mode } = props.petal;\n\n  const getInterpolatedPoints = (steps: number) => {\n    const points: Point[] = [];\n\n    for (\n      let theta = -Math.PI / 4 + angle;\n      theta <= Math.PI / 4 + angle;\n      theta += Math.PI / 2 / steps\n    ) {\n      const r = size * Math.cos(2 * (theta - angle));\n\n      let { x, y } = polarToCartesian(r, theta);\n      x += center.x;\n      y += center.y;\n\n      points.push({ x, y: -y });\n    }\n\n    return points.map(({ x, y }) => `${x} ${y}`).join(\",\");\n  };\n\n  const style: React.CSSProperties = {\n    fill: color,\n    fillOpacity: mode === \"solid\" ? 1 : 0,\n    stroke: color,\n    strokeOpacity: mode === \"outline\" ? 1 : 0,\n    strokeWidth: mode === \"outline\" ? 0.2 : 0,\n  };\n\n  return <polyline points={getInterpolatedPoints(360)} style={style} />;\n}\n\ninterface RendererProps {\n  shapes: TShape[];\n  error: Error | null;\n}\n\nfunction Renderer(props: RendererProps): JSX.Element {\n  const { shapes, error } = props;\n  const [showGrid, setShowGrid] = useState(true);\n  const axisLength = 20;\n\n  const styles: { [name: string]: React.CSSProperties } = {\n    root: {\n      display: \"flex\",\n      flexDirection: \"column\",\n    },\n    gridToggle: {\n      marginLeft: \"auto\",\n      fontSize: \"12pt\",\n    },\n    canvas: {\n      width: \"min(40vw, 80vh)\",\n      height: \"min(40vw, 80vh)\",\n      borderWidth: 1,\n      borderStyle: \"solid\",\n      borderColor: \"black\",\n      backgroundColor: \"white\",\n    },\n  };\n\n  return (\n    <div className=\"Renderer\" style={styles.root}>\n      <label style={styles.gridToggle}>\n        <input\n          type=\"checkbox\"\n          checked={showGrid}\n          onChange={() => setShowGrid(!showGrid)}\n        />\n        Show grid\n      </label>\n      <svg\n        style={styles.canvas}\n        viewBox={`-${axisLength} -${axisLength} ${axisLength * 2} ${\n          axisLength * 2\n        }`}\n      >\n        {showGrid && !error ? <GridLines axisLength={axisLength} /> : null}\n        <ErrorMessage error={error} />\n        {[...shapes].reverse().map((shape) => {\n          switch (shape.type) {\n            case \"cardioid\":\n              return <Cardioid cardioid={shape} />;\n            case \"circle\":\n              return <Circle circle={shape} />;\n            case \"limacon\":\n              return <Limacon limacon={shape} />;\n            case \"line\":\n              return <Line line={shape} />;\n            case \"petal\":\n              return <Petal petal={shape} />;\n            default:\n              return null;\n          }\n        })}\n      </svg>\n    </div>\n  );\n}\n\nexport default Renderer;\n","import React, { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport Editor from \"./components/Editor\";\nimport Renderer from \"./components/Renderer\";\nimport { Shape } from \"./types\";\n\ninterface AppProps {\n  onCodeChange: (code: string) => void;\n  onClickRun: (code: string) => Shape[];\n}\n\nfunction App(props: AppProps): JSX.Element {\n  const { onCodeChange, onClickRun } = props;\n  const [shapes, setShapes] = useState<Shape[]>([]);\n  const [error, setError] = useState<Error | null>(null);\n\n  const handleClickRun = (code: string) => {\n    try {\n      const shapes = onClickRun(code);\n      setShapes(shapes);\n      setError(null);\n    } catch (error) {\n      setShapes([]);\n      setError(error as Error);\n    }\n  };\n\n  const styles: { [name: string]: React.CSSProperties } = {\n    app: {\n      fontFamily: \"Roboto, sans-serif\",\n      backgroundColor: \"#fafafa\",\n    },\n    body: {\n      marginTop: \"2vh\",\n      display: \"flex\",\n      justifyContent: \"space-evenly\",\n    },\n  };\n\n  return (\n    <div className=\"App\" style={styles.app}>\n      <Header />\n      <div style={styles.body}>\n        <Editor onCodeChange={onCodeChange} onClickRun={handleClickRun} />\n        <Renderer shapes={shapes} error={error} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// Generated from src/parser/MandalaLexer.g4 by ANTLR 4.9.0-SNAPSHOT\n\nimport { ATN } from \"antlr4ts/atn/ATN\";\nimport { ATNDeserializer } from \"antlr4ts/atn/ATNDeserializer\";\nimport { CharStream } from \"antlr4ts/CharStream\";\nimport { Lexer } from \"antlr4ts/Lexer\";\nimport { LexerATNSimulator } from \"antlr4ts/atn/LexerATNSimulator\";\nimport { NotNull } from \"antlr4ts/Decorators\";\nimport { Override } from \"antlr4ts/Decorators\";\nimport { RuleContext } from \"antlr4ts/RuleContext\";\nimport { Vocabulary } from \"antlr4ts/Vocabulary\";\nimport { VocabularyImpl } from \"antlr4ts/VocabularyImpl\";\n\nimport * as Utils from \"antlr4ts/misc/Utils\";\n\nexport class MandalaLexer extends Lexer {\n  public static readonly ROTATE = 1;\n  public static readonly REPEAT = 2;\n  public static readonly OVERLAY = 3;\n  public static readonly DRAW = 4;\n  public static readonly IF = 5;\n  public static readonly ELSE = 6;\n  public static readonly FOR = 7;\n  public static readonly RANGE = 8;\n  public static readonly CIRCLE = 9;\n  public static readonly LINE = 10;\n  public static readonly PETAL = 11;\n  public static readonly CARDIOID = 12;\n  public static readonly LIMACON = 13;\n  public static readonly SET = 14;\n  public static readonly COMMA = 15;\n  public static readonly END_FUNCTION = 16;\n  public static readonly START_BODY = 17;\n  public static readonly END_BODY = 18;\n  public static readonly SEMICOLON = 19;\n  public static readonly ADD = 20;\n  public static readonly SUB = 21;\n  public static readonly MULT = 22;\n  public static readonly DIV = 23;\n  public static readonly MOD = 24;\n  public static readonly LTE = 25;\n  public static readonly LT = 26;\n  public static readonly GTE = 27;\n  public static readonly GT = 28;\n  public static readonly EQ = 29;\n  public static readonly NEQ = 30;\n  public static readonly RED = 31;\n  public static readonly ORANGE = 32;\n  public static readonly YELLOW = 33;\n  public static readonly GREEN = 34;\n  public static readonly BLUE = 35;\n  public static readonly BLACK = 36;\n  public static readonly WHITE = 37;\n  public static readonly HEXCOLOR = 38;\n  public static readonly SOLID = 39;\n  public static readonly OUTLINE = 40;\n  public static readonly NUM = 41;\n  public static readonly TEXT = 42;\n  public static readonly SPACE = 43;\n  public static readonly NEWLINE = 44;\n\n  // tslint:disable:no-trailing-whitespace\n  public static readonly channelNames: string[] = [\n    \"DEFAULT_TOKEN_CHANNEL\",\n    \"HIDDEN\",\n  ];\n\n  // tslint:disable:no-trailing-whitespace\n  public static readonly modeNames: string[] = [\"DEFAULT_MODE\"];\n\n  public static readonly ruleNames: string[] = [\n    \"ROTATE\",\n    \"REPEAT\",\n    \"OVERLAY\",\n    \"DRAW\",\n    \"IF\",\n    \"ELSE\",\n    \"FOR\",\n    \"RANGE\",\n    \"CIRCLE\",\n    \"LINE\",\n    \"PETAL\",\n    \"CARDIOID\",\n    \"LIMACON\",\n    \"SET\",\n    \"COMMA\",\n    \"END_FUNCTION\",\n    \"START_BODY\",\n    \"END_BODY\",\n    \"SEMICOLON\",\n    \"ADD\",\n    \"SUB\",\n    \"MULT\",\n    \"DIV\",\n    \"MOD\",\n    \"LTE\",\n    \"LT\",\n    \"GTE\",\n    \"GT\",\n    \"EQ\",\n    \"NEQ\",\n    \"RED\",\n    \"ORANGE\",\n    \"YELLOW\",\n    \"GREEN\",\n    \"BLUE\",\n    \"BLACK\",\n    \"WHITE\",\n    \"HEXCOLOR\",\n    \"SOLID\",\n    \"OUTLINE\",\n    \"NUM\",\n    \"TEXT\",\n    \"SPACE\",\n    \"NEWLINE\",\n  ];\n\n  private static readonly _LITERAL_NAMES: Array<string | undefined> = [\n    undefined,\n    \"'rotate('\",\n    \"'repeat('\",\n    \"'overlay('\",\n    \"'draw('\",\n    \"'if('\",\n    \"'else'\",\n    \"'for'\",\n    \"'in range('\",\n    \"'createCircle('\",\n    \"'createLine('\",\n    \"'createPetal('\",\n    \"'createCardioid('\",\n    \"'createLimacon('\",\n    \"'='\",\n    \"','\",\n    \"')'\",\n    \"'{'\",\n    \"'}'\",\n    \"';'\",\n    \"'+'\",\n    \"'-'\",\n    \"'*'\",\n    \"'/'\",\n    \"'%'\",\n    \"'<='\",\n    \"'<'\",\n    \"'>='\",\n    \"'>'\",\n    \"'=='\",\n    \"'!='\",\n    \"'red'\",\n    \"'orange'\",\n    \"'yellow'\",\n    \"'green'\",\n    \"'blue'\",\n    \"'black'\",\n    \"'white'\",\n    undefined,\n    \"'solid'\",\n    \"'outline'\",\n  ];\n  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [\n    undefined,\n    \"ROTATE\",\n    \"REPEAT\",\n    \"OVERLAY\",\n    \"DRAW\",\n    \"IF\",\n    \"ELSE\",\n    \"FOR\",\n    \"RANGE\",\n    \"CIRCLE\",\n    \"LINE\",\n    \"PETAL\",\n    \"CARDIOID\",\n    \"LIMACON\",\n    \"SET\",\n    \"COMMA\",\n    \"END_FUNCTION\",\n    \"START_BODY\",\n    \"END_BODY\",\n    \"SEMICOLON\",\n    \"ADD\",\n    \"SUB\",\n    \"MULT\",\n    \"DIV\",\n    \"MOD\",\n    \"LTE\",\n    \"LT\",\n    \"GTE\",\n    \"GT\",\n    \"EQ\",\n    \"NEQ\",\n    \"RED\",\n    \"ORANGE\",\n    \"YELLOW\",\n    \"GREEN\",\n    \"BLUE\",\n    \"BLACK\",\n    \"WHITE\",\n    \"HEXCOLOR\",\n    \"SOLID\",\n    \"OUTLINE\",\n    \"NUM\",\n    \"TEXT\",\n    \"SPACE\",\n    \"NEWLINE\",\n  ];\n  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(\n    MandalaLexer._LITERAL_NAMES,\n    MandalaLexer._SYMBOLIC_NAMES,\n    [],\n  );\n\n  // @Override\n  // @NotNull\n  public get vocabulary(): Vocabulary {\n    return MandalaLexer.VOCABULARY;\n  }\n  // tslint:enable:no-trailing-whitespace\n\n  constructor(input: CharStream) {\n    super(input);\n    this._interp = new LexerATNSimulator(MandalaLexer._ATN, this);\n  }\n\n  // @Override\n  public get grammarFileName(): string {\n    return \"MandalaLexer.g4\";\n  }\n\n  // @Override\n  public get ruleNames(): string[] {\n    return MandalaLexer.ruleNames;\n  }\n\n  // @Override\n  public get serializedATN(): string {\n    return MandalaLexer._serializedATN;\n  }\n\n  // @Override\n  public get channelNames(): string[] {\n    return MandalaLexer.channelNames;\n  }\n\n  // @Override\n  public get modeNames(): string[] {\n    return MandalaLexer.modeNames;\n  }\n\n  public static readonly _serializedATN: string =\n    \"\\x03\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\\x02.\\u0156\\b\\x01\" +\n    \"\\x04\\x02\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\" +\n    \"\\x04\\x07\\t\\x07\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\v\\t\\v\\x04\\f\\t\\f\\x04\\r\" +\n    \"\\t\\r\\x04\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x04\\x10\\t\\x10\\x04\\x11\\t\\x11\\x04\\x12\\t\" +\n    \"\\x12\\x04\\x13\\t\\x13\\x04\\x14\\t\\x14\\x04\\x15\\t\\x15\\x04\\x16\\t\\x16\\x04\\x17\\t\" +\n    \"\\x17\\x04\\x18\\t\\x18\\x04\\x19\\t\\x19\\x04\\x1A\\t\\x1A\\x04\\x1B\\t\\x1B\\x04\\x1C\\t\" +\n    '\\x1C\\x04\\x1D\\t\\x1D\\x04\\x1E\\t\\x1E\\x04\\x1F\\t\\x1F\\x04 \\t \\x04!\\t!\\x04\"\\t' +\n    \"\\\"\\x04#\\t#\\x04$\\t$\\x04%\\t%\\x04&\\t&\\x04'\\t'\\x04(\\t(\\x04)\\t)\\x04*\\t*\\x04\" +\n    \"+\\t+\\x04,\\t,\\x04-\\t-\\x03\\x02\\x03\\x02\\x03\\x02\\x03\\x02\\x03\\x02\\x03\\x02\\x03\" +\n    \"\\x02\\x03\\x02\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\\x03\" +\n    \"\\x03\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\" +\n    \"\\x04\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x06\\x03\\x06\\x03\" +\n    \"\\x06\\x03\\x06\\x03\\x07\\x03\\x07\\x03\\x07\\x03\\x07\\x03\\x07\\x03\\b\\x03\\b\\x03\\b\" +\n    \"\\x03\\b\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x03\" +\n    \"\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\" +\n    \"\\n\\x03\\n\\x03\\v\\x03\\v\\x03\\v\\x03\\v\\x03\\v\\x03\\v\\x03\\v\\x03\\v\\x03\\v\\x03\\v\\x03\" +\n    \"\\v\\x03\\v\\x03\\f\\x03\\f\\x03\\f\\x03\\f\\x03\\f\\x03\\f\\x03\\f\\x03\\f\\x03\\f\\x03\\f\\x03\" +\n    \"\\f\\x03\\f\\x03\\f\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\" +\n    \"\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\" +\n    \"\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x03\\x0E\" +\n    \"\\x03\\x0E\\x03\\x0E\\x03\\x0F\\x03\\x0F\\x03\\x10\\x03\\x10\\x03\\x11\\x03\\x11\\x03\\x12\" +\n    \"\\x03\\x12\\x03\\x13\\x03\\x13\\x03\\x14\\x03\\x14\\x03\\x15\\x03\\x15\\x03\\x16\\x03\\x16\" +\n    \"\\x03\\x17\\x03\\x17\\x03\\x18\\x03\\x18\\x03\\x19\\x03\\x19\\x03\\x1A\\x03\\x1A\\x03\\x1A\" +\n    \"\\x03\\x1B\\x03\\x1B\\x03\\x1C\\x03\\x1C\\x03\\x1C\\x03\\x1D\\x03\\x1D\\x03\\x1E\\x03\\x1E\" +\n    \"\\x03\\x1E\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03 \\x03 \\x03 \\x03 \\x03!\\x03!\\x03!\\x03\" +\n    '!\\x03!\\x03!\\x03!\\x03\"\\x03\"\\x03\"\\x03\"\\x03\"\\x03\"\\x03\"\\x03#\\x03#\\x03' +\n    \"#\\x03#\\x03#\\x03#\\x03$\\x03$\\x03$\\x03$\\x03$\\x03%\\x03%\\x03%\\x03%\\x03%\\x03\" +\n    \"%\\x03&\\x03&\\x03&\\x03&\\x03&\\x03&\\x03'\\x03'\\x03'\\x03'\\x03'\\x03'\\x03\" +\n    \"'\\x03'\\x03(\\x03(\\x03(\\x03(\\x03(\\x03(\\x03)\\x03)\\x03)\\x03)\\x03)\\x03)\\x03\" +\n    \")\\x03)\\x03*\\x06*\\u013E\\n*\\r*\\x0E*\\u013F\\x03+\\x03+\\x07+\\u0144\\n+\\f+\\x0E\" +\n    \"+\\u0147\\v+\\x03,\\x06,\\u014A\\n,\\r,\\x0E,\\u014B\\x03,\\x03,\\x03-\\x06-\\u0151\" +\n    \"\\n-\\r-\\x0E-\\u0152\\x03-\\x03-\\x02\\x02\\x02.\\x03\\x02\\x03\\x05\\x02\\x04\\x07\\x02\" +\n    \"\\x05\\t\\x02\\x06\\v\\x02\\x07\\r\\x02\\b\\x0F\\x02\\t\\x11\\x02\\n\\x13\\x02\\v\\x15\\x02\" +\n    \"\\f\\x17\\x02\\r\\x19\\x02\\x0E\\x1B\\x02\\x0F\\x1D\\x02\\x10\\x1F\\x02\\x11!\\x02\\x12\" +\n    \"#\\x02\\x13%\\x02\\x14'\\x02\\x15)\\x02\\x16+\\x02\\x17-\\x02\\x18/\\x02\\x191\\x02\" +\n    '\\x1A3\\x02\\x1B5\\x02\\x1C7\\x02\\x1D9\\x02\\x1E;\\x02\\x1F=\\x02 ?\\x02!A\\x02\"C' +\n    \"\\x02#E\\x02$G\\x02%I\\x02&K\\x02'M\\x02(O\\x02)Q\\x02*S\\x02+U\\x02,W\\x02-Y\\x02\" +\n    \".\\x03\\x02\\b\\x05\\x022;CHch\\x03\\x022;\\x04\\x02C\\\\c|\\x05\\x022;C\\\\c|\\x04\\x02\" +\n    '\\v\\v\"\"\\x04\\x02\\f\\f\\x0F\\x0F\\x02\\u0159\\x02\\x03\\x03\\x02\\x02\\x02\\x02\\x05' +\n    \"\\x03\\x02\\x02\\x02\\x02\\x07\\x03\\x02\\x02\\x02\\x02\\t\\x03\\x02\\x02\\x02\\x02\\v\\x03\" +\n    \"\\x02\\x02\\x02\\x02\\r\\x03\\x02\\x02\\x02\\x02\\x0F\\x03\\x02\\x02\\x02\\x02\\x11\\x03\" +\n    \"\\x02\\x02\\x02\\x02\\x13\\x03\\x02\\x02\\x02\\x02\\x15\\x03\\x02\\x02\\x02\\x02\\x17\\x03\" +\n    \"\\x02\\x02\\x02\\x02\\x19\\x03\\x02\\x02\\x02\\x02\\x1B\\x03\\x02\\x02\\x02\\x02\\x1D\\x03\" +\n    \"\\x02\\x02\\x02\\x02\\x1F\\x03\\x02\\x02\\x02\\x02!\\x03\\x02\\x02\\x02\\x02#\\x03\\x02\" +\n    \"\\x02\\x02\\x02%\\x03\\x02\\x02\\x02\\x02'\\x03\\x02\\x02\\x02\\x02)\\x03\\x02\\x02\\x02\" +\n    \"\\x02+\\x03\\x02\\x02\\x02\\x02-\\x03\\x02\\x02\\x02\\x02/\\x03\\x02\\x02\\x02\\x021\\x03\" +\n    \"\\x02\\x02\\x02\\x023\\x03\\x02\\x02\\x02\\x025\\x03\\x02\\x02\\x02\\x027\\x03\\x02\\x02\" +\n    \"\\x02\\x029\\x03\\x02\\x02\\x02\\x02;\\x03\\x02\\x02\\x02\\x02=\\x03\\x02\\x02\\x02\\x02\" +\n    \"?\\x03\\x02\\x02\\x02\\x02A\\x03\\x02\\x02\\x02\\x02C\\x03\\x02\\x02\\x02\\x02E\\x03\\x02\" +\n    \"\\x02\\x02\\x02G\\x03\\x02\\x02\\x02\\x02I\\x03\\x02\\x02\\x02\\x02K\\x03\\x02\\x02\\x02\" +\n    \"\\x02M\\x03\\x02\\x02\\x02\\x02O\\x03\\x02\\x02\\x02\\x02Q\\x03\\x02\\x02\\x02\\x02S\\x03\" +\n    \"\\x02\\x02\\x02\\x02U\\x03\\x02\\x02\\x02\\x02W\\x03\\x02\\x02\\x02\\x02Y\\x03\\x02\\x02\" +\n    \"\\x02\\x03[\\x03\\x02\\x02\\x02\\x05c\\x03\\x02\\x02\\x02\\x07k\\x03\\x02\\x02\\x02\\t\" +\n    \"t\\x03\\x02\\x02\\x02\\vz\\x03\\x02\\x02\\x02\\r~\\x03\\x02\\x02\\x02\\x0F\\x83\\x03\\x02\" +\n    \"\\x02\\x02\\x11\\x87\\x03\\x02\\x02\\x02\\x13\\x91\\x03\\x02\\x02\\x02\\x15\\x9F\\x03\\x02\" +\n    \"\\x02\\x02\\x17\\xAB\\x03\\x02\\x02\\x02\\x19\\xB8\\x03\\x02\\x02\\x02\\x1B\\xC8\\x03\\x02\" +\n    \"\\x02\\x02\\x1D\\xD7\\x03\\x02\\x02\\x02\\x1F\\xD9\\x03\\x02\\x02\\x02!\\xDB\\x03\\x02\" +\n    \"\\x02\\x02#\\xDD\\x03\\x02\\x02\\x02%\\xDF\\x03\\x02\\x02\\x02'\\xE1\\x03\\x02\\x02\\x02\" +\n    \")\\xE3\\x03\\x02\\x02\\x02+\\xE5\\x03\\x02\\x02\\x02-\\xE7\\x03\\x02\\x02\\x02/\\xE9\\x03\" +\n    \"\\x02\\x02\\x021\\xEB\\x03\\x02\\x02\\x023\\xED\\x03\\x02\\x02\\x025\\xF0\\x03\\x02\\x02\" +\n    \"\\x027\\xF2\\x03\\x02\\x02\\x029\\xF5\\x03\\x02\\x02\\x02;\\xF7\\x03\\x02\\x02\\x02=\\xFA\" +\n    \"\\x03\\x02\\x02\\x02?\\xFD\\x03\\x02\\x02\\x02A\\u0101\\x03\\x02\\x02\\x02C\\u0108\\x03\" +\n    \"\\x02\\x02\\x02E\\u010F\\x03\\x02\\x02\\x02G\\u0115\\x03\\x02\\x02\\x02I\\u011A\\x03\" +\n    \"\\x02\\x02\\x02K\\u0120\\x03\\x02\\x02\\x02M\\u0126\\x03\\x02\\x02\\x02O\\u012E\\x03\" +\n    \"\\x02\\x02\\x02Q\\u0134\\x03\\x02\\x02\\x02S\\u013D\\x03\\x02\\x02\\x02U\\u0141\\x03\" +\n    \"\\x02\\x02\\x02W\\u0149\\x03\\x02\\x02\\x02Y\\u0150\\x03\\x02\\x02\\x02[\\\\\\x07t\\x02\" +\n    \"\\x02\\\\]\\x07q\\x02\\x02]^\\x07v\\x02\\x02^_\\x07c\\x02\\x02_`\\x07v\\x02\\x02`a\\x07\" +\n    \"g\\x02\\x02ab\\x07*\\x02\\x02b\\x04\\x03\\x02\\x02\\x02cd\\x07t\\x02\\x02de\\x07g\\x02\" +\n    \"\\x02ef\\x07r\\x02\\x02fg\\x07g\\x02\\x02gh\\x07c\\x02\\x02hi\\x07v\\x02\\x02ij\\x07\" +\n    \"*\\x02\\x02j\\x06\\x03\\x02\\x02\\x02kl\\x07q\\x02\\x02lm\\x07x\\x02\\x02mn\\x07g\\x02\" +\n    \"\\x02no\\x07t\\x02\\x02op\\x07n\\x02\\x02pq\\x07c\\x02\\x02qr\\x07{\\x02\\x02rs\\x07\" +\n    \"*\\x02\\x02s\\b\\x03\\x02\\x02\\x02tu\\x07f\\x02\\x02uv\\x07t\\x02\\x02vw\\x07c\\x02\" +\n    \"\\x02wx\\x07y\\x02\\x02xy\\x07*\\x02\\x02y\\n\\x03\\x02\\x02\\x02z{\\x07k\\x02\\x02{\" +\n    \"|\\x07h\\x02\\x02|}\\x07*\\x02\\x02}\\f\\x03\\x02\\x02\\x02~\\x7F\\x07g\\x02\\x02\\x7F\" +\n    \"\\x80\\x07n\\x02\\x02\\x80\\x81\\x07u\\x02\\x02\\x81\\x82\\x07g\\x02\\x02\\x82\\x0E\\x03\" +\n    \"\\x02\\x02\\x02\\x83\\x84\\x07h\\x02\\x02\\x84\\x85\\x07q\\x02\\x02\\x85\\x86\\x07t\\x02\" +\n    \"\\x02\\x86\\x10\\x03\\x02\\x02\\x02\\x87\\x88\\x07k\\x02\\x02\\x88\\x89\\x07p\\x02\\x02\" +\n    '\\x89\\x8A\\x07\"\\x02\\x02\\x8A\\x8B\\x07t\\x02\\x02\\x8B\\x8C\\x07c\\x02\\x02\\x8C\\x8D' +\n    \"\\x07p\\x02\\x02\\x8D\\x8E\\x07i\\x02\\x02\\x8E\\x8F\\x07g\\x02\\x02\\x8F\\x90\\x07*\\x02\" +\n    \"\\x02\\x90\\x12\\x03\\x02\\x02\\x02\\x91\\x92\\x07e\\x02\\x02\\x92\\x93\\x07t\\x02\\x02\" +\n    \"\\x93\\x94\\x07g\\x02\\x02\\x94\\x95\\x07c\\x02\\x02\\x95\\x96\\x07v\\x02\\x02\\x96\\x97\" +\n    \"\\x07g\\x02\\x02\\x97\\x98\\x07E\\x02\\x02\\x98\\x99\\x07k\\x02\\x02\\x99\\x9A\\x07t\\x02\" +\n    \"\\x02\\x9A\\x9B\\x07e\\x02\\x02\\x9B\\x9C\\x07n\\x02\\x02\\x9C\\x9D\\x07g\\x02\\x02\\x9D\" +\n    \"\\x9E\\x07*\\x02\\x02\\x9E\\x14\\x03\\x02\\x02\\x02\\x9F\\xA0\\x07e\\x02\\x02\\xA0\\xA1\" +\n    \"\\x07t\\x02\\x02\\xA1\\xA2\\x07g\\x02\\x02\\xA2\\xA3\\x07c\\x02\\x02\\xA3\\xA4\\x07v\\x02\" +\n    \"\\x02\\xA4\\xA5\\x07g\\x02\\x02\\xA5\\xA6\\x07N\\x02\\x02\\xA6\\xA7\\x07k\\x02\\x02\\xA7\" +\n    \"\\xA8\\x07p\\x02\\x02\\xA8\\xA9\\x07g\\x02\\x02\\xA9\\xAA\\x07*\\x02\\x02\\xAA\\x16\\x03\" +\n    \"\\x02\\x02\\x02\\xAB\\xAC\\x07e\\x02\\x02\\xAC\\xAD\\x07t\\x02\\x02\\xAD\\xAE\\x07g\\x02\" +\n    \"\\x02\\xAE\\xAF\\x07c\\x02\\x02\\xAF\\xB0\\x07v\\x02\\x02\\xB0\\xB1\\x07g\\x02\\x02\\xB1\" +\n    \"\\xB2\\x07R\\x02\\x02\\xB2\\xB3\\x07g\\x02\\x02\\xB3\\xB4\\x07v\\x02\\x02\\xB4\\xB5\\x07\" +\n    \"c\\x02\\x02\\xB5\\xB6\\x07n\\x02\\x02\\xB6\\xB7\\x07*\\x02\\x02\\xB7\\x18\\x03\\x02\\x02\" +\n    \"\\x02\\xB8\\xB9\\x07e\\x02\\x02\\xB9\\xBA\\x07t\\x02\\x02\\xBA\\xBB\\x07g\\x02\\x02\\xBB\" +\n    \"\\xBC\\x07c\\x02\\x02\\xBC\\xBD\\x07v\\x02\\x02\\xBD\\xBE\\x07g\\x02\\x02\\xBE\\xBF\\x07\" +\n    \"E\\x02\\x02\\xBF\\xC0\\x07c\\x02\\x02\\xC0\\xC1\\x07t\\x02\\x02\\xC1\\xC2\\x07f\\x02\\x02\" +\n    \"\\xC2\\xC3\\x07k\\x02\\x02\\xC3\\xC4\\x07q\\x02\\x02\\xC4\\xC5\\x07k\\x02\\x02\\xC5\\xC6\" +\n    \"\\x07f\\x02\\x02\\xC6\\xC7\\x07*\\x02\\x02\\xC7\\x1A\\x03\\x02\\x02\\x02\\xC8\\xC9\\x07\" +\n    \"e\\x02\\x02\\xC9\\xCA\\x07t\\x02\\x02\\xCA\\xCB\\x07g\\x02\\x02\\xCB\\xCC\\x07c\\x02\\x02\" +\n    \"\\xCC\\xCD\\x07v\\x02\\x02\\xCD\\xCE\\x07g\\x02\\x02\\xCE\\xCF\\x07N\\x02\\x02\\xCF\\xD0\" +\n    \"\\x07k\\x02\\x02\\xD0\\xD1\\x07o\\x02\\x02\\xD1\\xD2\\x07c\\x02\\x02\\xD2\\xD3\\x07e\\x02\" +\n    \"\\x02\\xD3\\xD4\\x07q\\x02\\x02\\xD4\\xD5\\x07p\\x02\\x02\\xD5\\xD6\\x07*\\x02\\x02\\xD6\" +\n    \"\\x1C\\x03\\x02\\x02\\x02\\xD7\\xD8\\x07?\\x02\\x02\\xD8\\x1E\\x03\\x02\\x02\\x02\\xD9\" +\n    '\\xDA\\x07.\\x02\\x02\\xDA \\x03\\x02\\x02\\x02\\xDB\\xDC\\x07+\\x02\\x02\\xDC\"\\x03' +\n    \"\\x02\\x02\\x02\\xDD\\xDE\\x07}\\x02\\x02\\xDE$\\x03\\x02\\x02\\x02\\xDF\\xE0\\x07\\x7F\" +\n    \"\\x02\\x02\\xE0&\\x03\\x02\\x02\\x02\\xE1\\xE2\\x07=\\x02\\x02\\xE2(\\x03\\x02\\x02\\x02\" +\n    \"\\xE3\\xE4\\x07-\\x02\\x02\\xE4*\\x03\\x02\\x02\\x02\\xE5\\xE6\\x07/\\x02\\x02\\xE6,\\x03\" +\n    \"\\x02\\x02\\x02\\xE7\\xE8\\x07,\\x02\\x02\\xE8.\\x03\\x02\\x02\\x02\\xE9\\xEA\\x071\\x02\" +\n    \"\\x02\\xEA0\\x03\\x02\\x02\\x02\\xEB\\xEC\\x07'\\x02\\x02\\xEC2\\x03\\x02\\x02\\x02\\xED\" +\n    \"\\xEE\\x07>\\x02\\x02\\xEE\\xEF\\x07?\\x02\\x02\\xEF4\\x03\\x02\\x02\\x02\\xF0\\xF1\\x07\" +\n    \">\\x02\\x02\\xF16\\x03\\x02\\x02\\x02\\xF2\\xF3\\x07@\\x02\\x02\\xF3\\xF4\\x07?\\x02\\x02\" +\n    \"\\xF48\\x03\\x02\\x02\\x02\\xF5\\xF6\\x07@\\x02\\x02\\xF6:\\x03\\x02\\x02\\x02\\xF7\\xF8\" +\n    \"\\x07?\\x02\\x02\\xF8\\xF9\\x07?\\x02\\x02\\xF9<\\x03\\x02\\x02\\x02\\xFA\\xFB\\x07#\\x02\" +\n    \"\\x02\\xFB\\xFC\\x07?\\x02\\x02\\xFC>\\x03\\x02\\x02\\x02\\xFD\\xFE\\x07t\\x02\\x02\\xFE\" +\n    \"\\xFF\\x07g\\x02\\x02\\xFF\\u0100\\x07f\\x02\\x02\\u0100@\\x03\\x02\\x02\\x02\\u0101\" +\n    \"\\u0102\\x07q\\x02\\x02\\u0102\\u0103\\x07t\\x02\\x02\\u0103\\u0104\\x07c\\x02\\x02\" +\n    \"\\u0104\\u0105\\x07p\\x02\\x02\\u0105\\u0106\\x07i\\x02\\x02\\u0106\\u0107\\x07g\\x02\" +\n    \"\\x02\\u0107B\\x03\\x02\\x02\\x02\\u0108\\u0109\\x07{\\x02\\x02\\u0109\\u010A\\x07g\" +\n    \"\\x02\\x02\\u010A\\u010B\\x07n\\x02\\x02\\u010B\\u010C\\x07n\\x02\\x02\\u010C\\u010D\" +\n    \"\\x07q\\x02\\x02\\u010D\\u010E\\x07y\\x02\\x02\\u010ED\\x03\\x02\\x02\\x02\\u010F\\u0110\" +\n    \"\\x07i\\x02\\x02\\u0110\\u0111\\x07t\\x02\\x02\\u0111\\u0112\\x07g\\x02\\x02\\u0112\" +\n    \"\\u0113\\x07g\\x02\\x02\\u0113\\u0114\\x07p\\x02\\x02\\u0114F\\x03\\x02\\x02\\x02\\u0115\" +\n    \"\\u0116\\x07d\\x02\\x02\\u0116\\u0117\\x07n\\x02\\x02\\u0117\\u0118\\x07w\\x02\\x02\" +\n    \"\\u0118\\u0119\\x07g\\x02\\x02\\u0119H\\x03\\x02\\x02\\x02\\u011A\\u011B\\x07d\\x02\" +\n    \"\\x02\\u011B\\u011C\\x07n\\x02\\x02\\u011C\\u011D\\x07c\\x02\\x02\\u011D\\u011E\\x07\" +\n    \"e\\x02\\x02\\u011E\\u011F\\x07m\\x02\\x02\\u011FJ\\x03\\x02\\x02\\x02\\u0120\\u0121\" +\n    \"\\x07y\\x02\\x02\\u0121\\u0122\\x07j\\x02\\x02\\u0122\\u0123\\x07k\\x02\\x02\\u0123\" +\n    \"\\u0124\\x07v\\x02\\x02\\u0124\\u0125\\x07g\\x02\\x02\\u0125L\\x03\\x02\\x02\\x02\\u0126\" +\n    \"\\u0127\\x07%\\x02\\x02\\u0127\\u0128\\t\\x02\\x02\\x02\\u0128\\u0129\\t\\x02\\x02\\x02\" +\n    \"\\u0129\\u012A\\t\\x02\\x02\\x02\\u012A\\u012B\\t\\x02\\x02\\x02\\u012B\\u012C\\t\\x02\" +\n    \"\\x02\\x02\\u012C\\u012D\\t\\x02\\x02\\x02\\u012DN\\x03\\x02\\x02\\x02\\u012E\\u012F\" +\n    \"\\x07u\\x02\\x02\\u012F\\u0130\\x07q\\x02\\x02\\u0130\\u0131\\x07n\\x02\\x02\\u0131\" +\n    \"\\u0132\\x07k\\x02\\x02\\u0132\\u0133\\x07f\\x02\\x02\\u0133P\\x03\\x02\\x02\\x02\\u0134\" +\n    \"\\u0135\\x07q\\x02\\x02\\u0135\\u0136\\x07w\\x02\\x02\\u0136\\u0137\\x07v\\x02\\x02\" +\n    \"\\u0137\\u0138\\x07n\\x02\\x02\\u0138\\u0139\\x07k\\x02\\x02\\u0139\\u013A\\x07p\\x02\" +\n    \"\\x02\\u013A\\u013B\\x07g\\x02\\x02\\u013BR\\x03\\x02\\x02\\x02\\u013C\\u013E\\t\\x03\" +\n    \"\\x02\\x02\\u013D\\u013C\\x03\\x02\\x02\\x02\\u013E\\u013F\\x03\\x02\\x02\\x02\\u013F\" +\n    \"\\u013D\\x03\\x02\\x02\\x02\\u013F\\u0140\\x03\\x02\\x02\\x02\\u0140T\\x03\\x02\\x02\" +\n    \"\\x02\\u0141\\u0145\\t\\x04\\x02\\x02\\u0142\\u0144\\t\\x05\\x02\\x02\\u0143\\u0142\\x03\" +\n    \"\\x02\\x02\\x02\\u0144\\u0147\\x03\\x02\\x02\\x02\\u0145\\u0143\\x03\\x02\\x02\\x02\\u0145\" +\n    \"\\u0146\\x03\\x02\\x02\\x02\\u0146V\\x03\\x02\\x02\\x02\\u0147\\u0145\\x03\\x02\\x02\" +\n    \"\\x02\\u0148\\u014A\\t\\x06\\x02\\x02\\u0149\\u0148\\x03\\x02\\x02\\x02\\u014A\\u014B\" +\n    \"\\x03\\x02\\x02\\x02\\u014B\\u0149\\x03\\x02\\x02\\x02\\u014B\\u014C\\x03\\x02\\x02\\x02\" +\n    \"\\u014C\\u014D\\x03\\x02\\x02\\x02\\u014D\\u014E\\b,\\x02\\x02\\u014EX\\x03\\x02\\x02\" +\n    \"\\x02\\u014F\\u0151\\t\\x07\\x02\\x02\\u0150\\u014F\\x03\\x02\\x02\\x02\\u0151\\u0152\" +\n    \"\\x03\\x02\\x02\\x02\\u0152\\u0150\\x03\\x02\\x02\\x02\\u0152\\u0153\\x03\\x02\\x02\\x02\" +\n    \"\\u0153\\u0154\\x03\\x02\\x02\\x02\\u0154\\u0155\\b-\\x02\\x02\\u0155Z\\x03\\x02\\x02\" +\n    \"\\x02\\x07\\x02\\u013F\\u0145\\u014B\\u0152\\x03\\x02\\x03\\x02\";\n  public static __ATN: ATN;\n  public static get _ATN(): ATN {\n    if (!MandalaLexer.__ATN) {\n      MandalaLexer.__ATN = new ATNDeserializer().deserialize(\n        Utils.toCharArray(MandalaLexer._serializedATN),\n      );\n    }\n\n    return MandalaLexer.__ATN;\n  }\n}\n","// Generated from src/parser/MandalaParser.g4 by ANTLR 4.9.0-SNAPSHOT\n\nimport { ATN } from \"antlr4ts/atn/ATN\";\nimport { ATNDeserializer } from \"antlr4ts/atn/ATNDeserializer\";\nimport { FailedPredicateException } from \"antlr4ts/FailedPredicateException\";\nimport { NotNull } from \"antlr4ts/Decorators\";\nimport { NoViableAltException } from \"antlr4ts/NoViableAltException\";\nimport { Override } from \"antlr4ts/Decorators\";\nimport { Parser } from \"antlr4ts/Parser\";\nimport { ParserRuleContext } from \"antlr4ts/ParserRuleContext\";\nimport { ParserATNSimulator } from \"antlr4ts/atn/ParserATNSimulator\";\nimport { ParseTreeListener } from \"antlr4ts/tree/ParseTreeListener\";\nimport { ParseTreeVisitor } from \"antlr4ts/tree/ParseTreeVisitor\";\nimport { RecognitionException } from \"antlr4ts/RecognitionException\";\nimport { RuleContext } from \"antlr4ts/RuleContext\";\n//import { RuleVersion } from \"antlr4ts/RuleVersion\";\nimport { TerminalNode } from \"antlr4ts/tree/TerminalNode\";\nimport { Token } from \"antlr4ts/Token\";\nimport { TokenStream } from \"antlr4ts/TokenStream\";\nimport { Vocabulary } from \"antlr4ts/Vocabulary\";\nimport { VocabularyImpl } from \"antlr4ts/VocabularyImpl\";\n\nimport * as Utils from \"antlr4ts/misc/Utils\";\n\nimport { MandalaParserListener } from \"./MandalaParserListener\";\nimport { MandalaParserVisitor } from \"./MandalaParserVisitor\";\n\nexport class MandalaParser extends Parser {\n  public static readonly ROTATE = 1;\n  public static readonly REPEAT = 2;\n  public static readonly OVERLAY = 3;\n  public static readonly DRAW = 4;\n  public static readonly IF = 5;\n  public static readonly ELSE = 6;\n  public static readonly FOR = 7;\n  public static readonly RANGE = 8;\n  public static readonly CIRCLE = 9;\n  public static readonly LINE = 10;\n  public static readonly PETAL = 11;\n  public static readonly CARDIOID = 12;\n  public static readonly LIMACON = 13;\n  public static readonly SET = 14;\n  public static readonly COMMA = 15;\n  public static readonly END_FUNCTION = 16;\n  public static readonly START_BODY = 17;\n  public static readonly END_BODY = 18;\n  public static readonly SEMICOLON = 19;\n  public static readonly ADD = 20;\n  public static readonly SUB = 21;\n  public static readonly MULT = 22;\n  public static readonly DIV = 23;\n  public static readonly MOD = 24;\n  public static readonly LTE = 25;\n  public static readonly LT = 26;\n  public static readonly GTE = 27;\n  public static readonly GT = 28;\n  public static readonly EQ = 29;\n  public static readonly NEQ = 30;\n  public static readonly RED = 31;\n  public static readonly ORANGE = 32;\n  public static readonly YELLOW = 33;\n  public static readonly GREEN = 34;\n  public static readonly BLUE = 35;\n  public static readonly BLACK = 36;\n  public static readonly WHITE = 37;\n  public static readonly HEXCOLOR = 38;\n  public static readonly SOLID = 39;\n  public static readonly OUTLINE = 40;\n  public static readonly NUM = 41;\n  public static readonly TEXT = 42;\n  public static readonly SPACE = 43;\n  public static readonly NEWLINE = 44;\n  public static readonly RULE_program = 0;\n  public static readonly RULE_statement = 1;\n  public static readonly RULE_statements = 2;\n  public static readonly RULE_assignment = 3;\n  public static readonly RULE_draw = 4;\n  public static readonly RULE_object = 5;\n  public static readonly RULE_shape = 6;\n  public static readonly RULE_arithexp = 7;\n  public static readonly RULE_compexp = 8;\n  public static readonly RULE_forloop = 9;\n  public static readonly RULE_ifblock = 10;\n  public static readonly RULE_shapeConstructor = 11;\n  public static readonly RULE_transformation = 12;\n  public static readonly RULE_rotate = 13;\n  public static readonly RULE_repeat = 14;\n  public static readonly RULE_overlay = 15;\n  public static readonly RULE_circle = 16;\n  public static readonly RULE_line = 17;\n  public static readonly RULE_petal = 18;\n  public static readonly RULE_cardioid = 19;\n  public static readonly RULE_limacon = 20;\n  public static readonly RULE_color = 21;\n  public static readonly RULE_shapeMode = 22;\n  public static readonly RULE_variable = 23;\n  public static readonly RULE_cop = 24;\n  public static readonly RULE_aop = 25;\n  // tslint:disable:no-trailing-whitespace\n  public static readonly ruleNames: string[] = [\n    \"program\",\n    \"statement\",\n    \"statements\",\n    \"assignment\",\n    \"draw\",\n    \"object\",\n    \"shape\",\n    \"arithexp\",\n    \"compexp\",\n    \"forloop\",\n    \"ifblock\",\n    \"shapeConstructor\",\n    \"transformation\",\n    \"rotate\",\n    \"repeat\",\n    \"overlay\",\n    \"circle\",\n    \"line\",\n    \"petal\",\n    \"cardioid\",\n    \"limacon\",\n    \"color\",\n    \"shapeMode\",\n    \"variable\",\n    \"cop\",\n    \"aop\",\n  ];\n\n  private static readonly _LITERAL_NAMES: Array<string | undefined> = [\n    undefined,\n    \"'rotate('\",\n    \"'repeat('\",\n    \"'overlay('\",\n    \"'draw('\",\n    \"'if('\",\n    \"'else'\",\n    \"'for'\",\n    \"'in range('\",\n    \"'createCircle('\",\n    \"'createLine('\",\n    \"'createPetal('\",\n    \"'createCardioid('\",\n    \"'createLimacon('\",\n    \"'='\",\n    \"','\",\n    \"')'\",\n    \"'{'\",\n    \"'}'\",\n    \"';'\",\n    \"'+'\",\n    \"'-'\",\n    \"'*'\",\n    \"'/'\",\n    \"'%'\",\n    \"'<='\",\n    \"'<'\",\n    \"'>='\",\n    \"'>'\",\n    \"'=='\",\n    \"'!='\",\n    \"'red'\",\n    \"'orange'\",\n    \"'yellow'\",\n    \"'green'\",\n    \"'blue'\",\n    \"'black'\",\n    \"'white'\",\n    undefined,\n    \"'solid'\",\n    \"'outline'\",\n  ];\n  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [\n    undefined,\n    \"ROTATE\",\n    \"REPEAT\",\n    \"OVERLAY\",\n    \"DRAW\",\n    \"IF\",\n    \"ELSE\",\n    \"FOR\",\n    \"RANGE\",\n    \"CIRCLE\",\n    \"LINE\",\n    \"PETAL\",\n    \"CARDIOID\",\n    \"LIMACON\",\n    \"SET\",\n    \"COMMA\",\n    \"END_FUNCTION\",\n    \"START_BODY\",\n    \"END_BODY\",\n    \"SEMICOLON\",\n    \"ADD\",\n    \"SUB\",\n    \"MULT\",\n    \"DIV\",\n    \"MOD\",\n    \"LTE\",\n    \"LT\",\n    \"GTE\",\n    \"GT\",\n    \"EQ\",\n    \"NEQ\",\n    \"RED\",\n    \"ORANGE\",\n    \"YELLOW\",\n    \"GREEN\",\n    \"BLUE\",\n    \"BLACK\",\n    \"WHITE\",\n    \"HEXCOLOR\",\n    \"SOLID\",\n    \"OUTLINE\",\n    \"NUM\",\n    \"TEXT\",\n    \"SPACE\",\n    \"NEWLINE\",\n  ];\n  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(\n    MandalaParser._LITERAL_NAMES,\n    MandalaParser._SYMBOLIC_NAMES,\n    [],\n  );\n\n  // @Override\n  // @NotNull\n  public get vocabulary(): Vocabulary {\n    return MandalaParser.VOCABULARY;\n  }\n  // tslint:enable:no-trailing-whitespace\n\n  // @Override\n  public get grammarFileName(): string {\n    return \"MandalaParser.g4\";\n  }\n\n  // @Override\n  public get ruleNames(): string[] {\n    return MandalaParser.ruleNames;\n  }\n\n  // @Override\n  public get serializedATN(): string {\n    return MandalaParser._serializedATN;\n  }\n\n  protected createFailedPredicateException(\n    predicate?: string,\n    message?: string,\n  ): FailedPredicateException {\n    return new FailedPredicateException(this, predicate, message);\n  }\n\n  constructor(input: TokenStream) {\n    super(input);\n    this._interp = new ParserATNSimulator(MandalaParser._ATN, this);\n  }\n  // @RuleVersion(0)\n  public program(): ProgramContext {\n    const _localctx: ProgramContext = new ProgramContext(this._ctx, this.state);\n    this.enterRule(_localctx, 0, MandalaParser.RULE_program);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 52;\n        this.statements();\n        this.state = 53;\n        this.draw();\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public statement(): StatementContext {\n    const _localctx: StatementContext = new StatementContext(\n      this._ctx,\n      this.state,\n    );\n    this.enterRule(_localctx, 2, MandalaParser.RULE_statement);\n    try {\n      this.state = 58;\n      this._errHandler.sync(this);\n      switch (this._input.LA(1)) {\n        case MandalaParser.TEXT:\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 55;\n            this.assignment();\n          }\n          break;\n        case MandalaParser.FOR:\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 56;\n            this.forloop();\n          }\n          break;\n        case MandalaParser.IF:\n          this.enterOuterAlt(_localctx, 3);\n          {\n            this.state = 57;\n            this.ifblock();\n          }\n          break;\n        default:\n          throw new NoViableAltException(this);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public statements(): StatementsContext {\n    const _localctx: StatementsContext = new StatementsContext(\n      this._ctx,\n      this.state,\n    );\n    this.enterRule(_localctx, 4, MandalaParser.RULE_statements);\n    let _la: number;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 63;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        while (\n          _la === MandalaParser.IF ||\n          _la === MandalaParser.FOR ||\n          _la === MandalaParser.TEXT\n        ) {\n          {\n            {\n              this.state = 60;\n              this.statement();\n            }\n          }\n          this.state = 65;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public assignment(): AssignmentContext {\n    const _localctx: AssignmentContext = new AssignmentContext(\n      this._ctx,\n      this.state,\n    );\n    this.enterRule(_localctx, 6, MandalaParser.RULE_assignment);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 66;\n        this.match(MandalaParser.TEXT);\n        this.state = 67;\n        this.match(MandalaParser.SET);\n        this.state = 70;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n          case MandalaParser.ROTATE:\n          case MandalaParser.REPEAT:\n          case MandalaParser.OVERLAY:\n          case MandalaParser.CIRCLE:\n          case MandalaParser.LINE:\n          case MandalaParser.PETAL:\n          case MandalaParser.CARDIOID:\n          case MandalaParser.LIMACON:\n            {\n              this.state = 68;\n              this.shape();\n            }\n            break;\n          case MandalaParser.NUM:\n          case MandalaParser.TEXT:\n            {\n              this.state = 69;\n              this.arithexp();\n            }\n            break;\n          default:\n            throw new NoViableAltException(this);\n        }\n        this.state = 72;\n        this.match(MandalaParser.SEMICOLON);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public draw(): DrawContext {\n    const _localctx: DrawContext = new DrawContext(this._ctx, this.state);\n    this.enterRule(_localctx, 8, MandalaParser.RULE_draw);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 74;\n        this.match(MandalaParser.DRAW);\n        this.state = 75;\n        this.object();\n        this.state = 76;\n        this.match(MandalaParser.END_FUNCTION);\n        this.state = 77;\n        this.match(MandalaParser.SEMICOLON);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public object(): ObjectContext {\n    const _localctx: ObjectContext = new ObjectContext(this._ctx, this.state);\n    this.enterRule(_localctx, 10, MandalaParser.RULE_object);\n    try {\n      this.state = 81;\n      this._errHandler.sync(this);\n      switch (this._input.LA(1)) {\n        case MandalaParser.TEXT:\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 79;\n            this.variable();\n          }\n          break;\n        case MandalaParser.ROTATE:\n        case MandalaParser.REPEAT:\n        case MandalaParser.OVERLAY:\n        case MandalaParser.CIRCLE:\n        case MandalaParser.LINE:\n        case MandalaParser.PETAL:\n        case MandalaParser.CARDIOID:\n        case MandalaParser.LIMACON:\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 80;\n            this.shape();\n          }\n          break;\n        default:\n          throw new NoViableAltException(this);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public shape(): ShapeContext {\n    const _localctx: ShapeContext = new ShapeContext(this._ctx, this.state);\n    this.enterRule(_localctx, 12, MandalaParser.RULE_shape);\n    try {\n      this.state = 85;\n      this._errHandler.sync(this);\n      switch (this._input.LA(1)) {\n        case MandalaParser.CIRCLE:\n        case MandalaParser.LINE:\n        case MandalaParser.PETAL:\n        case MandalaParser.CARDIOID:\n        case MandalaParser.LIMACON:\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 83;\n            this.shapeConstructor();\n          }\n          break;\n        case MandalaParser.ROTATE:\n        case MandalaParser.REPEAT:\n        case MandalaParser.OVERLAY:\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 84;\n            this.transformation();\n          }\n          break;\n        default:\n          throw new NoViableAltException(this);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public arithexp(): ArithexpContext {\n    const _localctx: ArithexpContext = new ArithexpContext(\n      this._ctx,\n      this.state,\n    );\n    this.enterRule(_localctx, 14, MandalaParser.RULE_arithexp);\n    let _la: number;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 89;\n        this._errHandler.sync(this);\n        switch (this._input.LA(1)) {\n          case MandalaParser.TEXT:\n            {\n              this.state = 87;\n              this.variable();\n            }\n            break;\n          case MandalaParser.NUM:\n            {\n              this.state = 88;\n              this.match(MandalaParser.NUM);\n            }\n            break;\n          default:\n            throw new NoViableAltException(this);\n        }\n        this.state = 94;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (\n          (_la & ~0x1f) === 0 &&\n          ((1 << _la) &\n            ((1 << MandalaParser.ADD) |\n              (1 << MandalaParser.SUB) |\n              (1 << MandalaParser.MULT) |\n              (1 << MandalaParser.DIV) |\n              (1 << MandalaParser.MOD))) !==\n            0\n        ) {\n          {\n            this.state = 91;\n            this.aop();\n            this.state = 92;\n            this.arithexp();\n          }\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public compexp(): CompexpContext {\n    const _localctx: CompexpContext = new CompexpContext(this._ctx, this.state);\n    this.enterRule(_localctx, 16, MandalaParser.RULE_compexp);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 96;\n        this.arithexp();\n        this.state = 97;\n        this.cop();\n        this.state = 98;\n        this.arithexp();\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public forloop(): ForloopContext {\n    const _localctx: ForloopContext = new ForloopContext(this._ctx, this.state);\n    this.enterRule(_localctx, 18, MandalaParser.RULE_forloop);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 100;\n        this.match(MandalaParser.FOR);\n        this.state = 101;\n        this.variable();\n        this.state = 102;\n        this.match(MandalaParser.RANGE);\n        this.state = 103;\n        this.arithexp();\n        this.state = 104;\n        this.match(MandalaParser.COMMA);\n        this.state = 105;\n        this.arithexp();\n        this.state = 106;\n        this.match(MandalaParser.END_FUNCTION);\n        this.state = 107;\n        this.match(MandalaParser.START_BODY);\n        this.state = 108;\n        this.statements();\n        this.state = 109;\n        this.match(MandalaParser.END_BODY);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public ifblock(): IfblockContext {\n    const _localctx: IfblockContext = new IfblockContext(this._ctx, this.state);\n    this.enterRule(_localctx, 20, MandalaParser.RULE_ifblock);\n    let _la: number;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 111;\n        this.match(MandalaParser.IF);\n        this.state = 112;\n        this.compexp();\n        this.state = 113;\n        this.match(MandalaParser.END_FUNCTION);\n        this.state = 114;\n        this.match(MandalaParser.START_BODY);\n        this.state = 115;\n        _localctx._thenblock = this.statements();\n        this.state = 116;\n        this.match(MandalaParser.END_BODY);\n        this.state = 122;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        if (_la === MandalaParser.ELSE) {\n          {\n            this.state = 117;\n            this.match(MandalaParser.ELSE);\n            this.state = 118;\n            this.match(MandalaParser.START_BODY);\n            this.state = 119;\n            _localctx._elseblock = this.statements();\n            this.state = 120;\n            this.match(MandalaParser.END_BODY);\n          }\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public shapeConstructor(): ShapeConstructorContext {\n    const _localctx: ShapeConstructorContext = new ShapeConstructorContext(\n      this._ctx,\n      this.state,\n    );\n    this.enterRule(_localctx, 22, MandalaParser.RULE_shapeConstructor);\n    try {\n      this.state = 129;\n      this._errHandler.sync(this);\n      switch (this._input.LA(1)) {\n        case MandalaParser.CIRCLE:\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 124;\n            this.circle();\n          }\n          break;\n        case MandalaParser.LINE:\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 125;\n            this.line();\n          }\n          break;\n        case MandalaParser.PETAL:\n          this.enterOuterAlt(_localctx, 3);\n          {\n            this.state = 126;\n            this.petal();\n          }\n          break;\n        case MandalaParser.CARDIOID:\n          this.enterOuterAlt(_localctx, 4);\n          {\n            this.state = 127;\n            this.cardioid();\n          }\n          break;\n        case MandalaParser.LIMACON:\n          this.enterOuterAlt(_localctx, 5);\n          {\n            this.state = 128;\n            this.limacon();\n          }\n          break;\n        default:\n          throw new NoViableAltException(this);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public transformation(): TransformationContext {\n    const _localctx: TransformationContext = new TransformationContext(\n      this._ctx,\n      this.state,\n    );\n    this.enterRule(_localctx, 24, MandalaParser.RULE_transformation);\n    try {\n      this.state = 134;\n      this._errHandler.sync(this);\n      switch (this._input.LA(1)) {\n        case MandalaParser.ROTATE:\n          this.enterOuterAlt(_localctx, 1);\n          {\n            this.state = 131;\n            this.rotate();\n          }\n          break;\n        case MandalaParser.REPEAT:\n          this.enterOuterAlt(_localctx, 2);\n          {\n            this.state = 132;\n            this.repeat();\n          }\n          break;\n        case MandalaParser.OVERLAY:\n          this.enterOuterAlt(_localctx, 3);\n          {\n            this.state = 133;\n            this.overlay();\n          }\n          break;\n        default:\n          throw new NoViableAltException(this);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public rotate(): RotateContext {\n    const _localctx: RotateContext = new RotateContext(this._ctx, this.state);\n    this.enterRule(_localctx, 26, MandalaParser.RULE_rotate);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 136;\n        this.match(MandalaParser.ROTATE);\n        this.state = 137;\n        this.object();\n        this.state = 138;\n        this.match(MandalaParser.COMMA);\n        this.state = 139;\n        this.arithexp();\n        this.state = 140;\n        this.match(MandalaParser.END_FUNCTION);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public repeat(): RepeatContext {\n    const _localctx: RepeatContext = new RepeatContext(this._ctx, this.state);\n    this.enterRule(_localctx, 28, MandalaParser.RULE_repeat);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 142;\n        this.match(MandalaParser.REPEAT);\n        this.state = 143;\n        this.object();\n        this.state = 144;\n        this.match(MandalaParser.COMMA);\n        this.state = 145;\n        this.arithexp();\n        this.state = 146;\n        this.match(MandalaParser.COMMA);\n        this.state = 147;\n        this.arithexp();\n        this.state = 148;\n        this.match(MandalaParser.END_FUNCTION);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public overlay(): OverlayContext {\n    const _localctx: OverlayContext = new OverlayContext(this._ctx, this.state);\n    this.enterRule(_localctx, 30, MandalaParser.RULE_overlay);\n    let _la: number;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 150;\n        this.match(MandalaParser.OVERLAY);\n        this.state = 151;\n        this.object();\n        this.state = 154;\n        this._errHandler.sync(this);\n        _la = this._input.LA(1);\n        do {\n          {\n            {\n              this.state = 152;\n              this.match(MandalaParser.COMMA);\n              this.state = 153;\n              this.object();\n            }\n          }\n          this.state = 156;\n          this._errHandler.sync(this);\n          _la = this._input.LA(1);\n        } while (_la === MandalaParser.COMMA);\n        this.state = 158;\n        this.match(MandalaParser.END_FUNCTION);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public circle(): CircleContext {\n    const _localctx: CircleContext = new CircleContext(this._ctx, this.state);\n    this.enterRule(_localctx, 32, MandalaParser.RULE_circle);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 160;\n        this.match(MandalaParser.CIRCLE);\n        this.state = 161;\n        this.arithexp();\n        this.state = 162;\n        this.match(MandalaParser.COMMA);\n        this.state = 163;\n        this.color();\n        this.state = 164;\n        this.match(MandalaParser.COMMA);\n        this.state = 165;\n        this.shapeMode();\n        this.state = 166;\n        this.match(MandalaParser.END_FUNCTION);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public line(): LineContext {\n    const _localctx: LineContext = new LineContext(this._ctx, this.state);\n    this.enterRule(_localctx, 34, MandalaParser.RULE_line);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 168;\n        this.match(MandalaParser.LINE);\n        this.state = 169;\n        this.arithexp();\n        this.state = 170;\n        this.match(MandalaParser.COMMA);\n        this.state = 171;\n        this.color();\n        this.state = 172;\n        this.match(MandalaParser.END_FUNCTION);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public petal(): PetalContext {\n    const _localctx: PetalContext = new PetalContext(this._ctx, this.state);\n    this.enterRule(_localctx, 36, MandalaParser.RULE_petal);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 174;\n        this.match(MandalaParser.PETAL);\n        this.state = 175;\n        this.arithexp();\n        this.state = 176;\n        this.match(MandalaParser.COMMA);\n        this.state = 177;\n        this.color();\n        this.state = 178;\n        this.match(MandalaParser.COMMA);\n        this.state = 179;\n        this.shapeMode();\n        this.state = 180;\n        this.match(MandalaParser.END_FUNCTION);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public cardioid(): CardioidContext {\n    const _localctx: CardioidContext = new CardioidContext(\n      this._ctx,\n      this.state,\n    );\n    this.enterRule(_localctx, 38, MandalaParser.RULE_cardioid);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 182;\n        this.match(MandalaParser.CARDIOID);\n        this.state = 183;\n        this.arithexp();\n        this.state = 184;\n        this.match(MandalaParser.COMMA);\n        this.state = 185;\n        this.color();\n        this.state = 186;\n        this.match(MandalaParser.COMMA);\n        this.state = 187;\n        this.shapeMode();\n        this.state = 188;\n        this.match(MandalaParser.END_FUNCTION);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public limacon(): LimaconContext {\n    const _localctx: LimaconContext = new LimaconContext(this._ctx, this.state);\n    this.enterRule(_localctx, 40, MandalaParser.RULE_limacon);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 190;\n        this.match(MandalaParser.LIMACON);\n        this.state = 191;\n        this.arithexp();\n        this.state = 192;\n        this.match(MandalaParser.COMMA);\n        this.state = 193;\n        this.color();\n        this.state = 194;\n        this.match(MandalaParser.COMMA);\n        this.state = 195;\n        this.shapeMode();\n        this.state = 196;\n        this.match(MandalaParser.END_FUNCTION);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public color(): ColorContext {\n    const _localctx: ColorContext = new ColorContext(this._ctx, this.state);\n    this.enterRule(_localctx, 42, MandalaParser.RULE_color);\n    let _la: number;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 198;\n        _la = this._input.LA(1);\n        if (\n          !(\n            ((_la - 31) & ~0x1f) === 0 &&\n            ((1 << (_la - 31)) &\n              ((1 << (MandalaParser.RED - 31)) |\n                (1 << (MandalaParser.ORANGE - 31)) |\n                (1 << (MandalaParser.YELLOW - 31)) |\n                (1 << (MandalaParser.GREEN - 31)) |\n                (1 << (MandalaParser.BLUE - 31)) |\n                (1 << (MandalaParser.BLACK - 31)) |\n                (1 << (MandalaParser.WHITE - 31)) |\n                (1 << (MandalaParser.HEXCOLOR - 31)))) !==\n              0\n          )\n        ) {\n          this._errHandler.recoverInline(this);\n        } else {\n          if (this._input.LA(1) === Token.EOF) {\n            this.matchedEOF = true;\n          }\n\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public shapeMode(): ShapeModeContext {\n    const _localctx: ShapeModeContext = new ShapeModeContext(\n      this._ctx,\n      this.state,\n    );\n    this.enterRule(_localctx, 44, MandalaParser.RULE_shapeMode);\n    let _la: number;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 200;\n        _la = this._input.LA(1);\n        if (!(_la === MandalaParser.SOLID || _la === MandalaParser.OUTLINE)) {\n          this._errHandler.recoverInline(this);\n        } else {\n          if (this._input.LA(1) === Token.EOF) {\n            this.matchedEOF = true;\n          }\n\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public variable(): VariableContext {\n    const _localctx: VariableContext = new VariableContext(\n      this._ctx,\n      this.state,\n    );\n    this.enterRule(_localctx, 46, MandalaParser.RULE_variable);\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 202;\n        this.match(MandalaParser.TEXT);\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public cop(): CopContext {\n    const _localctx: CopContext = new CopContext(this._ctx, this.state);\n    this.enterRule(_localctx, 48, MandalaParser.RULE_cop);\n    let _la: number;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 204;\n        _la = this._input.LA(1);\n        if (\n          !(\n            (_la & ~0x1f) === 0 &&\n            ((1 << _la) &\n              ((1 << MandalaParser.LTE) |\n                (1 << MandalaParser.LT) |\n                (1 << MandalaParser.GTE) |\n                (1 << MandalaParser.GT) |\n                (1 << MandalaParser.EQ) |\n                (1 << MandalaParser.NEQ))) !==\n              0\n          )\n        ) {\n          this._errHandler.recoverInline(this);\n        } else {\n          if (this._input.LA(1) === Token.EOF) {\n            this.matchedEOF = true;\n          }\n\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n  // @RuleVersion(0)\n  public aop(): AopContext {\n    const _localctx: AopContext = new AopContext(this._ctx, this.state);\n    this.enterRule(_localctx, 50, MandalaParser.RULE_aop);\n    let _la: number;\n    try {\n      this.enterOuterAlt(_localctx, 1);\n      {\n        this.state = 206;\n        _la = this._input.LA(1);\n        if (\n          !(\n            (_la & ~0x1f) === 0 &&\n            ((1 << _la) &\n              ((1 << MandalaParser.ADD) |\n                (1 << MandalaParser.SUB) |\n                (1 << MandalaParser.MULT) |\n                (1 << MandalaParser.DIV) |\n                (1 << MandalaParser.MOD))) !==\n              0\n          )\n        ) {\n          this._errHandler.recoverInline(this);\n        } else {\n          if (this._input.LA(1) === Token.EOF) {\n            this.matchedEOF = true;\n          }\n\n          this._errHandler.reportMatch(this);\n          this.consume();\n        }\n      }\n    } catch (re) {\n      if (re instanceof RecognitionException) {\n        _localctx.exception = re;\n        this._errHandler.reportError(this, re);\n        this._errHandler.recover(this, re);\n      } else {\n        throw re;\n      }\n    } finally {\n      this.exitRule();\n    }\n    return _localctx;\n  }\n\n  public static readonly _serializedATN: string =\n    \"\\x03\\uC91D\\uCABA\\u058D\\uAFBA\\u4F53\\u0607\\uEA8B\\uC241\\x03.\\xD3\\x04\\x02\" +\n    \"\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\\x07\" +\n    \"\\t\\x07\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\v\\t\\v\\x04\\f\\t\\f\\x04\\r\\t\\r\\x04\" +\n    \"\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x04\\x10\\t\\x10\\x04\\x11\\t\\x11\\x04\\x12\\t\\x12\\x04\" +\n    \"\\x13\\t\\x13\\x04\\x14\\t\\x14\\x04\\x15\\t\\x15\\x04\\x16\\t\\x16\\x04\\x17\\t\\x17\\x04\" +\n    \"\\x18\\t\\x18\\x04\\x19\\t\\x19\\x04\\x1A\\t\\x1A\\x04\\x1B\\t\\x1B\\x03\\x02\\x03\\x02\\x03\" +\n    \"\\x02\\x03\\x03\\x03\\x03\\x03\\x03\\x05\\x03=\\n\\x03\\x03\\x04\\x07\\x04@\\n\\x04\\f\\x04\" +\n    \"\\x0E\\x04C\\v\\x04\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x05\\x05I\\n\\x05\\x03\\x05\" +\n    \"\\x03\\x05\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x07\\x03\\x07\\x05\\x07\" +\n    \"T\\n\\x07\\x03\\b\\x03\\b\\x05\\bX\\n\\b\\x03\\t\\x03\\t\\x05\\t\\\\\\n\\t\\x03\\t\\x03\\t\\x03\" +\n    \"\\t\\x05\\ta\\n\\t\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\v\\x03\\v\\x03\\v\\x03\\v\\x03\\v\\x03\" +\n    \"\\v\\x03\\v\\x03\\v\\x03\\v\\x03\\v\\x03\\v\\x03\\f\\x03\\f\\x03\\f\\x03\\f\\x03\\f\\x03\\f\\x03\" +\n    \"\\f\\x03\\f\\x03\\f\\x03\\f\\x03\\f\\x05\\f}\\n\\f\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x03\\r\\x05\" +\n    \"\\r\\x84\\n\\r\\x03\\x0E\\x03\\x0E\\x03\\x0E\\x05\\x0E\\x89\\n\\x0E\\x03\\x0F\\x03\\x0F\\x03\" +\n    \"\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x0F\\x03\\x10\\x03\\x10\\x03\\x10\\x03\\x10\\x03\\x10\\x03\" +\n    \"\\x10\\x03\\x10\\x03\\x10\\x03\\x11\\x03\\x11\\x03\\x11\\x03\\x11\\x06\\x11\\x9D\\n\\x11\" +\n    \"\\r\\x11\\x0E\\x11\\x9E\\x03\\x11\\x03\\x11\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\" +\n    \"\\x12\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x13\\x03\\x13\\x03\\x13\\x03\\x13\\x03\\x13\\x03\" +\n    \"\\x13\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\" +\n    \"\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x16\\x03\" +\n    \"\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x17\\x03\\x17\\x03\" +\n    \"\\x18\\x03\\x18\\x03\\x19\\x03\\x19\\x03\\x1A\\x03\\x1A\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x02\" +\n    \"\\x02\\x02\\x1C\\x02\\x02\\x04\\x02\\x06\\x02\\b\\x02\\n\\x02\\f\\x02\\x0E\\x02\\x10\\x02\" +\n    '\\x12\\x02\\x14\\x02\\x16\\x02\\x18\\x02\\x1A\\x02\\x1C\\x02\\x1E\\x02 \\x02\"\\x02$\\x02' +\n    \"&\\x02(\\x02*\\x02,\\x02.\\x020\\x022\\x024\\x02\\x02\\x06\\x03\\x02!(\\x03\\x02)*\\x03\" +\n    \"\\x02\\x1B \\x03\\x02\\x16\\x1A\\x02\\xC8\\x026\\x03\\x02\\x02\\x02\\x04<\\x03\\x02\\x02\" +\n    \"\\x02\\x06A\\x03\\x02\\x02\\x02\\bD\\x03\\x02\\x02\\x02\\nL\\x03\\x02\\x02\\x02\\fS\\x03\" +\n    \"\\x02\\x02\\x02\\x0EW\\x03\\x02\\x02\\x02\\x10[\\x03\\x02\\x02\\x02\\x12b\\x03\\x02\\x02\" +\n    \"\\x02\\x14f\\x03\\x02\\x02\\x02\\x16q\\x03\\x02\\x02\\x02\\x18\\x83\\x03\\x02\\x02\\x02\" +\n    \"\\x1A\\x88\\x03\\x02\\x02\\x02\\x1C\\x8A\\x03\\x02\\x02\\x02\\x1E\\x90\\x03\\x02\\x02\\x02\" +\n    ' \\x98\\x03\\x02\\x02\\x02\"\\xA2\\x03\\x02\\x02\\x02$\\xAA\\x03\\x02\\x02\\x02&\\xB0' +\n    \"\\x03\\x02\\x02\\x02(\\xB8\\x03\\x02\\x02\\x02*\\xC0\\x03\\x02\\x02\\x02,\\xC8\\x03\\x02\" +\n    \"\\x02\\x02.\\xCA\\x03\\x02\\x02\\x020\\xCC\\x03\\x02\\x02\\x022\\xCE\\x03\\x02\\x02\\x02\" +\n    \"4\\xD0\\x03\\x02\\x02\\x0267\\x05\\x06\\x04\\x0278\\x05\\n\\x06\\x028\\x03\\x03\\x02\\x02\" +\n    \"\\x029=\\x05\\b\\x05\\x02:=\\x05\\x14\\v\\x02;=\\x05\\x16\\f\\x02<9\\x03\\x02\\x02\\x02\" +\n    \"<:\\x03\\x02\\x02\\x02<;\\x03\\x02\\x02\\x02=\\x05\\x03\\x02\\x02\\x02>@\\x05\\x04\\x03\" +\n    \"\\x02?>\\x03\\x02\\x02\\x02@C\\x03\\x02\\x02\\x02A?\\x03\\x02\\x02\\x02AB\\x03\\x02\\x02\" +\n    \"\\x02B\\x07\\x03\\x02\\x02\\x02CA\\x03\\x02\\x02\\x02DE\\x07,\\x02\\x02EH\\x07\\x10\\x02\" +\n    \"\\x02FI\\x05\\x0E\\b\\x02GI\\x05\\x10\\t\\x02HF\\x03\\x02\\x02\\x02HG\\x03\\x02\\x02\\x02\" +\n    \"IJ\\x03\\x02\\x02\\x02JK\\x07\\x15\\x02\\x02K\\t\\x03\\x02\\x02\\x02LM\\x07\\x06\\x02\" +\n    \"\\x02MN\\x05\\f\\x07\\x02NO\\x07\\x12\\x02\\x02OP\\x07\\x15\\x02\\x02P\\v\\x03\\x02\\x02\" +\n    \"\\x02QT\\x050\\x19\\x02RT\\x05\\x0E\\b\\x02SQ\\x03\\x02\\x02\\x02SR\\x03\\x02\\x02\\x02\" +\n    \"T\\r\\x03\\x02\\x02\\x02UX\\x05\\x18\\r\\x02VX\\x05\\x1A\\x0E\\x02WU\\x03\\x02\\x02\\x02\" +\n    \"WV\\x03\\x02\\x02\\x02X\\x0F\\x03\\x02\\x02\\x02Y\\\\\\x050\\x19\\x02Z\\\\\\x07+\\x02\\x02\" +\n    \"[Y\\x03\\x02\\x02\\x02[Z\\x03\\x02\\x02\\x02\\\\`\\x03\\x02\\x02\\x02]^\\x054\\x1B\\x02\" +\n    \"^_\\x05\\x10\\t\\x02_a\\x03\\x02\\x02\\x02`]\\x03\\x02\\x02\\x02`a\\x03\\x02\\x02\\x02\" +\n    \"a\\x11\\x03\\x02\\x02\\x02bc\\x05\\x10\\t\\x02cd\\x052\\x1A\\x02de\\x05\\x10\\t\\x02e\" +\n    \"\\x13\\x03\\x02\\x02\\x02fg\\x07\\t\\x02\\x02gh\\x050\\x19\\x02hi\\x07\\n\\x02\\x02ij\" +\n    \"\\x05\\x10\\t\\x02jk\\x07\\x11\\x02\\x02kl\\x05\\x10\\t\\x02lm\\x07\\x12\\x02\\x02mn\\x07\" +\n    \"\\x13\\x02\\x02no\\x05\\x06\\x04\\x02op\\x07\\x14\\x02\\x02p\\x15\\x03\\x02\\x02\\x02\" +\n    \"qr\\x07\\x07\\x02\\x02rs\\x05\\x12\\n\\x02st\\x07\\x12\\x02\\x02tu\\x07\\x13\\x02\\x02\" +\n    \"uv\\x05\\x06\\x04\\x02v|\\x07\\x14\\x02\\x02wx\\x07\\b\\x02\\x02xy\\x07\\x13\\x02\\x02\" +\n    \"yz\\x05\\x06\\x04\\x02z{\\x07\\x14\\x02\\x02{}\\x03\\x02\\x02\\x02|w\\x03\\x02\\x02\\x02\" +\n    '|}\\x03\\x02\\x02\\x02}\\x17\\x03\\x02\\x02\\x02~\\x84\\x05\"\\x12\\x02\\x7F\\x84\\x05' +\n    \"$\\x13\\x02\\x80\\x84\\x05&\\x14\\x02\\x81\\x84\\x05(\\x15\\x02\\x82\\x84\\x05*\\x16\\x02\" +\n    \"\\x83~\\x03\\x02\\x02\\x02\\x83\\x7F\\x03\\x02\\x02\\x02\\x83\\x80\\x03\\x02\\x02\\x02\" +\n    \"\\x83\\x81\\x03\\x02\\x02\\x02\\x83\\x82\\x03\\x02\\x02\\x02\\x84\\x19\\x03\\x02\\x02\\x02\" +\n    \"\\x85\\x89\\x05\\x1C\\x0F\\x02\\x86\\x89\\x05\\x1E\\x10\\x02\\x87\\x89\\x05 \\x11\\x02\" +\n    \"\\x88\\x85\\x03\\x02\\x02\\x02\\x88\\x86\\x03\\x02\\x02\\x02\\x88\\x87\\x03\\x02\\x02\\x02\" +\n    \"\\x89\\x1B\\x03\\x02\\x02\\x02\\x8A\\x8B\\x07\\x03\\x02\\x02\\x8B\\x8C\\x05\\f\\x07\\x02\" +\n    \"\\x8C\\x8D\\x07\\x11\\x02\\x02\\x8D\\x8E\\x05\\x10\\t\\x02\\x8E\\x8F\\x07\\x12\\x02\\x02\" +\n    \"\\x8F\\x1D\\x03\\x02\\x02\\x02\\x90\\x91\\x07\\x04\\x02\\x02\\x91\\x92\\x05\\f\\x07\\x02\" +\n    \"\\x92\\x93\\x07\\x11\\x02\\x02\\x93\\x94\\x05\\x10\\t\\x02\\x94\\x95\\x07\\x11\\x02\\x02\" +\n    \"\\x95\\x96\\x05\\x10\\t\\x02\\x96\\x97\\x07\\x12\\x02\\x02\\x97\\x1F\\x03\\x02\\x02\\x02\" +\n    \"\\x98\\x99\\x07\\x05\\x02\\x02\\x99\\x9C\\x05\\f\\x07\\x02\\x9A\\x9B\\x07\\x11\\x02\\x02\" +\n    \"\\x9B\\x9D\\x05\\f\\x07\\x02\\x9C\\x9A\\x03\\x02\\x02\\x02\\x9D\\x9E\\x03\\x02\\x02\\x02\" +\n    \"\\x9E\\x9C\\x03\\x02\\x02\\x02\\x9E\\x9F\\x03\\x02\\x02\\x02\\x9F\\xA0\\x03\\x02\\x02\\x02\" +\n    \"\\xA0\\xA1\\x07\\x12\\x02\\x02\\xA1!\\x03\\x02\\x02\\x02\\xA2\\xA3\\x07\\v\\x02\\x02\\xA3\" +\n    \"\\xA4\\x05\\x10\\t\\x02\\xA4\\xA5\\x07\\x11\\x02\\x02\\xA5\\xA6\\x05,\\x17\\x02\\xA6\\xA7\" +\n    \"\\x07\\x11\\x02\\x02\\xA7\\xA8\\x05.\\x18\\x02\\xA8\\xA9\\x07\\x12\\x02\\x02\\xA9#\\x03\" +\n    \"\\x02\\x02\\x02\\xAA\\xAB\\x07\\f\\x02\\x02\\xAB\\xAC\\x05\\x10\\t\\x02\\xAC\\xAD\\x07\\x11\" +\n    \"\\x02\\x02\\xAD\\xAE\\x05,\\x17\\x02\\xAE\\xAF\\x07\\x12\\x02\\x02\\xAF%\\x03\\x02\\x02\" +\n    \"\\x02\\xB0\\xB1\\x07\\r\\x02\\x02\\xB1\\xB2\\x05\\x10\\t\\x02\\xB2\\xB3\\x07\\x11\\x02\\x02\" +\n    \"\\xB3\\xB4\\x05,\\x17\\x02\\xB4\\xB5\\x07\\x11\\x02\\x02\\xB5\\xB6\\x05.\\x18\\x02\\xB6\" +\n    \"\\xB7\\x07\\x12\\x02\\x02\\xB7'\\x03\\x02\\x02\\x02\\xB8\\xB9\\x07\\x0E\\x02\\x02\\xB9\" +\n    \"\\xBA\\x05\\x10\\t\\x02\\xBA\\xBB\\x07\\x11\\x02\\x02\\xBB\\xBC\\x05,\\x17\\x02\\xBC\\xBD\" +\n    \"\\x07\\x11\\x02\\x02\\xBD\\xBE\\x05.\\x18\\x02\\xBE\\xBF\\x07\\x12\\x02\\x02\\xBF)\\x03\" +\n    \"\\x02\\x02\\x02\\xC0\\xC1\\x07\\x0F\\x02\\x02\\xC1\\xC2\\x05\\x10\\t\\x02\\xC2\\xC3\\x07\" +\n    \"\\x11\\x02\\x02\\xC3\\xC4\\x05,\\x17\\x02\\xC4\\xC5\\x07\\x11\\x02\\x02\\xC5\\xC6\\x05\" +\n    \".\\x18\\x02\\xC6\\xC7\\x07\\x12\\x02\\x02\\xC7+\\x03\\x02\\x02\\x02\\xC8\\xC9\\t\\x02\\x02\" +\n    \"\\x02\\xC9-\\x03\\x02\\x02\\x02\\xCA\\xCB\\t\\x03\\x02\\x02\\xCB/\\x03\\x02\\x02\\x02\\xCC\" +\n    \"\\xCD\\x07,\\x02\\x02\\xCD1\\x03\\x02\\x02\\x02\\xCE\\xCF\\t\\x04\\x02\\x02\\xCF3\\x03\" +\n    \"\\x02\\x02\\x02\\xD0\\xD1\\t\\x05\\x02\\x02\\xD15\\x03\\x02\\x02\\x02\\r<AHSW[`|\\x83\" +\n    \"\\x88\\x9E\";\n  public static __ATN: ATN;\n  public static get _ATN(): ATN {\n    if (!MandalaParser.__ATN) {\n      MandalaParser.__ATN = new ATNDeserializer().deserialize(\n        Utils.toCharArray(MandalaParser._serializedATN),\n      );\n    }\n\n    return MandalaParser.__ATN;\n  }\n}\n\nexport class ProgramContext extends ParserRuleContext {\n  public statements(): StatementsContext {\n    return this.getRuleContext(0, StatementsContext);\n  }\n  public draw(): DrawContext {\n    return this.getRuleContext(0, DrawContext);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_program;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterProgram) {\n      listener.enterProgram(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitProgram) {\n      listener.exitProgram(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitProgram) {\n      return visitor.visitProgram(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class StatementContext extends ParserRuleContext {\n  public assignment(): AssignmentContext | undefined {\n    return this.tryGetRuleContext(0, AssignmentContext);\n  }\n  public forloop(): ForloopContext | undefined {\n    return this.tryGetRuleContext(0, ForloopContext);\n  }\n  public ifblock(): IfblockContext | undefined {\n    return this.tryGetRuleContext(0, IfblockContext);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_statement;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterStatement) {\n      listener.enterStatement(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitStatement) {\n      listener.exitStatement(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitStatement) {\n      return visitor.visitStatement(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class StatementsContext extends ParserRuleContext {\n  public statement(): StatementContext[];\n  public statement(i: number): StatementContext;\n  public statement(i?: number): StatementContext | StatementContext[] {\n    if (i === undefined) {\n      return this.getRuleContexts(StatementContext);\n    } else {\n      return this.getRuleContext(i, StatementContext);\n    }\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_statements;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterStatements) {\n      listener.enterStatements(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitStatements) {\n      listener.exitStatements(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitStatements) {\n      return visitor.visitStatements(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class AssignmentContext extends ParserRuleContext {\n  public TEXT(): TerminalNode {\n    return this.getToken(MandalaParser.TEXT, 0);\n  }\n  public SET(): TerminalNode {\n    return this.getToken(MandalaParser.SET, 0);\n  }\n  public SEMICOLON(): TerminalNode {\n    return this.getToken(MandalaParser.SEMICOLON, 0);\n  }\n  public shape(): ShapeContext | undefined {\n    return this.tryGetRuleContext(0, ShapeContext);\n  }\n  public arithexp(): ArithexpContext | undefined {\n    return this.tryGetRuleContext(0, ArithexpContext);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_assignment;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterAssignment) {\n      listener.enterAssignment(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitAssignment) {\n      listener.exitAssignment(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitAssignment) {\n      return visitor.visitAssignment(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class DrawContext extends ParserRuleContext {\n  public DRAW(): TerminalNode {\n    return this.getToken(MandalaParser.DRAW, 0);\n  }\n  public object(): ObjectContext {\n    return this.getRuleContext(0, ObjectContext);\n  }\n  public END_FUNCTION(): TerminalNode {\n    return this.getToken(MandalaParser.END_FUNCTION, 0);\n  }\n  public SEMICOLON(): TerminalNode {\n    return this.getToken(MandalaParser.SEMICOLON, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_draw;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterDraw) {\n      listener.enterDraw(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitDraw) {\n      listener.exitDraw(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitDraw) {\n      return visitor.visitDraw(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class ObjectContext extends ParserRuleContext {\n  public variable(): VariableContext | undefined {\n    return this.tryGetRuleContext(0, VariableContext);\n  }\n  public shape(): ShapeContext | undefined {\n    return this.tryGetRuleContext(0, ShapeContext);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_object;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterObject) {\n      listener.enterObject(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitObject) {\n      listener.exitObject(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitObject) {\n      return visitor.visitObject(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class ShapeContext extends ParserRuleContext {\n  public shapeConstructor(): ShapeConstructorContext | undefined {\n    return this.tryGetRuleContext(0, ShapeConstructorContext);\n  }\n  public transformation(): TransformationContext | undefined {\n    return this.tryGetRuleContext(0, TransformationContext);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_shape;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterShape) {\n      listener.enterShape(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitShape) {\n      listener.exitShape(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitShape) {\n      return visitor.visitShape(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class ArithexpContext extends ParserRuleContext {\n  public variable(): VariableContext | undefined {\n    return this.tryGetRuleContext(0, VariableContext);\n  }\n  public NUM(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.NUM, 0);\n  }\n  public aop(): AopContext | undefined {\n    return this.tryGetRuleContext(0, AopContext);\n  }\n  public arithexp(): ArithexpContext | undefined {\n    return this.tryGetRuleContext(0, ArithexpContext);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_arithexp;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterArithexp) {\n      listener.enterArithexp(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitArithexp) {\n      listener.exitArithexp(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitArithexp) {\n      return visitor.visitArithexp(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class CompexpContext extends ParserRuleContext {\n  public arithexp(): ArithexpContext[];\n  public arithexp(i: number): ArithexpContext;\n  public arithexp(i?: number): ArithexpContext | ArithexpContext[] {\n    if (i === undefined) {\n      return this.getRuleContexts(ArithexpContext);\n    } else {\n      return this.getRuleContext(i, ArithexpContext);\n    }\n  }\n  public cop(): CopContext {\n    return this.getRuleContext(0, CopContext);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_compexp;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterCompexp) {\n      listener.enterCompexp(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitCompexp) {\n      listener.exitCompexp(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitCompexp) {\n      return visitor.visitCompexp(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class ForloopContext extends ParserRuleContext {\n  public FOR(): TerminalNode {\n    return this.getToken(MandalaParser.FOR, 0);\n  }\n  public variable(): VariableContext {\n    return this.getRuleContext(0, VariableContext);\n  }\n  public RANGE(): TerminalNode {\n    return this.getToken(MandalaParser.RANGE, 0);\n  }\n  public arithexp(): ArithexpContext[];\n  public arithexp(i: number): ArithexpContext;\n  public arithexp(i?: number): ArithexpContext | ArithexpContext[] {\n    if (i === undefined) {\n      return this.getRuleContexts(ArithexpContext);\n    } else {\n      return this.getRuleContext(i, ArithexpContext);\n    }\n  }\n  public COMMA(): TerminalNode {\n    return this.getToken(MandalaParser.COMMA, 0);\n  }\n  public END_FUNCTION(): TerminalNode {\n    return this.getToken(MandalaParser.END_FUNCTION, 0);\n  }\n  public START_BODY(): TerminalNode {\n    return this.getToken(MandalaParser.START_BODY, 0);\n  }\n  public statements(): StatementsContext {\n    return this.getRuleContext(0, StatementsContext);\n  }\n  public END_BODY(): TerminalNode {\n    return this.getToken(MandalaParser.END_BODY, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_forloop;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterForloop) {\n      listener.enterForloop(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitForloop) {\n      listener.exitForloop(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitForloop) {\n      return visitor.visitForloop(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class IfblockContext extends ParserRuleContext {\n  public _thenblock!: StatementsContext;\n  public _elseblock!: StatementsContext;\n  public IF(): TerminalNode {\n    return this.getToken(MandalaParser.IF, 0);\n  }\n  public compexp(): CompexpContext {\n    return this.getRuleContext(0, CompexpContext);\n  }\n  public END_FUNCTION(): TerminalNode {\n    return this.getToken(MandalaParser.END_FUNCTION, 0);\n  }\n  public START_BODY(): TerminalNode[];\n  public START_BODY(i: number): TerminalNode;\n  public START_BODY(i?: number): TerminalNode | TerminalNode[] {\n    if (i === undefined) {\n      return this.getTokens(MandalaParser.START_BODY);\n    } else {\n      return this.getToken(MandalaParser.START_BODY, i);\n    }\n  }\n  public END_BODY(): TerminalNode[];\n  public END_BODY(i: number): TerminalNode;\n  public END_BODY(i?: number): TerminalNode | TerminalNode[] {\n    if (i === undefined) {\n      return this.getTokens(MandalaParser.END_BODY);\n    } else {\n      return this.getToken(MandalaParser.END_BODY, i);\n    }\n  }\n  public statements(): StatementsContext[];\n  public statements(i: number): StatementsContext;\n  public statements(i?: number): StatementsContext | StatementsContext[] {\n    if (i === undefined) {\n      return this.getRuleContexts(StatementsContext);\n    } else {\n      return this.getRuleContext(i, StatementsContext);\n    }\n  }\n  public ELSE(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.ELSE, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_ifblock;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterIfblock) {\n      listener.enterIfblock(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitIfblock) {\n      listener.exitIfblock(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitIfblock) {\n      return visitor.visitIfblock(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class ShapeConstructorContext extends ParserRuleContext {\n  public circle(): CircleContext | undefined {\n    return this.tryGetRuleContext(0, CircleContext);\n  }\n  public line(): LineContext | undefined {\n    return this.tryGetRuleContext(0, LineContext);\n  }\n  public petal(): PetalContext | undefined {\n    return this.tryGetRuleContext(0, PetalContext);\n  }\n  public cardioid(): CardioidContext | undefined {\n    return this.tryGetRuleContext(0, CardioidContext);\n  }\n  public limacon(): LimaconContext | undefined {\n    return this.tryGetRuleContext(0, LimaconContext);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_shapeConstructor;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterShapeConstructor) {\n      listener.enterShapeConstructor(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitShapeConstructor) {\n      listener.exitShapeConstructor(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitShapeConstructor) {\n      return visitor.visitShapeConstructor(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class TransformationContext extends ParserRuleContext {\n  public rotate(): RotateContext | undefined {\n    return this.tryGetRuleContext(0, RotateContext);\n  }\n  public repeat(): RepeatContext | undefined {\n    return this.tryGetRuleContext(0, RepeatContext);\n  }\n  public overlay(): OverlayContext | undefined {\n    return this.tryGetRuleContext(0, OverlayContext);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_transformation;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterTransformation) {\n      listener.enterTransformation(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitTransformation) {\n      listener.exitTransformation(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitTransformation) {\n      return visitor.visitTransformation(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class RotateContext extends ParserRuleContext {\n  public ROTATE(): TerminalNode {\n    return this.getToken(MandalaParser.ROTATE, 0);\n  }\n  public object(): ObjectContext {\n    return this.getRuleContext(0, ObjectContext);\n  }\n  public COMMA(): TerminalNode {\n    return this.getToken(MandalaParser.COMMA, 0);\n  }\n  public arithexp(): ArithexpContext {\n    return this.getRuleContext(0, ArithexpContext);\n  }\n  public END_FUNCTION(): TerminalNode {\n    return this.getToken(MandalaParser.END_FUNCTION, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_rotate;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterRotate) {\n      listener.enterRotate(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitRotate) {\n      listener.exitRotate(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitRotate) {\n      return visitor.visitRotate(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class RepeatContext extends ParserRuleContext {\n  public REPEAT(): TerminalNode {\n    return this.getToken(MandalaParser.REPEAT, 0);\n  }\n  public object(): ObjectContext {\n    return this.getRuleContext(0, ObjectContext);\n  }\n  public COMMA(): TerminalNode[];\n  public COMMA(i: number): TerminalNode;\n  public COMMA(i?: number): TerminalNode | TerminalNode[] {\n    if (i === undefined) {\n      return this.getTokens(MandalaParser.COMMA);\n    } else {\n      return this.getToken(MandalaParser.COMMA, i);\n    }\n  }\n  public arithexp(): ArithexpContext[];\n  public arithexp(i: number): ArithexpContext;\n  public arithexp(i?: number): ArithexpContext | ArithexpContext[] {\n    if (i === undefined) {\n      return this.getRuleContexts(ArithexpContext);\n    } else {\n      return this.getRuleContext(i, ArithexpContext);\n    }\n  }\n  public END_FUNCTION(): TerminalNode {\n    return this.getToken(MandalaParser.END_FUNCTION, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_repeat;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterRepeat) {\n      listener.enterRepeat(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitRepeat) {\n      listener.exitRepeat(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitRepeat) {\n      return visitor.visitRepeat(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class OverlayContext extends ParserRuleContext {\n  public OVERLAY(): TerminalNode {\n    return this.getToken(MandalaParser.OVERLAY, 0);\n  }\n  public object(): ObjectContext[];\n  public object(i: number): ObjectContext;\n  public object(i?: number): ObjectContext | ObjectContext[] {\n    if (i === undefined) {\n      return this.getRuleContexts(ObjectContext);\n    } else {\n      return this.getRuleContext(i, ObjectContext);\n    }\n  }\n  public END_FUNCTION(): TerminalNode {\n    return this.getToken(MandalaParser.END_FUNCTION, 0);\n  }\n  public COMMA(): TerminalNode[];\n  public COMMA(i: number): TerminalNode;\n  public COMMA(i?: number): TerminalNode | TerminalNode[] {\n    if (i === undefined) {\n      return this.getTokens(MandalaParser.COMMA);\n    } else {\n      return this.getToken(MandalaParser.COMMA, i);\n    }\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_overlay;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterOverlay) {\n      listener.enterOverlay(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitOverlay) {\n      listener.exitOverlay(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitOverlay) {\n      return visitor.visitOverlay(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class CircleContext extends ParserRuleContext {\n  public CIRCLE(): TerminalNode {\n    return this.getToken(MandalaParser.CIRCLE, 0);\n  }\n  public arithexp(): ArithexpContext {\n    return this.getRuleContext(0, ArithexpContext);\n  }\n  public COMMA(): TerminalNode[];\n  public COMMA(i: number): TerminalNode;\n  public COMMA(i?: number): TerminalNode | TerminalNode[] {\n    if (i === undefined) {\n      return this.getTokens(MandalaParser.COMMA);\n    } else {\n      return this.getToken(MandalaParser.COMMA, i);\n    }\n  }\n  public color(): ColorContext {\n    return this.getRuleContext(0, ColorContext);\n  }\n  public shapeMode(): ShapeModeContext {\n    return this.getRuleContext(0, ShapeModeContext);\n  }\n  public END_FUNCTION(): TerminalNode {\n    return this.getToken(MandalaParser.END_FUNCTION, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_circle;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterCircle) {\n      listener.enterCircle(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitCircle) {\n      listener.exitCircle(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitCircle) {\n      return visitor.visitCircle(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class LineContext extends ParserRuleContext {\n  public LINE(): TerminalNode {\n    return this.getToken(MandalaParser.LINE, 0);\n  }\n  public arithexp(): ArithexpContext {\n    return this.getRuleContext(0, ArithexpContext);\n  }\n  public COMMA(): TerminalNode {\n    return this.getToken(MandalaParser.COMMA, 0);\n  }\n  public color(): ColorContext {\n    return this.getRuleContext(0, ColorContext);\n  }\n  public END_FUNCTION(): TerminalNode {\n    return this.getToken(MandalaParser.END_FUNCTION, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_line;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterLine) {\n      listener.enterLine(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitLine) {\n      listener.exitLine(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitLine) {\n      return visitor.visitLine(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class PetalContext extends ParserRuleContext {\n  public PETAL(): TerminalNode {\n    return this.getToken(MandalaParser.PETAL, 0);\n  }\n  public arithexp(): ArithexpContext {\n    return this.getRuleContext(0, ArithexpContext);\n  }\n  public COMMA(): TerminalNode[];\n  public COMMA(i: number): TerminalNode;\n  public COMMA(i?: number): TerminalNode | TerminalNode[] {\n    if (i === undefined) {\n      return this.getTokens(MandalaParser.COMMA);\n    } else {\n      return this.getToken(MandalaParser.COMMA, i);\n    }\n  }\n  public color(): ColorContext {\n    return this.getRuleContext(0, ColorContext);\n  }\n  public shapeMode(): ShapeModeContext {\n    return this.getRuleContext(0, ShapeModeContext);\n  }\n  public END_FUNCTION(): TerminalNode {\n    return this.getToken(MandalaParser.END_FUNCTION, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_petal;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterPetal) {\n      listener.enterPetal(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitPetal) {\n      listener.exitPetal(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitPetal) {\n      return visitor.visitPetal(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class CardioidContext extends ParserRuleContext {\n  public CARDIOID(): TerminalNode {\n    return this.getToken(MandalaParser.CARDIOID, 0);\n  }\n  public arithexp(): ArithexpContext {\n    return this.getRuleContext(0, ArithexpContext);\n  }\n  public COMMA(): TerminalNode[];\n  public COMMA(i: number): TerminalNode;\n  public COMMA(i?: number): TerminalNode | TerminalNode[] {\n    if (i === undefined) {\n      return this.getTokens(MandalaParser.COMMA);\n    } else {\n      return this.getToken(MandalaParser.COMMA, i);\n    }\n  }\n  public color(): ColorContext {\n    return this.getRuleContext(0, ColorContext);\n  }\n  public shapeMode(): ShapeModeContext {\n    return this.getRuleContext(0, ShapeModeContext);\n  }\n  public END_FUNCTION(): TerminalNode {\n    return this.getToken(MandalaParser.END_FUNCTION, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_cardioid;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterCardioid) {\n      listener.enterCardioid(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitCardioid) {\n      listener.exitCardioid(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitCardioid) {\n      return visitor.visitCardioid(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class LimaconContext extends ParserRuleContext {\n  public LIMACON(): TerminalNode {\n    return this.getToken(MandalaParser.LIMACON, 0);\n  }\n  public arithexp(): ArithexpContext {\n    return this.getRuleContext(0, ArithexpContext);\n  }\n  public COMMA(): TerminalNode[];\n  public COMMA(i: number): TerminalNode;\n  public COMMA(i?: number): TerminalNode | TerminalNode[] {\n    if (i === undefined) {\n      return this.getTokens(MandalaParser.COMMA);\n    } else {\n      return this.getToken(MandalaParser.COMMA, i);\n    }\n  }\n  public color(): ColorContext {\n    return this.getRuleContext(0, ColorContext);\n  }\n  public shapeMode(): ShapeModeContext {\n    return this.getRuleContext(0, ShapeModeContext);\n  }\n  public END_FUNCTION(): TerminalNode {\n    return this.getToken(MandalaParser.END_FUNCTION, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_limacon;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterLimacon) {\n      listener.enterLimacon(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitLimacon) {\n      listener.exitLimacon(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitLimacon) {\n      return visitor.visitLimacon(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class ColorContext extends ParserRuleContext {\n  public RED(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.RED, 0);\n  }\n  public ORANGE(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.ORANGE, 0);\n  }\n  public YELLOW(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.YELLOW, 0);\n  }\n  public GREEN(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.GREEN, 0);\n  }\n  public BLUE(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.BLUE, 0);\n  }\n  public BLACK(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.BLACK, 0);\n  }\n  public WHITE(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.WHITE, 0);\n  }\n  public HEXCOLOR(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.HEXCOLOR, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_color;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterColor) {\n      listener.enterColor(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitColor) {\n      listener.exitColor(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitColor) {\n      return visitor.visitColor(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class ShapeModeContext extends ParserRuleContext {\n  public SOLID(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.SOLID, 0);\n  }\n  public OUTLINE(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.OUTLINE, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_shapeMode;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterShapeMode) {\n      listener.enterShapeMode(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitShapeMode) {\n      listener.exitShapeMode(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitShapeMode) {\n      return visitor.visitShapeMode(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class VariableContext extends ParserRuleContext {\n  public TEXT(): TerminalNode {\n    return this.getToken(MandalaParser.TEXT, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_variable;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterVariable) {\n      listener.enterVariable(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitVariable) {\n      listener.exitVariable(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitVariable) {\n      return visitor.visitVariable(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class CopContext extends ParserRuleContext {\n  public LT(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.LT, 0);\n  }\n  public LTE(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.LTE, 0);\n  }\n  public GT(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.GT, 0);\n  }\n  public GTE(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.GTE, 0);\n  }\n  public EQ(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.EQ, 0);\n  }\n  public NEQ(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.NEQ, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_cop;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterCop) {\n      listener.enterCop(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitCop) {\n      listener.exitCop(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitCop) {\n      return visitor.visitCop(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n\nexport class AopContext extends ParserRuleContext {\n  public ADD(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.ADD, 0);\n  }\n  public SUB(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.SUB, 0);\n  }\n  public MULT(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.MULT, 0);\n  }\n  public DIV(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.DIV, 0);\n  }\n  public MOD(): TerminalNode | undefined {\n    return this.tryGetToken(MandalaParser.MOD, 0);\n  }\n  constructor(parent: ParserRuleContext | undefined, invokingState: number) {\n    super(parent, invokingState);\n  }\n  // @Override\n  public get ruleIndex(): number {\n    return MandalaParser.RULE_aop;\n  }\n  // @Override\n  public enterRule(listener: MandalaParserListener): void {\n    if (listener.enterAop) {\n      listener.enterAop(this);\n    }\n  }\n  // @Override\n  public exitRule(listener: MandalaParserListener): void {\n    if (listener.exitAop) {\n      listener.exitAop(this);\n    }\n  }\n  // @Override\n  public accept<Result>(visitor: MandalaParserVisitor<Result>): Result {\n    if (visitor.visitAop) {\n      return visitor.visitAop(this);\n    } else {\n      return visitor.visitChildren(this);\n    }\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable prettier/prettier */\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\n// IMPORT AND INITIALIZE CLASSES ONCE THEY ARE DONE!!\nimport { ListFormat } from \"typescript\";\nimport {\n    AopContext,\n    ArithexpContext,\n    AssignmentContext,\n    CardioidContext,\n    CircleContext,\n    ColorContext,\n    CompexpContext,\n    CopContext,\n    DrawContext,\n    ForloopContext,\n    IfblockContext,\n    LimaconContext,\n    LineContext,\n    ObjectContext,\n    OverlayContext,\n    PetalContext,\n    ProgramContext,\n    RepeatContext,\n    RotateContext,\n    ShapeConstructorContext,\n    ShapeContext,\n    ShapeModeContext,\n    StatementContext,\n    StatementsContext,\n    TransformationContext,\n    VariableContext,\n  } from \"./antlr/MandalaParser\";\n\n  export class SyntaxChecker{\n      public static visitProgram(ctx: ProgramContext): string {\n        let str = \"\";\n        str = str.concat(this.getStatements(ctx.statements()));\n        str = str.concat(this.visitDraw(ctx.draw()));\n        return str;\n    }\n  \n    static getStatements(ctx: StatementsContext): string {\n        let str = \"\";\n        ctx.statement().forEach((s: StatementContext) => {\n            str = str.concat(this.visitStatement(s));\n      });\n      return str;\n    }\n  \n    static visitStatement(ctx: StatementContext): string {\n        let str = \"\";\n        if (ctx.assignment() != undefined) {\n            str = str.concat(this.visitAssignment(ctx.assignment()!));\n        } else if (ctx.forloop() != undefined) {\n            str = str.concat(this.visitForloop(ctx.forloop()!));\n        } else if (ctx.ifblock() != undefined) {\n            str = str.concat(this.visitIfblock(ctx.ifblock()!));\n        } \n        return str;\n    }\n  \n    static visitAssignment(ctx: AssignmentContext): string {\n        let str = \"\";\n        if (ctx.shape() != undefined) {\n            str = str.concat(this.visitShape(ctx.shape()!));\n        } else if (ctx.arithexp() != undefined) {\n            str = str.concat(this.visitArithexp(ctx.arithexp()!));\n        } \n        if (ctx.SEMICOLON().toString() !== \";\"){\n            str = str.concat(\"Assignment \"+ctx.text+\" is missing ;\\n\");\n        } if(ctx.SET().toString() !== \"=\"){\n            str = str.concat(\"Assignment \"+ctx.text+\" is missing =\\n\");\n        }\n        return str;\n    }\n  \n    static visitDraw(ctx: DrawContext): string {\n        let str = \"\";\n        str = str.concat(this.visitObject(ctx.object()));\n        if (ctx.SEMICOLON().toString() !== \";\"){\n            str = str.concat(\"Assignment \"+ctx.text+\" is missing ;\\n\");\n        }\n        return str;\n\n    }\n  \n    static visitObject(ctx: ObjectContext): string {\n        let str = \"\";\n        if (ctx.variable() != undefined) {\n           str = str.concat(this.getVariable(ctx.variable()!));\n        } else if (ctx.shape() != undefined) {\n            str = str.concat(this.visitShape(ctx.shape()!));\n        } \n        return str;\n    }\n  \n    static visitShape(ctx: ShapeContext): string {\n        let str = \"\";\n        if (ctx.shapeConstructor() != undefined) {\n            str = str.concat(this.visitShapeConstructor(ctx.shapeConstructor()!));\n        } else if (ctx.transformation() != undefined) {\n            str = str.concat(this.visitTransformation(ctx.transformation()!));\n        }\n        return str;\n    }\n  \n    // Transformations\n    static visitTransformation(ctx: TransformationContext): string {\n        let str = \"\";\n        if (ctx.rotate() != undefined) {\n            str = str.concat(this.visitRotate(ctx.rotate()!));\n        } else if (ctx.repeat() != undefined) {\n            str = str.concat(this.visitRepeat(ctx.repeat()!));\n        } else if (ctx.overlay() != undefined) {\n            str = str.concat(this.visitOverlay(ctx.overlay()!));\n        } \n        return str;\n    }\n  \n    static visitRotate(ctx: RotateContext): string {\n        let str = \"\";\n        str = str.concat(this.visitObject(ctx.object()));\n        str = str.concat(this.visitArithexp(ctx.arithexp()));\n        if(ctx.COMMA().toString() !== \",\"){\n            str = str.concat(\"Rotation \"+ctx.text+\" is missing ,\\n\");\n        }\n        if(ctx.END_FUNCTION().toString() !== \")\"){\n            str = str.concat(\"Rotation \"+ctx.text+\" is missing )\\n\");\n        }\n        return str;\n    }\n  \n    static visitRepeat(ctx: RepeatContext): string {\n        let str = \"\";\n        str = str.concat(this.visitObject(ctx.object()));\n        str = str.concat(this.visitArithexp(ctx.arithexp(0)));\n        str = str.concat(this.visitArithexp(ctx.arithexp(1)));\n        if(ctx.COMMA(0).toString() !== \",\" || ctx.COMMA(1).toString() !== \",\"){\n            str = str.concat(\"Repetition \"+ctx.text+\" is missing ,\\n\");\n        } \n        if(ctx.END_FUNCTION().toString() !== \")\"){\n            str = str.concat(\"Repetition \"+ctx.text+\" is missing )\\n\");\n        }\n        return str;\n    }\n  \n    static visitOverlay(ctx: OverlayContext): string {\n        let str = \"\";\n        ctx.object().forEach((o: ObjectContext) => {\n            str = str.concat(this.visitObject(o));\n        });\n        return str;\n    }\n  \n    // Shape constructors\n    static visitShapeConstructor(ctx: ShapeConstructorContext): string {\n        let str = \"\";\n        if (ctx.circle() != undefined) {\n            str = str.concat(this.visitCircle(ctx.circle()!));\n        } else if (ctx.line() != undefined) {\n            str = str.concat(this.visitLine(ctx.line()!));\n        } else if (ctx.petal() != undefined) {\n            str = str.concat(this.visitPetal(ctx.petal()!));\n        } else if (ctx.cardioid() != undefined) {\n            str = str.concat(this.visitCardioid(ctx.cardioid()!));\n        } else if (ctx.limacon() != undefined) {\n            str = str.concat(this.visitLimacon(ctx.limacon()!));\n        } \n        return str;\n    }\n  \n    static visitCircle(ctx: CircleContext): string {\n        let str = \"\";\n        str = str.concat(this.visitArithexp(ctx.arithexp()));\n        str = str.concat(this.getColor(ctx.color()));\n        str = str.concat(this.getShapeMode(ctx.shapeMode()));\n        return str;\n    }\n  \n    static visitLine(ctx: LineContext): string {\n        let str = \"\";\n        str = str.concat(this.visitArithexp(ctx.arithexp()));\n        str = str.concat(this.getColor(ctx.color()));\n        return str;\n    }\n  \n    static visitPetal(ctx: PetalContext): string {\n        let str = \"\";\n        str = str.concat(this.visitArithexp(ctx.arithexp()));\n        str = str.concat(this.getColor(ctx.color()));\n        str = str.concat(this.getShapeMode(ctx.shapeMode()));\n        return str;\n    }\n  \n    static visitCardioid(ctx: CardioidContext): string {\n        let str = \"\";\n        str = str.concat(this.visitArithexp(ctx.arithexp()));\n        str = str.concat(this.getColor(ctx.color()));\n        str = str.concat(this.getShapeMode(ctx.shapeMode()));\n        return str;\n    }\n  \n    static visitLimacon(ctx: LimaconContext): string {\n        let str = \"\";\n        str = str.concat(this.visitArithexp(ctx.arithexp()));\n        str = str.concat(this.getColor(ctx.color()));\n        str = str.concat(this.getShapeMode(ctx.shapeMode()));\n        return str;\n    }\n  \n    // Control Flows\n    static visitForloop(ctx: ForloopContext): string {\n        let str = \"\";\n        str = str.concat(this.getVariable(ctx.variable()));\n        str = str.concat(this.visitArithexp(ctx.arithexp(0)));\n        str = str.concat(this.visitArithexp(ctx.arithexp(1)));\n        str = str.concat(this.getStatements(ctx.statements()));\n        if(ctx.RANGE().toString() !== \"in range(\"){\n            str = str.concat(\"Incorrect syntax for forloop's range.\\n\");\n        }\n        if(ctx.COMMA().toString() !== \",\"){\n            str = str.concat(\"Forloop \"+ctx.text+\" is missing ,\\n\");\n        }\n        if(ctx.END_FUNCTION().toString() !== \")\"){\n            str = str.concat(\"Forloop \"+ctx.text+\" is missing )\\n\");\n        }\n        if(ctx.START_BODY().toString() !== \"{\"){\n            str = str.concat(\"Forloop \"+ctx.text+\" is missing {\\n\");\n        }\n        if(ctx.END_BODY().toString() !== \"}\"){\n            str = str.concat(\"Forloop \"+ctx.text+\" is missing }\\n\");\n        }\n        return str;\n    }\n  \n    static visitIfblock(ctx: IfblockContext): string {\n        let str = \"\";\n        str = str.concat(this.visitCompexp(ctx.compexp()));\n        ctx._thenblock.statement().forEach((s: StatementContext) => {\n            str = str.concat(this.visitStatement(s));\n        });\n        if (ctx.ELSE() != undefined) {\n            ctx._elseblock.statement().forEach((s: StatementContext) => {\n                str = str.concat(this.visitStatement(s));\n            });\n            if(ctx.START_BODY(1).toString() !== \"{\"){\n                str = str.concat(\"Else statements \"+ctx.text+\" is missing {\\n\");\n            }\n            if(ctx.END_BODY(1).toString() !== \"}\"){\n                str = str.concat(\"Else statements \"+ctx.text+\" is missing }\\n\");\n            }\n            \n        }\n        if(ctx.END_FUNCTION().toString() !== \")\"){\n            str = str.concat(\"If statements \"+ctx.text+\" is missing )\\n\");\n        }\n        if(ctx.START_BODY(0).toString() !== \"{\"){\n            str = str.concat(\"If statements \"+ctx.text+\"is missing {\\n\");\n        }\n        if(ctx.END_BODY(0).toString() !== \"}\"){\n            str = str.concat(\"If statements \"+ctx.text+\" is missing }\\n\");\n        }\n        return str;\n    }\n  \n    // Expressions\n    static visitArithexp(ctx: ArithexpContext): string {\n        let str = \"\";\n        if (ctx.variable() != undefined) {\n            str = str.concat(this.getVariable(ctx.variable()!));\n        } else if (ctx.NUM() != undefined) {\n            try {\n                parseInt(ctx.NUM()!.toString(), 10);\n            } catch (error) {\n                str = str.concat(ctx.NUM()!.toString() + \" is not a number.\\n\");\n            }\n        }\n        if (ctx.aop() != undefined && ctx.arithexp() != undefined) {\n            str = str.concat(this.getAop(ctx.aop()!));\n            str = str.concat(this.visitArithexp(ctx.arithexp()!));\n        }\n        return str;\n    }\n  \n    static visitCompexp(ctx: CompexpContext): string {\n        let str = \"\";\n        str = str.concat(this.visitArithexp(ctx.arithexp(0)));\n        str = str.concat(this.getCop(ctx.cop()));\n        str = str.concat(this.visitArithexp(ctx.arithexp(1))); \n        return str;\n    }\n  \n    // Constants\n    static getColor(_ctx: ColorContext): string {\n      return \"\";\n    }\n  \n    static getShapeMode(_ctx: ShapeModeContext): string {\n      return \"\";\n    }\n  \n    static getVariable(_ctx: VariableContext): string {\n        return \"\";\n    }\n  \n    static getAop(_ctx: AopContext): string {\n      return \"\";\n    }\n  \n    static getCop(_ctx: CopContext): string {\n      return \"\";\n    }\n  \n  }\n  ","import { Element } from \"./Element\";\nimport { Rotation, Repetition, Overlay } from \"./Transformations\";\nimport { Shape } from \"./Shapes\";\nimport { ArticleVariable } from \"./Variables\";\nimport { Visitor } from \"./Visitor\";\nimport { ArithExp } from \"./Expressions\";\nimport { ForLoop, IfBlock } from \"./ControlBlocks\";\n\nexport type Article = Rotation | Repetition | Overlay | Shape | ArticleVariable;\n\nexport type Statement = Assignment | IfBlock | ForLoop;\n\nexport class Program implements Element {\n  statements: Statement[];\n  draw: Draw;\n\n  constructor(statements: Statement[], draw: Draw) {\n    this.statements = statements;\n    this.draw = draw;\n  }\n\n  accept<JType, NumType, CType>(\n    visitor: Visitor<JType, NumType, CType>,\n  ): JType {\n    return visitor.visitProgram(this);\n  }\n}\n\nexport type Assignment = ArticleAssignment | NumAssignment;\n\nexport class ArticleAssignment implements Element {\n  variable: string;\n  value: Article;\n\n  constructor(variable: string, shape: Article) {\n    this.variable = variable;\n    this.value = shape;\n  }\n\n  accept<JType, NumType, CType>(visitor: Visitor<JType, NumType, CType>): void {\n    visitor.visitArticleAssignment(this);\n  }\n}\n\nexport class NumAssignment implements Element {\n  variable: string;\n  value: ArithExp;\n\n  constructor(variable: string, value: ArithExp) {\n    this.variable = variable;\n    this.value = value;\n  }\n\n  accept<JType, NumType, CType>(visitor: Visitor<JType, NumType, CType>): void {\n    visitor.visitNumAssignment(this);\n  }\n}\n\nexport class Draw implements Element {\n  draw: Article;\n\n  constructor(draw: Article) {\n    this.draw = draw;\n  }\n\n  accept<JType, NumType, CType>(\n    visitor: Visitor<JType, NumType, CType>,\n  ): JType {\n    return visitor.visitDraw(this);\n  }\n}\n","import { CompExp } from \"./Expressions\";\nimport { Statement } from \"./Program\";\nimport { EvaluatesToNumber } from \"./EvaluatesToNumber\";\nimport { Visitor } from \"./Visitor\";\nimport { Element } from \"./Element\";\n\nexport class ForLoop implements Element {\n  counter: string;\n  rangeStart: EvaluatesToNumber;\n  rangeEnd: EvaluatesToNumber;\n  statements: Statement[];\n\n  constructor(\n    counter: string,\n    rangeStart: EvaluatesToNumber,\n    rangeEnd: EvaluatesToNumber,\n    statements: Statement[],\n  ) {\n    this.counter = counter;\n    this.rangeStart = rangeStart;\n    this.rangeEnd = rangeEnd;\n    this.statements = statements;\n  }\n\n  accept<JType, NumType, CType>(visitor: Visitor<JType, NumType, CType>): void {\n    visitor.visitForLoop(this);\n  }\n}\n\nexport class IfBlock implements Element {\n  condition: CompExp;\n  ifStatements: Statement[];\n  elseStatements: Statement[] | undefined;\n\n  constructor(\n    condition: CompExp,\n    ifStatements: Statement[],\n    elseStatements?: Statement[],\n  ) {\n    this.condition = condition;\n    this.ifStatements = ifStatements;\n    this.elseStatements = elseStatements;\n  }\n\n  accept<JType, NumType, CType>(visitor: Visitor<JType, NumType, CType>): void {\n    visitor.visitIfBlock(this);\n  }\n}\n","import { Element } from \"./Element\";\nimport { EvaluatesToNumber } from \"./EvaluatesToNumber\";\nimport { Visitor } from \"./Visitor\";\n\nexport type ArithOp = \"+\" | \"-\" | \"*\" | \"/\" | \"%\";\nexport type CompOp = \"<\" | \">\" | \"<=\" | \">=\" | \"==\" | \"!=\";\n\nexport class ArithExp implements EvaluatesToNumber {\n  value: EvaluatesToNumber;\n  arithOp: ArithOp | undefined;\n  otherExp: ArithExp | undefined;\n\n  constructor(value: EvaluatesToNumber);\n  constructor(value: EvaluatesToNumber, arithOp: ArithOp, otherExp: ArithExp);\n  constructor(\n    value: EvaluatesToNumber,\n    arithOp?: ArithOp,\n    otherExp?: ArithExp,\n  ) {\n    this.value = value;\n    this.arithOp = arithOp;\n    this.otherExp = otherExp;\n  }\n\n  accept<JType, NumType, CType>(\n    visitor: Visitor<JType, NumType, CType>,\n  ): NumType {\n    return visitor.visitArithExp(this);\n  }\n}\n\nexport class CompExp implements Element {\n  leftArithExp: ArithExp;\n  rightArithExp: ArithExp;\n  compOp: CompOp;\n\n  constructor(leftAE: ArithExp, rightAE: ArithExp, compOp: CompOp) {\n    this.leftArithExp = leftAE;\n    this.rightArithExp = rightAE;\n    this.compOp = compOp;\n  }\n\n  accept<JType, NumType, CType>(\n    visitor: Visitor<JType, NumType, CType>,\n  ): CType {\n    return visitor.visitCompExp(this);\n  }\n}\n","import { Element } from \"./Element\";\nimport { EvaluatesToNumber } from \"./EvaluatesToNumber\";\nimport { Visitor } from \"./Visitor\";\n\nexport type Variable = ArticleVariable | NumberVariable;\n\nexport class ArticleVariable implements Element {\n  name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  accept<JType, NumType, CType>(\n    visitor: Visitor<JType, NumType, CType>,\n  ): JType {\n    return visitor.visitArticleVariable(this);\n  }\n}\n\nexport class NumberVariable implements EvaluatesToNumber {\n  name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  accept<JType, NumType, CType>(\n    visitor: Visitor<JType, NumType, CType>,\n  ): NumType {\n    return visitor.visitNumberVariable(this);\n  }\n}\n","import { Visitor } from \"./Visitor\";\nimport { EvaluatesToNumber } from \"./EvaluatesToNumber\";\n\nexport class Num implements EvaluatesToNumber {\n  value: number;\n\n  constructor(value: number) {\n    this.value = value;\n  }\n\n  accept<JType, NumType, CType>(\n    visitor: Visitor<JType, NumType, CType>,\n  ): NumType {\n    return visitor.visitNum(this);\n  }\n}\n","import { Element } from \"./Element\";\nimport { EvaluatesToNumber } from \"./EvaluatesToNumber\";\nimport { Visitor } from \"./Visitor\";\n\nexport type Shape = Circle | Line | Petal | Cardioid | Limacon;\n\nexport type Mode = \"solid\" | \"outline\";\n\nexport class Circle implements Element {\n  radius: EvaluatesToNumber;\n  color: string;\n  mode: Mode;\n\n  constructor(radius: EvaluatesToNumber, color: string, mode: Mode) {\n    this.radius = radius;\n    this.color = color;\n    this.mode = mode;\n  }\n\n  accept<JType, NumType, CType>(\n    visitor: Visitor<JType, NumType, CType>,\n  ): JType {\n    return visitor.visitCircle(this);\n  }\n}\n\nexport class Line implements Element {\n  size: EvaluatesToNumber;\n  color: string;\n\n  constructor(size: EvaluatesToNumber, color: string) {\n    this.size = size;\n    this.color = color;\n  }\n\n  accept<JType, NumType, CType>(\n    visitor: Visitor<JType, NumType, CType>,\n  ): JType {\n    return visitor.visitLine(this);\n  }\n}\n\nexport class Petal implements Element {\n  size: EvaluatesToNumber;\n  color: string;\n  mode: Mode;\n\n  constructor(size: EvaluatesToNumber, color: string, mode: Mode) {\n    this.size = size;\n    this.color = color;\n    this.mode = mode;\n  }\n\n  accept<JType, NumType, CType>(\n    visitor: Visitor<JType, NumType, CType>,\n  ): JType {\n    return visitor.visitPetal(this);\n  }\n}\n\nexport class Cardioid implements Element {\n  size: EvaluatesToNumber;\n  color: string;\n  mode: Mode;\n\n  constructor(size: EvaluatesToNumber, color: string, mode: Mode) {\n    this.size = size;\n    this.color = color;\n    this.mode = mode;\n  }\n\n  accept<JType, NumType, CType>(\n    visitor: Visitor<JType, NumType, CType>,\n  ): JType {\n    return visitor.visitCardioid(this);\n  }\n}\n\nexport class Limacon implements Element {\n  size: EvaluatesToNumber;\n  color: string;\n  mode: Mode;\n\n  constructor(size: EvaluatesToNumber, color: string, mode: Mode) {\n    this.size = size;\n    this.color = color;\n    this.mode = mode;\n  }\n\n  accept<JType, NumType, CType>(\n    visitor: Visitor<JType, NumType, CType>,\n  ): JType {\n    return visitor.visitLimacon(this);\n  }\n}\n","import { Element } from \"./Element\";\nimport { EvaluatesToNumber } from \"./EvaluatesToNumber\";\nimport { Article } from \"./Program\";\nimport { Visitor } from \"./Visitor\";\n\nexport class Rotation implements Element {\n  shape: Article;\n  angle: EvaluatesToNumber;\n\n  constructor(shape: Article, angle: EvaluatesToNumber) {\n    this.shape = shape;\n    this.angle = angle;\n  }\n\n  accept<JType, NumType, CType>(\n    visitor: Visitor<JType, NumType, CType>,\n  ): JType {\n    return visitor.visitRotation(this);\n  }\n}\n\nexport class Repetition implements Element {\n  shape: Article;\n  repetitions: EvaluatesToNumber;\n  offset: EvaluatesToNumber;\n\n  constructor(\n    shape: Article,\n    rep: EvaluatesToNumber,\n    offset: EvaluatesToNumber,\n  ) {\n    this.shape = shape;\n    this.repetitions = rep;\n    this.offset = offset;\n  }\n\n  accept<JType, NumType, CType>(\n    visitor: Visitor<JType, NumType, CType>,\n  ): JType {\n    return visitor.visitRepetition(this);\n  }\n}\n\nexport class Overlay implements Element {\n  shapes: Article[];\n\n  constructor(shapes: Article[]) {\n    this.shapes = shapes;\n  }\n\n  accept<JType, NumType, CType>(\n    visitor: Visitor<JType, NumType, CType>,\n  ): JType {\n    return visitor.visitOverlay(this);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\n// IMPORT AND INITIALIZE CLASSES ONCE THEY ARE DONE!!\nimport {\n  AopContext,\n  ArithexpContext,\n  AssignmentContext,\n  CardioidContext,\n  CircleContext,\n  ColorContext,\n  CompexpContext,\n  CopContext,\n  DrawContext,\n  ForloopContext,\n  IfblockContext,\n  LimaconContext,\n  LineContext,\n  ObjectContext,\n  OverlayContext,\n  PetalContext,\n  ProgramContext,\n  RepeatContext,\n  RotateContext,\n  ShapeConstructorContext,\n  ShapeContext,\n  ShapeModeContext,\n  StatementContext,\n  StatementsContext,\n  TransformationContext,\n  VariableContext,\n} from \"./antlr/MandalaParser\";\nimport { MandalaParserVisitor } from \"./antlr/MandalaParserVisitor\";\nimport { SyntaxChecker } from \"./SyntaxChecker\";\nimport { Element } from \"../ast/Element\";\nimport { TerminalNode } from \"antlr4ts/tree/TerminalNode\";\nimport { ErrorNode, ParseTree, RuleNode } from \"antlr4ts/tree\";\nimport {\n  Article,\n  ArticleAssignment,\n  Assignment,\n  Draw,\n  NumAssignment,\n  Program,\n  Statement,\n} from \"../ast/Program\";\nimport { ForLoop, IfBlock } from \"../ast/ControlBlocks\";\nimport { ArithExp, ArithOp, CompExp, CompOp } from \"../ast/Expressions\";\nimport { EvaluatesToNumber } from \"../ast/EvaluatesToNumber\";\nimport { ArticleVariable, NumberVariable } from \"../ast/Variables\";\nimport { Num } from \"../ast/Num\";\nimport {\n  Cardioid,\n  Circle,\n  Limacon,\n  Line,\n  Mode,\n  Petal,\n  Shape,\n} from \"../ast/Shapes\";\nimport { Overlay, Repetition, Rotation } from \"../ast/Transformations\";\n\nexport class ParseTreeToAST implements MandalaParserVisitor<Element> {\n  visitProgram(ctx: ProgramContext): Program {\n    const errorString = SyntaxChecker.visitProgram(ctx);\n    if (errorString !== \"\") {\n      throw new Error(errorString);\n    }\n    const statements: Statement[] = this.getStatements(ctx.statements());\n    const draw: Draw = this.visitDraw(ctx.draw());\n    return new Program(statements, draw);\n  }\n\n  getStatements(ctx: StatementsContext): Statement[] {\n    const statements: Statement[] = [];\n    ctx.statement().forEach((s: StatementContext) => {\n      statements.push(this.visitStatement(s));\n    });\n    return statements;\n  }\n\n  visitStatement(ctx: StatementContext): Statement {\n    if (ctx.assignment() != undefined) {\n      return this.visitAssignment(ctx.assignment()!);\n    } else if (ctx.forloop() != undefined) {\n      return this.visitForloop(ctx.forloop()!);\n    } else if (ctx.ifblock() != undefined) {\n      return this.visitIfblock(ctx.ifblock()!);\n    } else {\n      throw new Error(\"Incorrect statement \" + ctx.text);\n    }\n  }\n\n  visitAssignment(ctx: AssignmentContext): Assignment {\n    const varName: string = ctx.TEXT().toString();\n    if (ctx.shape() != undefined) {\n      return new ArticleAssignment(varName, this.visitShape(ctx.shape()!));\n    } else if (ctx.arithexp() != undefined) {\n      return new NumAssignment(varName, this.visitArithexp(ctx.arithexp()!));\n    } else {\n      throw new Error(\"Incorrect assignment \" + ctx.text);\n    }\n  }\n\n  visitDraw(ctx: DrawContext): Draw {\n    return new Draw(this.visitObject(ctx.object()));\n  }\n\n  visitObject(ctx: ObjectContext): Article {\n    if (ctx.variable() != undefined) {\n      return new ArticleVariable(this.getVariable(ctx.variable()!));\n    } else if (ctx.shape() != undefined) {\n      return this.visitShape(ctx.shape()!);\n    } else {\n      throw new Error(\"Incorrect object: \" + ctx.text);\n    }\n  }\n\n  visitShape(ctx: ShapeContext): Article {\n    if (ctx.shapeConstructor() != undefined) {\n      return this.visitShapeConstructor(ctx.shapeConstructor()!);\n    } else if (ctx.transformation() != undefined) {\n      return this.visitTransformation(ctx.transformation()!);\n    } else {\n      throw new Error(\"Incorrect object: \" + ctx.text);\n    }\n  }\n\n  // Transformations\n  visitTransformation(ctx: TransformationContext): Article {\n    if (ctx.rotate() != undefined) {\n      return this.visitRotate(ctx.rotate()!);\n    } else if (ctx.repeat() != undefined) {\n      return this.visitRepeat(ctx.repeat()!);\n    } else if (ctx.overlay() != undefined) {\n      return this.visitOverlay(ctx.overlay()!);\n    } else {\n      throw new Error(\"Incorrect transformation: \" + ctx.text);\n    }\n  }\n\n  visitRotate(ctx: RotateContext): Article {\n    const shape: Article = this.visitObject(ctx.object());\n    const angle: ArithExp = this.visitArithexp(ctx.arithexp());\n    return new Rotation(shape, angle);\n  }\n\n  visitRepeat(ctx: RepeatContext): Article {\n    const shape: Article = this.visitObject(ctx.object());\n    const repNum: ArithExp = this.visitArithexp(ctx.arithexp(0));\n    const offset: ArithExp = this.visitArithexp(ctx.arithexp(1));\n    return new Repetition(shape, repNum, offset);\n  }\n\n  visitOverlay(ctx: OverlayContext): Article {\n    const shapes: Article[] = [];\n    ctx.object().forEach((o: ObjectContext) => {\n      shapes.push(this.visitObject(o));\n    });\n    return new Overlay(shapes);\n  }\n\n  // Shape constructors\n  visitShapeConstructor(ctx: ShapeConstructorContext): Article {\n    if (ctx.circle() != undefined) {\n      return this.visitCircle(ctx.circle()!);\n    } else if (ctx.line() != undefined) {\n      return this.visitLine(ctx.line()!);\n    } else if (ctx.petal() != undefined) {\n      return this.visitPetal(ctx.petal()!);\n    } else if (ctx.cardioid() != undefined) {\n      return this.visitCardioid(ctx.cardioid()!);\n    } else if (ctx.limacon() != undefined) {\n      return this.visitLimacon(ctx.limacon()!);\n    } else {\n      throw new Error(\"Incorrect shape: \" + ctx.text);\n    }\n  }\n\n  visitCircle(ctx: CircleContext): Shape {\n    const r: EvaluatesToNumber = this.visitArithexp(ctx.arithexp());\n    const color: string = this.getColor(ctx.color());\n    const mode: Mode = this.getShapeMode(ctx.shapeMode());\n    return new Circle(r, color, mode);\n  }\n\n  visitLine(ctx: LineContext): Shape {\n    const size: EvaluatesToNumber = this.visitArithexp(ctx.arithexp());\n    const color: string = this.getColor(ctx.color());\n    return new Line(size, color);\n  }\n\n  visitPetal(ctx: PetalContext): Shape {\n    const size: EvaluatesToNumber = this.visitArithexp(ctx.arithexp());\n    const color: string = this.getColor(ctx.color());\n    const mode: Mode = this.getShapeMode(ctx.shapeMode());\n    return new Petal(size, color, mode);\n  }\n\n  visitCardioid(ctx: CardioidContext): Shape {\n    const size: EvaluatesToNumber = this.visitArithexp(ctx.arithexp());\n    const color: string = this.getColor(ctx.color());\n    const mode: Mode = this.getShapeMode(ctx.shapeMode());\n    return new Cardioid(size, color, mode);\n  }\n\n  visitLimacon(ctx: LimaconContext): Shape {\n    const size: EvaluatesToNumber = this.visitArithexp(ctx.arithexp());\n    const color: string = this.getColor(ctx.color());\n    const mode: Mode = this.getShapeMode(ctx.shapeMode());\n    return new Limacon(size, color, mode);\n  }\n\n  // Control Flows\n  visitForloop(ctx: ForloopContext): ForLoop {\n    const counter: string = this.getVariable(ctx.variable());\n    const rangeStart: EvaluatesToNumber = this.visitArithexp(ctx.arithexp(0));\n    const rangeEnd: EvaluatesToNumber = this.visitArithexp(ctx.arithexp(1));\n    const statements: Statement[] = this.getStatements(ctx.statements());\n    return new ForLoop(counter, rangeStart, rangeEnd, statements);\n  }\n\n  visitIfblock(ctx: IfblockContext): IfBlock {\n    const comp: CompExp = this.visitCompexp(ctx.compexp());\n    const thenStatements: Statement[] = [];\n    ctx._thenblock.statement().forEach((s: StatementContext) => {\n      thenStatements.push(this.visitStatement(s));\n    });\n    if (ctx.ELSE() != undefined) {\n      const elseStatements: Statement[] = [];\n      ctx._elseblock.statement().forEach((s: StatementContext) => {\n        elseStatements.push(this.visitStatement(s));\n      });\n      return new IfBlock(comp, thenStatements, elseStatements);\n    }\n    return new IfBlock(comp, thenStatements);\n  }\n\n  // Expressions\n  visitArithexp(ctx: ArithexpContext): ArithExp {\n    let value: EvaluatesToNumber;\n    if (ctx.variable() != undefined) {\n      value = new NumberVariable(this.getVariable(ctx.variable()!));\n    } else if (ctx.NUM() != undefined) {\n      value = new Num(parseInt(ctx.NUM()!.toString(), 10));\n    } else {\n      throw new Error(\n        \"Incorrect value for the arithmetic expression: \" + ctx.text,\n      );\n    }\n    if (ctx.aop() != undefined && ctx.arithexp() != undefined) {\n      const aop: ArithOp = this.getAop(ctx.aop()!);\n      const arithexp: ArithExp = this.visitArithexp(ctx.arithexp()!);\n      return new ArithExp(value, aop, arithexp);\n    }\n    return new ArithExp(value);\n  }\n\n  visitCompexp(ctx: CompexpContext): CompExp {\n    const arith1: ArithExp = this.visitArithexp(ctx.arithexp(0));\n    const cop: CompOp = this.getCop(ctx.cop());\n    const arith2: ArithExp = this.visitArithexp(ctx.arithexp(1));\n    return new CompExp(arith1, arith2, cop);\n  }\n\n  // Constants\n  getColor(ctx: ColorContext): string {\n    if (ctx.RED() != undefined) {\n      return \"red\";\n    } else if (ctx.ORANGE() != undefined) {\n      return \"orange\";\n    } else if (ctx.YELLOW() != undefined) {\n      return \"yellow\";\n    } else if (ctx.GREEN() != undefined) {\n      return \"green\";\n    } else if (ctx.BLUE() != undefined) {\n      return \"blue\";\n    } else if (ctx.BLACK() != undefined) {\n      return \"black\";\n    } else if (ctx.WHITE() != undefined) {\n      return \"white\";\n    } else if (ctx.HEXCOLOR() != undefined) {\n      return ctx.HEXCOLOR()!.toString();\n    } else {\n      throw new Error(\"Incorrect color: \" + ctx.text);\n    }\n  }\n\n  getShapeMode(ctx: ShapeModeContext): Mode {\n    if (ctx.OUTLINE() != undefined) {\n      return \"outline\";\n    } else if (ctx.SOLID() != undefined) {\n      return \"solid\";\n    } else {\n      throw new Error(\"Incorrect shape mode: \" + ctx.text);\n    }\n  }\n\n  getVariable(ctx: VariableContext): string {\n    return ctx.TEXT().toString();\n  }\n\n  getAop(ctx: AopContext): ArithOp {\n    if (ctx.ADD() != undefined) {\n      return \"+\";\n    } else if (ctx.SUB() != undefined) {\n      return \"-\";\n    } else if (ctx.MULT() != undefined) {\n      return \"*\";\n    } else if (ctx.DIV() != undefined) {\n      return \"/\";\n    } else if (ctx.MOD() != undefined) {\n      return \"%\";\n    } else {\n      throw new Error(\"Incorrect arithmetic operation: \" + ctx.text);\n    }\n  }\n\n  getCop(ctx: CopContext): CompOp {\n    if (ctx.LT() != undefined) {\n      return \"<\";\n    } else if (ctx.LTE() != undefined) {\n      return \"<=\";\n    } else if (ctx.GT() != undefined) {\n      return \">\";\n    } else if (ctx.GTE() != undefined) {\n      return \">=\";\n    } else if (ctx.EQ() != undefined) {\n      return \"==\";\n    } else if (ctx.NEQ() != undefined) {\n      return \"!=\";\n    } else {\n      throw new Error(\"Incorrect conditional: \" + ctx.text);\n    }\n  }\n\n  // Extra methods from MandalaParser.ts\n  visit(tree: ParseTree): Element {\n    throw new Error(\"Visit Tree is not implemented \" + tree.text);\n  }\n\n  visitChildren(node: RuleNode): Element {\n    throw new Error(\"Visit Children is not implemented \" + node.text);\n  }\n\n  visitErrorNode(node: ErrorNode): Element {\n    throw new Error(\"Visit Error Node is not implemented \" + node.text);\n  }\n\n  visitTerminal(node: TerminalNode): Element {\n    throw new Error(\"Visit Terminal is not implemented \" + node.text);\n  }\n}\n","import { CharStreams, CommonTokenStream } from \"antlr4ts\";\nimport { MandalaLexer } from \"./antlr/MandalaLexer\";\nimport { MandalaParser } from \"./antlr/MandalaParser\";\nimport { ParseTreeToAST } from \"./ParseTreeToAST\";\nimport { Program } from \"../ast/Program\";\n\nexport class Main {\n  public static parseCode(code: string): Program {\n    // Create the Lexer\n    const inputStream = CharStreams.fromString(code);\n    const lexer = new MandalaLexer(inputStream);\n    /*PRINT STATEMENTS - FOR TESTING ONLY\n    lexer.getAllTokens().forEach((token) => {\n      // eslint-disable-next-line no-console\n      console.info(token);\n    });\n    */\n    lexer.reset();\n    const tokenStream = new CommonTokenStream(lexer);\n    tokenStream.fill();\n\n    // Create the Parser\n    const parser = new MandalaParser(tokenStream);\n\n    const visitor: ParseTreeToAST = new ParseTreeToAST();\n\n    // Visit the tree\n    const parsedProgram: Program = visitor.visitProgram(parser.program());\n    /* PRINT PROGRAM OBJECT - FOR TESTING ONLY\n    // Returned program:\n    // eslint-disable-next-line no-console\n    console.info(parsedProgram);\n    */\n    return parsedProgram;\n  }\n}\n","class CustomError extends Error {\n  constructor(name: string, message: string) {\n    const _message = `${name}: \"${message}\"`;\n    super(_message);\n    this.name = name;\n  }\n}\n\n// Custom errors\n\nexport class DuplicateVariableError extends CustomError {\n  constructor(variableName: string) {\n    const name = \"UndefinedVariableError\";\n    const message = `'${variableName}' is already defined`;\n    super(name, message);\n  }\n}\n\nexport class TypeError extends CustomError {\n  constructor(variableName: string, expectedType: string) {\n    const name = \"TypeError\";\n    const message = `'${variableName}' is not of type '${expectedType}'`;\n    super(name, message);\n  }\n}\n\nexport class UndefinedVariableError extends CustomError {\n  constructor(variableName: string) {\n    const name = \"UndefinedVariableError\";\n    const message = `'${variableName}' is not defined`;\n    super(name, message);\n  }\n}\n","import { Rotation, Repetition, Overlay } from \"../ast/Transformations\";\nimport {\n  Program,\n  ArticleAssignment,\n  NumAssignment,\n  Draw,\n} from \"../ast/Program\";\nimport { Circle, Line, Petal, Cardioid, Limacon } from \"../ast/Shapes\";\nimport { ArticleVariable, NumberVariable } from \"../ast/Variables\";\nimport { Visitor } from \"../ast/Visitor\";\nimport { CompExp, ArithExp } from \"../ast/Expressions\";\nimport { ForLoop, IfBlock } from \"../ast/ControlBlocks\";\nimport {\n  DuplicateVariableError,\n  UndefinedVariableError,\n  TypeError,\n} from \"./errors\";\n\nexport class Validator implements Visitor<void, void, void> {\n  private varTypeMappings: { [name: string]: \"ARTICLE\" | \"NUMBER\" } = {};\n  private lockedVars: Set<string> = new Set(); // set of variables that cannot be reassigned\n\n  visitProgram(program: Program): void {\n    program.statements.forEach((s) => s.accept(this));\n    program.draw.accept(this);\n  }\n\n  visitArticleAssignment(assignment: ArticleAssignment): void {\n    const isLocked = this.lockedVars.has(assignment.variable);\n    if (isLocked) {\n      throw new DuplicateVariableError(assignment.variable);\n    }\n    this.varTypeMappings[assignment.variable] = \"ARTICLE\";\n    assignment.value.accept(this);\n  }\n\n  visitNumAssignment(assignment: NumAssignment): void {\n    const isLocked = this.lockedVars.has(assignment.variable);\n    if (isLocked) {\n      throw new DuplicateVariableError(assignment.variable);\n    }\n    this.varTypeMappings[assignment.variable] = \"NUMBER\";\n    assignment.value.accept(this);\n  }\n\n  visitDraw(draw: Draw): void {\n    draw.draw.accept(this);\n  }\n\n  visitForLoop(loop: ForLoop): void {\n    const isCounterDefined = this.varTypeMappings[loop.counter] !== undefined;\n    if (isCounterDefined) {\n      throw new DuplicateVariableError(loop.counter);\n    }\n\n    this.lockedVars.add(loop.counter);\n    this.varTypeMappings[loop.counter] = \"NUMBER\";\n\n    loop.rangeStart.accept(this);\n    loop.rangeEnd.accept(this);\n    loop.statements.forEach((s) => s.accept(this));\n\n    // undefine counter variable when loop ends\n    this.lockedVars.delete(loop.counter);\n    delete this.varTypeMappings[loop.counter];\n  }\n\n  visitIfBlock(block: IfBlock): void {\n    block.condition.accept(this);\n\n    block.ifStatements.forEach((statement) => {\n      statement.accept(this);\n    });\n    block.elseStatements?.forEach((statement) => {\n      statement.accept(this);\n    });\n  }\n\n  visitArithExp(expression: ArithExp): void {\n    expression.value.accept(this);\n    expression.otherExp?.accept(this);\n  }\n\n  visitCompExp(expression: CompExp): void {\n    expression.leftArithExp.accept(this);\n    expression.rightArithExp.accept(this);\n  }\n\n  visitRotation(rotation: Rotation): void {\n    rotation.shape.accept(this);\n    rotation.angle.accept(this);\n  }\n\n  visitRepetition(repetition: Repetition): void {\n    repetition.shape.accept(this);\n    repetition.repetitions.accept(this);\n    repetition.offset.accept(this);\n  }\n\n  visitOverlay(overlay: Overlay): void {\n    overlay.shapes.forEach((s) => s.accept(this));\n  }\n\n  visitArticleVariable(variable: ArticleVariable): void {\n    const isDefined = this.varTypeMappings[variable.name] !== undefined;\n    if (!isDefined) {\n      throw new UndefinedVariableError(variable.name);\n    }\n\n    const isArticle = this.varTypeMappings[variable.name] === \"ARTICLE\";\n    if (!isArticle) {\n      throw new TypeError(variable.name, \"shape\");\n    }\n  }\n\n  visitNumberVariable(variable: NumberVariable): void {\n    const isDefined = this.varTypeMappings[variable.name] !== undefined;\n    if (!isDefined) {\n      throw new UndefinedVariableError(variable.name);\n    }\n\n    const isNumber = this.varTypeMappings[variable.name] === \"NUMBER\";\n    if (!isNumber) {\n      throw new TypeError(variable.name, \"number\");\n    }\n  }\n\n  visitNum(): void {\n    return;\n  }\n\n  visitCircle(circle: Circle): void {\n    circle.radius.accept(this);\n  }\n\n  visitLine(line: Line): void {\n    line.size.accept(this);\n  }\n\n  visitPetal(petal: Petal): void {\n    petal.size.accept(this);\n  }\n\n  visitCardioid(cardioid: Cardioid): void {\n    cardioid.size.accept(this);\n  }\n\n  visitLimacon(limacon: Limacon): void {\n    limacon.size.accept(this);\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Interpreter } from \"./interpreter/interpreter\";\nimport App from \"./ui/App\";\nimport { Shape } from \"./ui/types\";\nimport { Main } from \"./parser/Main\";\nimport { JShape } from \"./interpreter/jshapes\";\nimport { Validator } from \"./validator\";\nimport \"./styles.css\";\n\nfunction onCodeChange(): void {\n  return;\n}\n\nfunction onClickRun(code: string): Shape[] {\n  const parsedProgram = Main.parseCode(code);\n\n  const validator: Validator = new Validator();\n  validator.visitProgram(parsedProgram);\n\n  const interpreter: Interpreter = new Interpreter();\n  const shapes: JShape[] = interpreter.visitProgram(parsedProgram);\n\n  return shapes;\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App onCodeChange={onCodeChange} onClickRun={onClickRun} />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}